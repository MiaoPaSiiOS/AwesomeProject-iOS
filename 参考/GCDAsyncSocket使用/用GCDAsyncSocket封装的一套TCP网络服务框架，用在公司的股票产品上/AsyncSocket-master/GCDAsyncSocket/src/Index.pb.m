// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Index.pb.h"
// @@protoc_insertion_point(imports)

@implementation IndexRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [IndexRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [CommonRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

BOOL enum_indexIsValidValue(enum_index value) {
  switch (value) {
    case enum_indexBeginIndexEnum:
    case enum_indexIndexCombo:
    case enum_indexIndex3Bws:
    case enum_indexIndexBdmr:
    case enum_indexIndexBljc:
    case enum_indexIndexCtx:
    case enum_indexIndexDkgz:
    case enum_indexIndexJdd:
    case enum_indexIndexDadi:
    case enum_indexIndexZhongdi:
    case enum_indexIndexXiaodi:
    case enum_indexIndexDzct:
    case enum_indexIndexGkgz:
    case enum_indexIndexHyfg:
    case enum_indexIndexKongpan:
    case enum_indexIndexQlcj:
    case enum_indexIndexSgcx:
    case enum_indexIndexSscd:
    case enum_indexIndexSshd:
    case enum_indexIndexSstp:
    case enum_indexIndexSstpy:
    case enum_indexIndexYyz:
    case enum_indexIndexZlcxg:
    case enum_indexIndexKongpanJiaCangBDian:
    case enum_indexIndexSstd:
    case enum_indexIndexZtgz:
    case enum_indexIndexKDfp:
    case enum_indexIndexKpjc:
    case enum_indexIndexZlzz:
    case enum_indexIndexZlzt:
    case enum_indexIndexZlzj:
    case enum_indexIndexXdjw:
    case enum_indexIndexZljme:
    case enum_indexIndexHighValue:
    case enum_indexFtIndexZlzz:
    case enum_indexFtIndexBljj:
    case enum_indexFtIndexZltj:
    case enum_indexFtIndexMinZltj:
    case enum_indexFtIndexGftj:
    case enum_indexFtIndexMinGftj:
    case enum_indexFtIndexShtj:
    case enum_indexFtIndexMinShtj:
    case enum_indexFtIndexQlft:
    case enum_indexFtIndexLdzj:
    case enum_indexFtIndexSstp:
    case enum_indexFtIndexZlkp:
    case enum_indexFtIndexZljme:
    case enum_indexFtIndexHhjvol:
    case enum_indexFtIndexZcc:
    case enum_indexFtIndexXdjw:
    case enum_indexFtIndexHyxd:
    case enum_indexFtIndexMa:
    case enum_indexEndIndexEnum:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromenum_index(enum_index value) {
  switch (value) {
    case enum_indexBeginIndexEnum:
      return @"enum_indexBeginIndexEnum";
    case enum_indexIndexCombo:
      return @"enum_indexIndexCombo";
    case enum_indexIndex3Bws:
      return @"enum_indexIndex3Bws";
    case enum_indexIndexBdmr:
      return @"enum_indexIndexBdmr";
    case enum_indexIndexBljc:
      return @"enum_indexIndexBljc";
    case enum_indexIndexCtx:
      return @"enum_indexIndexCtx";
    case enum_indexIndexDkgz:
      return @"enum_indexIndexDkgz";
    case enum_indexIndexJdd:
      return @"enum_indexIndexJdd";
    case enum_indexIndexDadi:
      return @"enum_indexIndexDadi";
    case enum_indexIndexZhongdi:
      return @"enum_indexIndexZhongdi";
    case enum_indexIndexXiaodi:
      return @"enum_indexIndexXiaodi";
    case enum_indexIndexDzct:
      return @"enum_indexIndexDzct";
    case enum_indexIndexGkgz:
      return @"enum_indexIndexGkgz";
    case enum_indexIndexHyfg:
      return @"enum_indexIndexHyfg";
    case enum_indexIndexKongpan:
      return @"enum_indexIndexKongpan";
    case enum_indexIndexQlcj:
      return @"enum_indexIndexQlcj";
    case enum_indexIndexSgcx:
      return @"enum_indexIndexSgcx";
    case enum_indexIndexSscd:
      return @"enum_indexIndexSscd";
    case enum_indexIndexSshd:
      return @"enum_indexIndexSshd";
    case enum_indexIndexSstp:
      return @"enum_indexIndexSstp";
    case enum_indexIndexSstpy:
      return @"enum_indexIndexSstpy";
    case enum_indexIndexYyz:
      return @"enum_indexIndexYyz";
    case enum_indexIndexZlcxg:
      return @"enum_indexIndexZlcxg";
    case enum_indexIndexKongpanJiaCangBDian:
      return @"enum_indexIndexKongpanJiaCangBDian";
    case enum_indexIndexSstd:
      return @"enum_indexIndexSstd";
    case enum_indexIndexZtgz:
      return @"enum_indexIndexZtgz";
    case enum_indexIndexKDfp:
      return @"enum_indexIndexKDfp";
    case enum_indexIndexKpjc:
      return @"enum_indexIndexKpjc";
    case enum_indexIndexZlzz:
      return @"enum_indexIndexZlzz";
    case enum_indexIndexZlzt:
      return @"enum_indexIndexZlzt";
    case enum_indexIndexZlzj:
      return @"enum_indexIndexZlzj";
    case enum_indexIndexXdjw:
      return @"enum_indexIndexXdjw";
    case enum_indexIndexZljme:
      return @"enum_indexIndexZljme";
    case enum_indexIndexHighValue:
      return @"enum_indexIndexHighValue";
    case enum_indexFtIndexZlzz:
      return @"enum_indexFtIndexZlzz";
    case enum_indexFtIndexBljj:
      return @"enum_indexFtIndexBljj";
    case enum_indexFtIndexZltj:
      return @"enum_indexFtIndexZltj";
    case enum_indexFtIndexMinZltj:
      return @"enum_indexFtIndexMinZltj";
    case enum_indexFtIndexGftj:
      return @"enum_indexFtIndexGftj";
    case enum_indexFtIndexMinGftj:
      return @"enum_indexFtIndexMinGftj";
    case enum_indexFtIndexShtj:
      return @"enum_indexFtIndexShtj";
    case enum_indexFtIndexMinShtj:
      return @"enum_indexFtIndexMinShtj";
    case enum_indexFtIndexQlft:
      return @"enum_indexFtIndexQlft";
    case enum_indexFtIndexLdzj:
      return @"enum_indexFtIndexLdzj";
    case enum_indexFtIndexSstp:
      return @"enum_indexFtIndexSstp";
    case enum_indexFtIndexZlkp:
      return @"enum_indexFtIndexZlkp";
    case enum_indexFtIndexZljme:
      return @"enum_indexFtIndexZljme";
    case enum_indexFtIndexHhjvol:
      return @"enum_indexFtIndexHhjvol";
    case enum_indexFtIndexZcc:
      return @"enum_indexFtIndexZcc";
    case enum_indexFtIndexXdjw:
      return @"enum_indexFtIndexXdjw";
    case enum_indexFtIndexHyxd:
      return @"enum_indexFtIndexHyxd";
    case enum_indexFtIndexMa:
      return @"enum_indexFtIndexMa";
    case enum_indexEndIndexEnum:
      return @"enum_indexEndIndexEnum";
    default:
      return nil;
  }
}

BOOL index_data_typeIsValidValue(index_data_type value) {
  switch (value) {
    case index_data_typeCycleBegin:
    case index_data_typeIndexCycle1Min:
    case index_data_typeIndexCycle3Min:
    case index_data_typeIndexCycle5Min:
    case index_data_typeIndexCycle10Min:
    case index_data_typeIndexCycle15Min:
    case index_data_typeIndexCycle20Min:
    case index_data_typeIndexCycle30Min:
    case index_data_typeIndexCycle60Min:
    case index_data_typeIndexCycleDay:
    case index_data_typeIndexCycleWeek:
    case index_data_typeIndexCycleMonth:
    case index_data_typeIndexCycleQuarter:
    case index_data_typeIndexCycleYear:
    case index_data_typeCycleEnd:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromindex_data_type(index_data_type value) {
  switch (value) {
    case index_data_typeCycleBegin:
      return @"index_data_typeCycleBegin";
    case index_data_typeIndexCycle1Min:
      return @"index_data_typeIndexCycle1Min";
    case index_data_typeIndexCycle3Min:
      return @"index_data_typeIndexCycle3Min";
    case index_data_typeIndexCycle5Min:
      return @"index_data_typeIndexCycle5Min";
    case index_data_typeIndexCycle10Min:
      return @"index_data_typeIndexCycle10Min";
    case index_data_typeIndexCycle15Min:
      return @"index_data_typeIndexCycle15Min";
    case index_data_typeIndexCycle20Min:
      return @"index_data_typeIndexCycle20Min";
    case index_data_typeIndexCycle30Min:
      return @"index_data_typeIndexCycle30Min";
    case index_data_typeIndexCycle60Min:
      return @"index_data_typeIndexCycle60Min";
    case index_data_typeIndexCycleDay:
      return @"index_data_typeIndexCycleDay";
    case index_data_typeIndexCycleWeek:
      return @"index_data_typeIndexCycleWeek";
    case index_data_typeIndexCycleMonth:
      return @"index_data_typeIndexCycleMonth";
    case index_data_typeIndexCycleQuarter:
      return @"index_data_typeIndexCycleQuarter";
    case index_data_typeIndexCycleYear:
      return @"index_data_typeIndexCycleYear";
    case index_data_typeCycleEnd:
      return @"index_data_typeCycleEnd";
    default:
      return nil;
  }
}

@interface client_request_index_msg ()
@property enum_index name;
@end

@implementation client_request_index_msg

- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) _value_ {
  hasName_ = !!_value_;
}
@synthesize name;
- (instancetype) init {
  if ((self = [super init])) {
    self.name = enum_indexBeginIndexEnum;
  }
  return self;
}
static client_request_index_msg* defaultclient_request_index_msgInstance = nil;
+ (void) initialize {
  if (self == [client_request_index_msg class]) {
    defaultclient_request_index_msgInstance = [[client_request_index_msg alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultclient_request_index_msgInstance;
}
- (instancetype) defaultInstance {
  return defaultclient_request_index_msgInstance;
}
- (BOOL) isInitialized {
  if (!self.hasName) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasName) {
    [output writeEnum:1 value:self.name];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasName) {
    size_ += computeEnumSize(1, self.name);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (client_request_index_msg*) parseFromData:(NSData*) data {
  return (client_request_index_msg*)[[[client_request_index_msg builder] mergeFromData:data] build];
}
+ (client_request_index_msg*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (client_request_index_msg*)[[[client_request_index_msg builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (client_request_index_msg*) parseFromInputStream:(NSInputStream*) input {
  return (client_request_index_msg*)[[[client_request_index_msg builder] mergeFromInputStream:input] build];
}
+ (client_request_index_msg*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (client_request_index_msg*)[[[client_request_index_msg builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (client_request_index_msg*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (client_request_index_msg*)[[[client_request_index_msg builder] mergeFromCodedInputStream:input] build];
}
+ (client_request_index_msg*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (client_request_index_msg*)[[[client_request_index_msg builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (client_request_index_msgBuilder*) builder {
  return [[client_request_index_msgBuilder alloc] init];
}
+ (client_request_index_msgBuilder*) builderWithPrototype:(client_request_index_msg*) prototype {
  return [[client_request_index_msg builder] mergeFrom:prototype];
}
- (client_request_index_msgBuilder*) builder {
  return [client_request_index_msg builder];
}
- (client_request_index_msgBuilder*) toBuilder {
  return [client_request_index_msg builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", NSStringFromenum_index(self.name)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasName) {
    [dictionary setObject: @(self.name) forKey: @"name"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[client_request_index_msg class]]) {
    return NO;
  }
  client_request_index_msg *otherMessage = other;
  return
      self.hasName == otherMessage.hasName &&
      (!self.hasName || self.name == otherMessage.name) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasName) {
    hashCode = hashCode * 31 + self.name;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface client_request_index_msgBuilder()
@property (strong) client_request_index_msg* resultClientRequestIndexMsg;
@end

@implementation client_request_index_msgBuilder
@synthesize resultClientRequestIndexMsg;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultClientRequestIndexMsg = [[client_request_index_msg alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultClientRequestIndexMsg;
}
- (client_request_index_msgBuilder*) clear {
  self.resultClientRequestIndexMsg = [[client_request_index_msg alloc] init];
  return self;
}
- (client_request_index_msgBuilder*) clone {
  return [client_request_index_msg builderWithPrototype:resultClientRequestIndexMsg];
}
- (client_request_index_msg*) defaultInstance {
  return [client_request_index_msg defaultInstance];
}
- (client_request_index_msg*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (client_request_index_msg*) buildPartial {
  client_request_index_msg* returnMe = resultClientRequestIndexMsg;
  self.resultClientRequestIndexMsg = nil;
  return returnMe;
}
- (client_request_index_msgBuilder*) mergeFrom:(client_request_index_msg*) other {
  if (other == [client_request_index_msg defaultInstance]) {
    return self;
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (client_request_index_msgBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (client_request_index_msgBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        enum_index value = (enum_index)[input readEnum];
        if (enum_indexIsValidValue(value)) {
          [self setName:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasName {
  return resultClientRequestIndexMsg.hasName;
}
- (enum_index) name {
  return resultClientRequestIndexMsg.name;
}
- (client_request_index_msgBuilder*) setName:(enum_index) value {
  resultClientRequestIndexMsg.hasName = YES;
  resultClientRequestIndexMsg.name = value;
  return self;
}
- (client_request_index_msgBuilder*) clearName {
  resultClientRequestIndexMsg.hasName = NO;
  resultClientRequestIndexMsg.name = enum_indexBeginIndexEnum;
  return self;
}
@end

@interface client_request_index_result_msg ()
@property enum_index name;
@property (strong) NSMutableArray * stockCodeArray;
@end

@implementation client_request_index_result_msg

- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) _value_ {
  hasName_ = !!_value_;
}
@synthesize name;
@synthesize stockCodeArray;
@dynamic stockCode;
- (instancetype) init {
  if ((self = [super init])) {
    self.name = enum_indexBeginIndexEnum;
  }
  return self;
}
static client_request_index_result_msg* defaultclient_request_index_result_msgInstance = nil;
+ (void) initialize {
  if (self == [client_request_index_result_msg class]) {
    defaultclient_request_index_result_msgInstance = [[client_request_index_result_msg alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultclient_request_index_result_msgInstance;
}
- (instancetype) defaultInstance {
  return defaultclient_request_index_result_msgInstance;
}
- (NSArray *)stockCode {
  return stockCodeArray;
}
- (NSString*)stockCodeAtIndex:(NSUInteger)index {
  return [stockCodeArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasName) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasName) {
    [output writeEnum:1 value:self.name];
  }
  [self.stockCodeArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:2 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasName) {
    size_ += computeEnumSize(1, self.name);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.stockCodeArray.count;
    [self.stockCodeArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (client_request_index_result_msg*) parseFromData:(NSData*) data {
  return (client_request_index_result_msg*)[[[client_request_index_result_msg builder] mergeFromData:data] build];
}
+ (client_request_index_result_msg*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (client_request_index_result_msg*)[[[client_request_index_result_msg builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (client_request_index_result_msg*) parseFromInputStream:(NSInputStream*) input {
  return (client_request_index_result_msg*)[[[client_request_index_result_msg builder] mergeFromInputStream:input] build];
}
+ (client_request_index_result_msg*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (client_request_index_result_msg*)[[[client_request_index_result_msg builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (client_request_index_result_msg*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (client_request_index_result_msg*)[[[client_request_index_result_msg builder] mergeFromCodedInputStream:input] build];
}
+ (client_request_index_result_msg*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (client_request_index_result_msg*)[[[client_request_index_result_msg builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (client_request_index_result_msgBuilder*) builder {
  return [[client_request_index_result_msgBuilder alloc] init];
}
+ (client_request_index_result_msgBuilder*) builderWithPrototype:(client_request_index_result_msg*) prototype {
  return [[client_request_index_result_msg builder] mergeFrom:prototype];
}
- (client_request_index_result_msgBuilder*) builder {
  return [client_request_index_result_msg builder];
}
- (client_request_index_result_msgBuilder*) toBuilder {
  return [client_request_index_result_msg builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", NSStringFromenum_index(self.name)];
  }
  [self.stockCodeArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"stockCode", obj];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasName) {
    [dictionary setObject: @(self.name) forKey: @"name"];
  }
  [dictionary setObject:self.stockCode forKey: @"stockCode"];
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[client_request_index_result_msg class]]) {
    return NO;
  }
  client_request_index_result_msg *otherMessage = other;
  return
      self.hasName == otherMessage.hasName &&
      (!self.hasName || self.name == otherMessage.name) &&
      [self.stockCodeArray isEqualToArray:otherMessage.stockCodeArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasName) {
    hashCode = hashCode * 31 + self.name;
  }
  [self.stockCodeArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface client_request_index_result_msgBuilder()
@property (strong) client_request_index_result_msg* resultClientRequestIndexResultMsg;
@end

@implementation client_request_index_result_msgBuilder
@synthesize resultClientRequestIndexResultMsg;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultClientRequestIndexResultMsg = [[client_request_index_result_msg alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultClientRequestIndexResultMsg;
}
- (client_request_index_result_msgBuilder*) clear {
  self.resultClientRequestIndexResultMsg = [[client_request_index_result_msg alloc] init];
  return self;
}
- (client_request_index_result_msgBuilder*) clone {
  return [client_request_index_result_msg builderWithPrototype:resultClientRequestIndexResultMsg];
}
- (client_request_index_result_msg*) defaultInstance {
  return [client_request_index_result_msg defaultInstance];
}
- (client_request_index_result_msg*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (client_request_index_result_msg*) buildPartial {
  client_request_index_result_msg* returnMe = resultClientRequestIndexResultMsg;
  self.resultClientRequestIndexResultMsg = nil;
  return returnMe;
}
- (client_request_index_result_msgBuilder*) mergeFrom:(client_request_index_result_msg*) other {
  if (other == [client_request_index_result_msg defaultInstance]) {
    return self;
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.stockCodeArray.count > 0) {
    if (resultClientRequestIndexResultMsg.stockCodeArray == nil) {
      resultClientRequestIndexResultMsg.stockCodeArray = [[NSMutableArray alloc] initWithArray:other.stockCodeArray];
    } else {
      [resultClientRequestIndexResultMsg.stockCodeArray addObjectsFromArray:other.stockCodeArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (client_request_index_result_msgBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (client_request_index_result_msgBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        enum_index value = (enum_index)[input readEnum];
        if (enum_indexIsValidValue(value)) {
          [self setName:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 18: {
        [self addStockCode:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasName {
  return resultClientRequestIndexResultMsg.hasName;
}
- (enum_index) name {
  return resultClientRequestIndexResultMsg.name;
}
- (client_request_index_result_msgBuilder*) setName:(enum_index) value {
  resultClientRequestIndexResultMsg.hasName = YES;
  resultClientRequestIndexResultMsg.name = value;
  return self;
}
- (client_request_index_result_msgBuilder*) clearName {
  resultClientRequestIndexResultMsg.hasName = NO;
  resultClientRequestIndexResultMsg.name = enum_indexBeginIndexEnum;
  return self;
}
- (NSMutableArray *)stockCode {
  return resultClientRequestIndexResultMsg.stockCodeArray;
}
- (NSString*)stockCodeAtIndex:(NSUInteger)index {
  return [resultClientRequestIndexResultMsg stockCodeAtIndex:index];
}
- (client_request_index_result_msgBuilder *)addStockCode:(NSString*)value {
  if (resultClientRequestIndexResultMsg.stockCodeArray == nil) {
    resultClientRequestIndexResultMsg.stockCodeArray = [[NSMutableArray alloc]init];
  }
  [resultClientRequestIndexResultMsg.stockCodeArray addObject:value];
  return self;
}
- (client_request_index_result_msgBuilder *)setStockCodeArray:(NSArray *)array {
  resultClientRequestIndexResultMsg.stockCodeArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (client_request_index_result_msgBuilder *)clearStockCode {
  resultClientRequestIndexResultMsg.stockCodeArray = nil;
  return self;
}
@end

@interface client_index_combo_result_msg ()
@property (strong) NSMutableArray * indexNodeArray;
@end

@implementation client_index_combo_result_msg

@synthesize indexNodeArray;
@dynamic indexNode;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static client_index_combo_result_msg* defaultclient_index_combo_result_msgInstance = nil;
+ (void) initialize {
  if (self == [client_index_combo_result_msg class]) {
    defaultclient_index_combo_result_msgInstance = [[client_index_combo_result_msg alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultclient_index_combo_result_msgInstance;
}
- (instancetype) defaultInstance {
  return defaultclient_index_combo_result_msgInstance;
}
- (NSArray *)indexNode {
  return indexNodeArray;
}
- (client_request_index_result_msg*)indexNodeAtIndex:(NSUInteger)index {
  return [indexNodeArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  __block BOOL isInitindexNode = YES;
   [self.indexNode enumerateObjectsUsingBlock:^(client_request_index_result_msg *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitindexNode = NO;
      *stop = YES;
    }
  }];
  if (!isInitindexNode) return isInitindexNode;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.indexNodeArray enumerateObjectsUsingBlock:^(client_request_index_result_msg *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.indexNodeArray enumerateObjectsUsingBlock:^(client_request_index_result_msg *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (client_index_combo_result_msg*) parseFromData:(NSData*) data {
  return (client_index_combo_result_msg*)[[[client_index_combo_result_msg builder] mergeFromData:data] build];
}
+ (client_index_combo_result_msg*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (client_index_combo_result_msg*)[[[client_index_combo_result_msg builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (client_index_combo_result_msg*) parseFromInputStream:(NSInputStream*) input {
  return (client_index_combo_result_msg*)[[[client_index_combo_result_msg builder] mergeFromInputStream:input] build];
}
+ (client_index_combo_result_msg*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (client_index_combo_result_msg*)[[[client_index_combo_result_msg builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (client_index_combo_result_msg*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (client_index_combo_result_msg*)[[[client_index_combo_result_msg builder] mergeFromCodedInputStream:input] build];
}
+ (client_index_combo_result_msg*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (client_index_combo_result_msg*)[[[client_index_combo_result_msg builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (client_index_combo_result_msgBuilder*) builder {
  return [[client_index_combo_result_msgBuilder alloc] init];
}
+ (client_index_combo_result_msgBuilder*) builderWithPrototype:(client_index_combo_result_msg*) prototype {
  return [[client_index_combo_result_msg builder] mergeFrom:prototype];
}
- (client_index_combo_result_msgBuilder*) builder {
  return [client_index_combo_result_msg builder];
}
- (client_index_combo_result_msgBuilder*) toBuilder {
  return [client_index_combo_result_msg builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.indexNodeArray enumerateObjectsUsingBlock:^(client_request_index_result_msg *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"indexNode"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  for (client_request_index_result_msg* element in self.indexNodeArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"indexNode"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[client_index_combo_result_msg class]]) {
    return NO;
  }
  client_index_combo_result_msg *otherMessage = other;
  return
      [self.indexNodeArray isEqualToArray:otherMessage.indexNodeArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.indexNodeArray enumerateObjectsUsingBlock:^(client_request_index_result_msg *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface client_index_combo_result_msgBuilder()
@property (strong) client_index_combo_result_msg* resultClientIndexComboResultMsg;
@end

@implementation client_index_combo_result_msgBuilder
@synthesize resultClientIndexComboResultMsg;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultClientIndexComboResultMsg = [[client_index_combo_result_msg alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultClientIndexComboResultMsg;
}
- (client_index_combo_result_msgBuilder*) clear {
  self.resultClientIndexComboResultMsg = [[client_index_combo_result_msg alloc] init];
  return self;
}
- (client_index_combo_result_msgBuilder*) clone {
  return [client_index_combo_result_msg builderWithPrototype:resultClientIndexComboResultMsg];
}
- (client_index_combo_result_msg*) defaultInstance {
  return [client_index_combo_result_msg defaultInstance];
}
- (client_index_combo_result_msg*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (client_index_combo_result_msg*) buildPartial {
  client_index_combo_result_msg* returnMe = resultClientIndexComboResultMsg;
  self.resultClientIndexComboResultMsg = nil;
  return returnMe;
}
- (client_index_combo_result_msgBuilder*) mergeFrom:(client_index_combo_result_msg*) other {
  if (other == [client_index_combo_result_msg defaultInstance]) {
    return self;
  }
  if (other.indexNodeArray.count > 0) {
    if (resultClientIndexComboResultMsg.indexNodeArray == nil) {
      resultClientIndexComboResultMsg.indexNodeArray = [[NSMutableArray alloc] initWithArray:other.indexNodeArray];
    } else {
      [resultClientIndexComboResultMsg.indexNodeArray addObjectsFromArray:other.indexNodeArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (client_index_combo_result_msgBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (client_index_combo_result_msgBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        client_request_index_result_msgBuilder* subBuilder = [client_request_index_result_msg builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addIndexNode:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)indexNode {
  return resultClientIndexComboResultMsg.indexNodeArray;
}
- (client_request_index_result_msg*)indexNodeAtIndex:(NSUInteger)index {
  return [resultClientIndexComboResultMsg indexNodeAtIndex:index];
}
- (client_index_combo_result_msgBuilder *)addIndexNode:(client_request_index_result_msg*)value {
  if (resultClientIndexComboResultMsg.indexNodeArray == nil) {
    resultClientIndexComboResultMsg.indexNodeArray = [[NSMutableArray alloc]init];
  }
  [resultClientIndexComboResultMsg.indexNodeArray addObject:value];
  return self;
}
- (client_index_combo_result_msgBuilder *)setIndexNodeArray:(NSArray *)array {
  resultClientIndexComboResultMsg.indexNodeArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (client_index_combo_result_msgBuilder *)clearIndexNode {
  resultClientIndexComboResultMsg.indexNodeArray = nil;
  return self;
}
@end

@interface error_feedback_msg ()
@property (strong) NSString* msg;
@end

@implementation error_feedback_msg

- (BOOL) hasMsg {
  return !!hasMsg_;
}
- (void) setHasMsg:(BOOL) _value_ {
  hasMsg_ = !!_value_;
}
@synthesize msg;
- (instancetype) init {
  if ((self = [super init])) {
    self.msg = @"";
  }
  return self;
}
static error_feedback_msg* defaulterror_feedback_msgInstance = nil;
+ (void) initialize {
  if (self == [error_feedback_msg class]) {
    defaulterror_feedback_msgInstance = [[error_feedback_msg alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaulterror_feedback_msgInstance;
}
- (instancetype) defaultInstance {
  return defaulterror_feedback_msgInstance;
}
- (BOOL) isInitialized {
  if (!self.hasMsg) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasMsg) {
    [output writeString:1 value:self.msg];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasMsg) {
    size_ += computeStringSize(1, self.msg);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (error_feedback_msg*) parseFromData:(NSData*) data {
  return (error_feedback_msg*)[[[error_feedback_msg builder] mergeFromData:data] build];
}
+ (error_feedback_msg*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (error_feedback_msg*)[[[error_feedback_msg builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (error_feedback_msg*) parseFromInputStream:(NSInputStream*) input {
  return (error_feedback_msg*)[[[error_feedback_msg builder] mergeFromInputStream:input] build];
}
+ (error_feedback_msg*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (error_feedback_msg*)[[[error_feedback_msg builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (error_feedback_msg*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (error_feedback_msg*)[[[error_feedback_msg builder] mergeFromCodedInputStream:input] build];
}
+ (error_feedback_msg*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (error_feedback_msg*)[[[error_feedback_msg builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (error_feedback_msgBuilder*) builder {
  return [[error_feedback_msgBuilder alloc] init];
}
+ (error_feedback_msgBuilder*) builderWithPrototype:(error_feedback_msg*) prototype {
  return [[error_feedback_msg builder] mergeFrom:prototype];
}
- (error_feedback_msgBuilder*) builder {
  return [error_feedback_msg builder];
}
- (error_feedback_msgBuilder*) toBuilder {
  return [error_feedback_msg builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasMsg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"msg", self.msg];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasMsg) {
    [dictionary setObject: self.msg forKey: @"msg"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[error_feedback_msg class]]) {
    return NO;
  }
  error_feedback_msg *otherMessage = other;
  return
      self.hasMsg == otherMessage.hasMsg &&
      (!self.hasMsg || [self.msg isEqual:otherMessage.msg]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasMsg) {
    hashCode = hashCode * 31 + [self.msg hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface error_feedback_msgBuilder()
@property (strong) error_feedback_msg* resultErrorFeedbackMsg;
@end

@implementation error_feedback_msgBuilder
@synthesize resultErrorFeedbackMsg;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultErrorFeedbackMsg = [[error_feedback_msg alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultErrorFeedbackMsg;
}
- (error_feedback_msgBuilder*) clear {
  self.resultErrorFeedbackMsg = [[error_feedback_msg alloc] init];
  return self;
}
- (error_feedback_msgBuilder*) clone {
  return [error_feedback_msg builderWithPrototype:resultErrorFeedbackMsg];
}
- (error_feedback_msg*) defaultInstance {
  return [error_feedback_msg defaultInstance];
}
- (error_feedback_msg*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (error_feedback_msg*) buildPartial {
  error_feedback_msg* returnMe = resultErrorFeedbackMsg;
  self.resultErrorFeedbackMsg = nil;
  return returnMe;
}
- (error_feedback_msgBuilder*) mergeFrom:(error_feedback_msg*) other {
  if (other == [error_feedback_msg defaultInstance]) {
    return self;
  }
  if (other.hasMsg) {
    [self setMsg:other.msg];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (error_feedback_msgBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (error_feedback_msgBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setMsg:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasMsg {
  return resultErrorFeedbackMsg.hasMsg;
}
- (NSString*) msg {
  return resultErrorFeedbackMsg.msg;
}
- (error_feedback_msgBuilder*) setMsg:(NSString*) value {
  resultErrorFeedbackMsg.hasMsg = YES;
  resultErrorFeedbackMsg.msg = value;
  return self;
}
- (error_feedback_msgBuilder*) clearMsg {
  resultErrorFeedbackMsg.hasMsg = NO;
  resultErrorFeedbackMsg.msg = @"";
  return self;
}
@end

@interface index_data_msg ()
@property enum_index name;
@property (strong) NSString* stockCode;
@property index_data_type cycleType;
@property (strong) data_selector* selector;
@property (strong) NSData* indexParam;
@end

@implementation index_data_msg

- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) _value_ {
  hasName_ = !!_value_;
}
@synthesize name;
- (BOOL) hasStockCode {
  return !!hasStockCode_;
}
- (void) setHasStockCode:(BOOL) _value_ {
  hasStockCode_ = !!_value_;
}
@synthesize stockCode;
- (BOOL) hasCycleType {
  return !!hasCycleType_;
}
- (void) setHasCycleType:(BOOL) _value_ {
  hasCycleType_ = !!_value_;
}
@synthesize cycleType;
- (BOOL) hasSelector {
  return !!hasSelector_;
}
- (void) setHasSelector:(BOOL) _value_ {
  hasSelector_ = !!_value_;
}
@synthesize selector;
- (BOOL) hasIndexParam {
  return !!hasIndexParam_;
}
- (void) setHasIndexParam:(BOOL) _value_ {
  hasIndexParam_ = !!_value_;
}
@synthesize indexParam;
- (instancetype) init {
  if ((self = [super init])) {
    self.name = enum_indexBeginIndexEnum;
    self.stockCode = @"";
    self.cycleType = index_data_typeCycleBegin;
    self.selector = [data_selector defaultInstance];
    self.indexParam = [NSData data];
  }
  return self;
}
static index_data_msg* defaultindex_data_msgInstance = nil;
+ (void) initialize {
  if (self == [index_data_msg class]) {
    defaultindex_data_msgInstance = [[index_data_msg alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultindex_data_msgInstance;
}
- (instancetype) defaultInstance {
  return defaultindex_data_msgInstance;
}
- (BOOL) isInitialized {
  if (!self.hasName) {
    return NO;
  }
  if (!self.hasStockCode) {
    return NO;
  }
  if (!self.hasCycleType) {
    return NO;
  }
  if (!self.hasSelector) {
    return NO;
  }
  if (!self.selector.isInitialized) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasName) {
    [output writeEnum:1 value:self.name];
  }
  if (self.hasStockCode) {
    [output writeString:2 value:self.stockCode];
  }
  if (self.hasCycleType) {
    [output writeEnum:3 value:self.cycleType];
  }
  if (self.hasSelector) {
    [output writeMessage:4 value:self.selector];
  }
  if (self.hasIndexParam) {
    [output writeData:5 value:self.indexParam];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasName) {
    size_ += computeEnumSize(1, self.name);
  }
  if (self.hasStockCode) {
    size_ += computeStringSize(2, self.stockCode);
  }
  if (self.hasCycleType) {
    size_ += computeEnumSize(3, self.cycleType);
  }
  if (self.hasSelector) {
    size_ += computeMessageSize(4, self.selector);
  }
  if (self.hasIndexParam) {
    size_ += computeDataSize(5, self.indexParam);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (index_data_msg*) parseFromData:(NSData*) data {
  return (index_data_msg*)[[[index_data_msg builder] mergeFromData:data] build];
}
+ (index_data_msg*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (index_data_msg*)[[[index_data_msg builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (index_data_msg*) parseFromInputStream:(NSInputStream*) input {
  return (index_data_msg*)[[[index_data_msg builder] mergeFromInputStream:input] build];
}
+ (index_data_msg*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (index_data_msg*)[[[index_data_msg builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (index_data_msg*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (index_data_msg*)[[[index_data_msg builder] mergeFromCodedInputStream:input] build];
}
+ (index_data_msg*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (index_data_msg*)[[[index_data_msg builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (index_data_msgBuilder*) builder {
  return [[index_data_msgBuilder alloc] init];
}
+ (index_data_msgBuilder*) builderWithPrototype:(index_data_msg*) prototype {
  return [[index_data_msg builder] mergeFrom:prototype];
}
- (index_data_msgBuilder*) builder {
  return [index_data_msg builder];
}
- (index_data_msgBuilder*) toBuilder {
  return [index_data_msg builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", NSStringFromenum_index(self.name)];
  }
  if (self.hasStockCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"stockCode", self.stockCode];
  }
  if (self.hasCycleType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cycleType", NSStringFromindex_data_type(self.cycleType)];
  }
  if (self.hasSelector) {
    [output appendFormat:@"%@%@ {\n", indent, @"selector"];
    [self.selector writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasIndexParam) {
    [output appendFormat:@"%@%@: %@\n", indent, @"indexParam", self.indexParam];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasName) {
    [dictionary setObject: @(self.name) forKey: @"name"];
  }
  if (self.hasStockCode) {
    [dictionary setObject: self.stockCode forKey: @"stockCode"];
  }
  if (self.hasCycleType) {
    [dictionary setObject: @(self.cycleType) forKey: @"cycleType"];
  }
  if (self.hasSelector) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.selector storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"selector"];
  }
  if (self.hasIndexParam) {
    [dictionary setObject: self.indexParam forKey: @"indexParam"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[index_data_msg class]]) {
    return NO;
  }
  index_data_msg *otherMessage = other;
  return
      self.hasName == otherMessage.hasName &&
      (!self.hasName || self.name == otherMessage.name) &&
      self.hasStockCode == otherMessage.hasStockCode &&
      (!self.hasStockCode || [self.stockCode isEqual:otherMessage.stockCode]) &&
      self.hasCycleType == otherMessage.hasCycleType &&
      (!self.hasCycleType || self.cycleType == otherMessage.cycleType) &&
      self.hasSelector == otherMessage.hasSelector &&
      (!self.hasSelector || [self.selector isEqual:otherMessage.selector]) &&
      self.hasIndexParam == otherMessage.hasIndexParam &&
      (!self.hasIndexParam || [self.indexParam isEqual:otherMessage.indexParam]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasName) {
    hashCode = hashCode * 31 + self.name;
  }
  if (self.hasStockCode) {
    hashCode = hashCode * 31 + [self.stockCode hash];
  }
  if (self.hasCycleType) {
    hashCode = hashCode * 31 + self.cycleType;
  }
  if (self.hasSelector) {
    hashCode = hashCode * 31 + [self.selector hash];
  }
  if (self.hasIndexParam) {
    hashCode = hashCode * 31 + [self.indexParam hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface index_data_msgBuilder()
@property (strong) index_data_msg* resultIndexDataMsg;
@end

@implementation index_data_msgBuilder
@synthesize resultIndexDataMsg;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultIndexDataMsg = [[index_data_msg alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultIndexDataMsg;
}
- (index_data_msgBuilder*) clear {
  self.resultIndexDataMsg = [[index_data_msg alloc] init];
  return self;
}
- (index_data_msgBuilder*) clone {
  return [index_data_msg builderWithPrototype:resultIndexDataMsg];
}
- (index_data_msg*) defaultInstance {
  return [index_data_msg defaultInstance];
}
- (index_data_msg*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (index_data_msg*) buildPartial {
  index_data_msg* returnMe = resultIndexDataMsg;
  self.resultIndexDataMsg = nil;
  return returnMe;
}
- (index_data_msgBuilder*) mergeFrom:(index_data_msg*) other {
  if (other == [index_data_msg defaultInstance]) {
    return self;
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasStockCode) {
    [self setStockCode:other.stockCode];
  }
  if (other.hasCycleType) {
    [self setCycleType:other.cycleType];
  }
  if (other.hasSelector) {
    [self mergeSelector:other.selector];
  }
  if (other.hasIndexParam) {
    [self setIndexParam:other.indexParam];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (index_data_msgBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (index_data_msgBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        enum_index value = (enum_index)[input readEnum];
        if (enum_indexIsValidValue(value)) {
          [self setName:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 18: {
        [self setStockCode:[input readString]];
        break;
      }
      case 24: {
        index_data_type value = (index_data_type)[input readEnum];
        if (index_data_typeIsValidValue(value)) {
          [self setCycleType:value];
        } else {
          [unknownFields mergeVarintField:3 value:value];
        }
        break;
      }
      case 34: {
        data_selectorBuilder* subBuilder = [data_selector builder];
        if (self.hasSelector) {
          [subBuilder mergeFrom:self.selector];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setSelector:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        [self setIndexParam:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasName {
  return resultIndexDataMsg.hasName;
}
- (enum_index) name {
  return resultIndexDataMsg.name;
}
- (index_data_msgBuilder*) setName:(enum_index) value {
  resultIndexDataMsg.hasName = YES;
  resultIndexDataMsg.name = value;
  return self;
}
- (index_data_msgBuilder*) clearName {
  resultIndexDataMsg.hasName = NO;
  resultIndexDataMsg.name = enum_indexBeginIndexEnum;
  return self;
}
- (BOOL) hasStockCode {
  return resultIndexDataMsg.hasStockCode;
}
- (NSString*) stockCode {
  return resultIndexDataMsg.stockCode;
}
- (index_data_msgBuilder*) setStockCode:(NSString*) value {
  resultIndexDataMsg.hasStockCode = YES;
  resultIndexDataMsg.stockCode = value;
  return self;
}
- (index_data_msgBuilder*) clearStockCode {
  resultIndexDataMsg.hasStockCode = NO;
  resultIndexDataMsg.stockCode = @"";
  return self;
}
- (BOOL) hasCycleType {
  return resultIndexDataMsg.hasCycleType;
}
- (index_data_type) cycleType {
  return resultIndexDataMsg.cycleType;
}
- (index_data_msgBuilder*) setCycleType:(index_data_type) value {
  resultIndexDataMsg.hasCycleType = YES;
  resultIndexDataMsg.cycleType = value;
  return self;
}
- (index_data_msgBuilder*) clearCycleType {
  resultIndexDataMsg.hasCycleType = NO;
  resultIndexDataMsg.cycleType = index_data_typeCycleBegin;
  return self;
}
- (BOOL) hasSelector {
  return resultIndexDataMsg.hasSelector;
}
- (data_selector*) selector {
  return resultIndexDataMsg.selector;
}
- (index_data_msgBuilder*) setSelector:(data_selector*) value {
  resultIndexDataMsg.hasSelector = YES;
  resultIndexDataMsg.selector = value;
  return self;
}
- (index_data_msgBuilder*) setSelectorBuilder:(data_selectorBuilder*) builderForValue {
  return [self setSelector:[builderForValue build]];
}
- (index_data_msgBuilder*) mergeSelector:(data_selector*) value {
  if (resultIndexDataMsg.hasSelector &&
      resultIndexDataMsg.selector != [data_selector defaultInstance]) {
    resultIndexDataMsg.selector =
      [[[data_selector builderWithPrototype:resultIndexDataMsg.selector] mergeFrom:value] buildPartial];
  } else {
    resultIndexDataMsg.selector = value;
  }
  resultIndexDataMsg.hasSelector = YES;
  return self;
}
- (index_data_msgBuilder*) clearSelector {
  resultIndexDataMsg.hasSelector = NO;
  resultIndexDataMsg.selector = [data_selector defaultInstance];
  return self;
}
- (BOOL) hasIndexParam {
  return resultIndexDataMsg.hasIndexParam;
}
- (NSData*) indexParam {
  return resultIndexDataMsg.indexParam;
}
- (index_data_msgBuilder*) setIndexParam:(NSData*) value {
  resultIndexDataMsg.hasIndexParam = YES;
  resultIndexDataMsg.indexParam = value;
  return self;
}
- (index_data_msgBuilder*) clearIndexParam {
  resultIndexDataMsg.hasIndexParam = NO;
  resultIndexDataMsg.indexParam = [NSData data];
  return self;
}
@end

@interface zlzz ()
@property UInt32 time;
@property Float64 zlzzValue;
@end

@implementation zlzz

- (BOOL) hasTime {
  return !!hasTime_;
}
- (void) setHasTime:(BOOL) _value_ {
  hasTime_ = !!_value_;
}
@synthesize time;
- (BOOL) hasZlzzValue {
  return !!hasZlzzValue_;
}
- (void) setHasZlzzValue:(BOOL) _value_ {
  hasZlzzValue_ = !!_value_;
}
@synthesize zlzzValue;
- (instancetype) init {
  if ((self = [super init])) {
    self.time = 0;
    self.zlzzValue = 0;
  }
  return self;
}
static zlzz* defaultzlzzInstance = nil;
+ (void) initialize {
  if (self == [zlzz class]) {
    defaultzlzzInstance = [[zlzz alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultzlzzInstance;
}
- (instancetype) defaultInstance {
  return defaultzlzzInstance;
}
- (BOOL) isInitialized {
  if (!self.hasTime) {
    return NO;
  }
  if (!self.hasZlzzValue) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTime) {
    [output writeUInt32:1 value:self.time];
  }
  if (self.hasZlzzValue) {
    [output writeDouble:3 value:self.zlzzValue];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasTime) {
    size_ += computeUInt32Size(1, self.time);
  }
  if (self.hasZlzzValue) {
    size_ += computeDoubleSize(3, self.zlzzValue);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (zlzz*) parseFromData:(NSData*) data {
  return (zlzz*)[[[zlzz builder] mergeFromData:data] build];
}
+ (zlzz*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (zlzz*)[[[zlzz builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (zlzz*) parseFromInputStream:(NSInputStream*) input {
  return (zlzz*)[[[zlzz builder] mergeFromInputStream:input] build];
}
+ (zlzz*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (zlzz*)[[[zlzz builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (zlzz*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (zlzz*)[[[zlzz builder] mergeFromCodedInputStream:input] build];
}
+ (zlzz*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (zlzz*)[[[zlzz builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (zlzzBuilder*) builder {
  return [[zlzzBuilder alloc] init];
}
+ (zlzzBuilder*) builderWithPrototype:(zlzz*) prototype {
  return [[zlzz builder] mergeFrom:prototype];
}
- (zlzzBuilder*) builder {
  return [zlzz builder];
}
- (zlzzBuilder*) toBuilder {
  return [zlzz builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"time", [NSNumber numberWithInteger:self.time]];
  }
  if (self.hasZlzzValue) {
    [output appendFormat:@"%@%@: %@\n", indent, @"zlzzValue", [NSNumber numberWithDouble:self.zlzzValue]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasTime) {
    [dictionary setObject: [NSNumber numberWithInteger:self.time] forKey: @"time"];
  }
  if (self.hasZlzzValue) {
    [dictionary setObject: [NSNumber numberWithDouble:self.zlzzValue] forKey: @"zlzzValue"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[zlzz class]]) {
    return NO;
  }
  zlzz *otherMessage = other;
  return
      self.hasTime == otherMessage.hasTime &&
      (!self.hasTime || self.time == otherMessage.time) &&
      self.hasZlzzValue == otherMessage.hasZlzzValue &&
      (!self.hasZlzzValue || self.zlzzValue == otherMessage.zlzzValue) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.time] hash];
  }
  if (self.hasZlzzValue) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.zlzzValue] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface zlzzBuilder()
@property (strong) zlzz* resultZlzz;
@end

@implementation zlzzBuilder
@synthesize resultZlzz;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultZlzz = [[zlzz alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultZlzz;
}
- (zlzzBuilder*) clear {
  self.resultZlzz = [[zlzz alloc] init];
  return self;
}
- (zlzzBuilder*) clone {
  return [zlzz builderWithPrototype:resultZlzz];
}
- (zlzz*) defaultInstance {
  return [zlzz defaultInstance];
}
- (zlzz*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (zlzz*) buildPartial {
  zlzz* returnMe = resultZlzz;
  self.resultZlzz = nil;
  return returnMe;
}
- (zlzzBuilder*) mergeFrom:(zlzz*) other {
  if (other == [zlzz defaultInstance]) {
    return self;
  }
  if (other.hasTime) {
    [self setTime:other.time];
  }
  if (other.hasZlzzValue) {
    [self setZlzzValue:other.zlzzValue];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (zlzzBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (zlzzBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setTime:[input readUInt32]];
        break;
      }
      case 25: {
        [self setZlzzValue:[input readDouble]];
        break;
      }
    }
  }
}
- (BOOL) hasTime {
  return resultZlzz.hasTime;
}
- (UInt32) time {
  return resultZlzz.time;
}
- (zlzzBuilder*) setTime:(UInt32) value {
  resultZlzz.hasTime = YES;
  resultZlzz.time = value;
  return self;
}
- (zlzzBuilder*) clearTime {
  resultZlzz.hasTime = NO;
  resultZlzz.time = 0;
  return self;
}
- (BOOL) hasZlzzValue {
  return resultZlzz.hasZlzzValue;
}
- (Float64) zlzzValue {
  return resultZlzz.zlzzValue;
}
- (zlzzBuilder*) setZlzzValue:(Float64) value {
  resultZlzz.hasZlzzValue = YES;
  resultZlzz.zlzzValue = value;
  return self;
}
- (zlzzBuilder*) clearZlzzValue {
  resultZlzz.hasZlzzValue = NO;
  resultZlzz.zlzzValue = 0;
  return self;
}
@end

@interface zlzz_array ()
@property (strong) NSMutableArray * indexDataArray;
@end

@implementation zlzz_array

@synthesize indexDataArray;
@dynamic indexData;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static zlzz_array* defaultzlzz_arrayInstance = nil;
+ (void) initialize {
  if (self == [zlzz_array class]) {
    defaultzlzz_arrayInstance = [[zlzz_array alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultzlzz_arrayInstance;
}
- (instancetype) defaultInstance {
  return defaultzlzz_arrayInstance;
}
- (NSArray *)indexData {
  return indexDataArray;
}
- (zlzz*)indexDataAtIndex:(NSUInteger)index {
  return [indexDataArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  __block BOOL isInitindexData = YES;
   [self.indexData enumerateObjectsUsingBlock:^(zlzz *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitindexData = NO;
      *stop = YES;
    }
  }];
  if (!isInitindexData) return isInitindexData;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.indexDataArray enumerateObjectsUsingBlock:^(zlzz *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.indexDataArray enumerateObjectsUsingBlock:^(zlzz *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (zlzz_array*) parseFromData:(NSData*) data {
  return (zlzz_array*)[[[zlzz_array builder] mergeFromData:data] build];
}
+ (zlzz_array*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (zlzz_array*)[[[zlzz_array builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (zlzz_array*) parseFromInputStream:(NSInputStream*) input {
  return (zlzz_array*)[[[zlzz_array builder] mergeFromInputStream:input] build];
}
+ (zlzz_array*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (zlzz_array*)[[[zlzz_array builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (zlzz_array*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (zlzz_array*)[[[zlzz_array builder] mergeFromCodedInputStream:input] build];
}
+ (zlzz_array*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (zlzz_array*)[[[zlzz_array builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (zlzz_arrayBuilder*) builder {
  return [[zlzz_arrayBuilder alloc] init];
}
+ (zlzz_arrayBuilder*) builderWithPrototype:(zlzz_array*) prototype {
  return [[zlzz_array builder] mergeFrom:prototype];
}
- (zlzz_arrayBuilder*) builder {
  return [zlzz_array builder];
}
- (zlzz_arrayBuilder*) toBuilder {
  return [zlzz_array builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.indexDataArray enumerateObjectsUsingBlock:^(zlzz *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"indexData"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  for (zlzz* element in self.indexDataArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"indexData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[zlzz_array class]]) {
    return NO;
  }
  zlzz_array *otherMessage = other;
  return
      [self.indexDataArray isEqualToArray:otherMessage.indexDataArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.indexDataArray enumerateObjectsUsingBlock:^(zlzz *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface zlzz_arrayBuilder()
@property (strong) zlzz_array* resultZlzzArray;
@end

@implementation zlzz_arrayBuilder
@synthesize resultZlzzArray;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultZlzzArray = [[zlzz_array alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultZlzzArray;
}
- (zlzz_arrayBuilder*) clear {
  self.resultZlzzArray = [[zlzz_array alloc] init];
  return self;
}
- (zlzz_arrayBuilder*) clone {
  return [zlzz_array builderWithPrototype:resultZlzzArray];
}
- (zlzz_array*) defaultInstance {
  return [zlzz_array defaultInstance];
}
- (zlzz_array*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (zlzz_array*) buildPartial {
  zlzz_array* returnMe = resultZlzzArray;
  self.resultZlzzArray = nil;
  return returnMe;
}
- (zlzz_arrayBuilder*) mergeFrom:(zlzz_array*) other {
  if (other == [zlzz_array defaultInstance]) {
    return self;
  }
  if (other.indexDataArray.count > 0) {
    if (resultZlzzArray.indexDataArray == nil) {
      resultZlzzArray.indexDataArray = [[NSMutableArray alloc] initWithArray:other.indexDataArray];
    } else {
      [resultZlzzArray.indexDataArray addObjectsFromArray:other.indexDataArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (zlzz_arrayBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (zlzz_arrayBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        zlzzBuilder* subBuilder = [zlzz builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addIndexData:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)indexData {
  return resultZlzzArray.indexDataArray;
}
- (zlzz*)indexDataAtIndex:(NSUInteger)index {
  return [resultZlzzArray indexDataAtIndex:index];
}
- (zlzz_arrayBuilder *)addIndexData:(zlzz*)value {
  if (resultZlzzArray.indexDataArray == nil) {
    resultZlzzArray.indexDataArray = [[NSMutableArray alloc]init];
  }
  [resultZlzzArray.indexDataArray addObject:value];
  return self;
}
- (zlzz_arrayBuilder *)setIndexDataArray:(NSArray *)array {
  resultZlzzArray.indexDataArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (zlzz_arrayBuilder *)clearIndexData {
  resultZlzzArray.indexDataArray = nil;
  return self;
}
@end

@interface zlzt ()
@property UInt32 time;
@property Float64 duanXianShangGong;
@property Float64 zhongXianQiangShi;
@property Float64 zhongXianKongPan;
@property Float64 duanXianChaoDie;
@property Float64 zhongXianChaoDie;
@end

@implementation zlzt

- (BOOL) hasTime {
  return !!hasTime_;
}
- (void) setHasTime:(BOOL) _value_ {
  hasTime_ = !!_value_;
}
@synthesize time;
- (BOOL) hasDuanXianShangGong {
  return !!hasDuanXianShangGong_;
}
- (void) setHasDuanXianShangGong:(BOOL) _value_ {
  hasDuanXianShangGong_ = !!_value_;
}
@synthesize duanXianShangGong;
- (BOOL) hasZhongXianQiangShi {
  return !!hasZhongXianQiangShi_;
}
- (void) setHasZhongXianQiangShi:(BOOL) _value_ {
  hasZhongXianQiangShi_ = !!_value_;
}
@synthesize zhongXianQiangShi;
- (BOOL) hasZhongXianKongPan {
  return !!hasZhongXianKongPan_;
}
- (void) setHasZhongXianKongPan:(BOOL) _value_ {
  hasZhongXianKongPan_ = !!_value_;
}
@synthesize zhongXianKongPan;
- (BOOL) hasDuanXianChaoDie {
  return !!hasDuanXianChaoDie_;
}
- (void) setHasDuanXianChaoDie:(BOOL) _value_ {
  hasDuanXianChaoDie_ = !!_value_;
}
@synthesize duanXianChaoDie;
- (BOOL) hasZhongXianChaoDie {
  return !!hasZhongXianChaoDie_;
}
- (void) setHasZhongXianChaoDie:(BOOL) _value_ {
  hasZhongXianChaoDie_ = !!_value_;
}
@synthesize zhongXianChaoDie;
- (instancetype) init {
  if ((self = [super init])) {
    self.time = 0;
    self.duanXianShangGong = 0;
    self.zhongXianQiangShi = 0;
    self.zhongXianKongPan = 0;
    self.duanXianChaoDie = 0;
    self.zhongXianChaoDie = 0;
  }
  return self;
}
static zlzt* defaultzlztInstance = nil;
+ (void) initialize {
  if (self == [zlzt class]) {
    defaultzlztInstance = [[zlzt alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultzlztInstance;
}
- (instancetype) defaultInstance {
  return defaultzlztInstance;
}
- (BOOL) isInitialized {
  if (!self.hasTime) {
    return NO;
  }
  if (!self.hasDuanXianShangGong) {
    return NO;
  }
  if (!self.hasZhongXianQiangShi) {
    return NO;
  }
  if (!self.hasZhongXianKongPan) {
    return NO;
  }
  if (!self.hasDuanXianChaoDie) {
    return NO;
  }
  if (!self.hasZhongXianChaoDie) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTime) {
    [output writeUInt32:1 value:self.time];
  }
  if (self.hasDuanXianShangGong) {
    [output writeDouble:2 value:self.duanXianShangGong];
  }
  if (self.hasZhongXianQiangShi) {
    [output writeDouble:3 value:self.zhongXianQiangShi];
  }
  if (self.hasZhongXianKongPan) {
    [output writeDouble:4 value:self.zhongXianKongPan];
  }
  if (self.hasDuanXianChaoDie) {
    [output writeDouble:5 value:self.duanXianChaoDie];
  }
  if (self.hasZhongXianChaoDie) {
    [output writeDouble:6 value:self.zhongXianChaoDie];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasTime) {
    size_ += computeUInt32Size(1, self.time);
  }
  if (self.hasDuanXianShangGong) {
    size_ += computeDoubleSize(2, self.duanXianShangGong);
  }
  if (self.hasZhongXianQiangShi) {
    size_ += computeDoubleSize(3, self.zhongXianQiangShi);
  }
  if (self.hasZhongXianKongPan) {
    size_ += computeDoubleSize(4, self.zhongXianKongPan);
  }
  if (self.hasDuanXianChaoDie) {
    size_ += computeDoubleSize(5, self.duanXianChaoDie);
  }
  if (self.hasZhongXianChaoDie) {
    size_ += computeDoubleSize(6, self.zhongXianChaoDie);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (zlzt*) parseFromData:(NSData*) data {
  return (zlzt*)[[[zlzt builder] mergeFromData:data] build];
}
+ (zlzt*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (zlzt*)[[[zlzt builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (zlzt*) parseFromInputStream:(NSInputStream*) input {
  return (zlzt*)[[[zlzt builder] mergeFromInputStream:input] build];
}
+ (zlzt*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (zlzt*)[[[zlzt builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (zlzt*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (zlzt*)[[[zlzt builder] mergeFromCodedInputStream:input] build];
}
+ (zlzt*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (zlzt*)[[[zlzt builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (zlztBuilder*) builder {
  return [[zlztBuilder alloc] init];
}
+ (zlztBuilder*) builderWithPrototype:(zlzt*) prototype {
  return [[zlzt builder] mergeFrom:prototype];
}
- (zlztBuilder*) builder {
  return [zlzt builder];
}
- (zlztBuilder*) toBuilder {
  return [zlzt builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"time", [NSNumber numberWithInteger:self.time]];
  }
  if (self.hasDuanXianShangGong) {
    [output appendFormat:@"%@%@: %@\n", indent, @"duanXianShangGong", [NSNumber numberWithDouble:self.duanXianShangGong]];
  }
  if (self.hasZhongXianQiangShi) {
    [output appendFormat:@"%@%@: %@\n", indent, @"zhongXianQiangShi", [NSNumber numberWithDouble:self.zhongXianQiangShi]];
  }
  if (self.hasZhongXianKongPan) {
    [output appendFormat:@"%@%@: %@\n", indent, @"zhongXianKongPan", [NSNumber numberWithDouble:self.zhongXianKongPan]];
  }
  if (self.hasDuanXianChaoDie) {
    [output appendFormat:@"%@%@: %@\n", indent, @"duanXianChaoDie", [NSNumber numberWithDouble:self.duanXianChaoDie]];
  }
  if (self.hasZhongXianChaoDie) {
    [output appendFormat:@"%@%@: %@\n", indent, @"zhongXianChaoDie", [NSNumber numberWithDouble:self.zhongXianChaoDie]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasTime) {
    [dictionary setObject: [NSNumber numberWithInteger:self.time] forKey: @"time"];
  }
  if (self.hasDuanXianShangGong) {
    [dictionary setObject: [NSNumber numberWithDouble:self.duanXianShangGong] forKey: @"duanXianShangGong"];
  }
  if (self.hasZhongXianQiangShi) {
    [dictionary setObject: [NSNumber numberWithDouble:self.zhongXianQiangShi] forKey: @"zhongXianQiangShi"];
  }
  if (self.hasZhongXianKongPan) {
    [dictionary setObject: [NSNumber numberWithDouble:self.zhongXianKongPan] forKey: @"zhongXianKongPan"];
  }
  if (self.hasDuanXianChaoDie) {
    [dictionary setObject: [NSNumber numberWithDouble:self.duanXianChaoDie] forKey: @"duanXianChaoDie"];
  }
  if (self.hasZhongXianChaoDie) {
    [dictionary setObject: [NSNumber numberWithDouble:self.zhongXianChaoDie] forKey: @"zhongXianChaoDie"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[zlzt class]]) {
    return NO;
  }
  zlzt *otherMessage = other;
  return
      self.hasTime == otherMessage.hasTime &&
      (!self.hasTime || self.time == otherMessage.time) &&
      self.hasDuanXianShangGong == otherMessage.hasDuanXianShangGong &&
      (!self.hasDuanXianShangGong || self.duanXianShangGong == otherMessage.duanXianShangGong) &&
      self.hasZhongXianQiangShi == otherMessage.hasZhongXianQiangShi &&
      (!self.hasZhongXianQiangShi || self.zhongXianQiangShi == otherMessage.zhongXianQiangShi) &&
      self.hasZhongXianKongPan == otherMessage.hasZhongXianKongPan &&
      (!self.hasZhongXianKongPan || self.zhongXianKongPan == otherMessage.zhongXianKongPan) &&
      self.hasDuanXianChaoDie == otherMessage.hasDuanXianChaoDie &&
      (!self.hasDuanXianChaoDie || self.duanXianChaoDie == otherMessage.duanXianChaoDie) &&
      self.hasZhongXianChaoDie == otherMessage.hasZhongXianChaoDie &&
      (!self.hasZhongXianChaoDie || self.zhongXianChaoDie == otherMessage.zhongXianChaoDie) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.time] hash];
  }
  if (self.hasDuanXianShangGong) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.duanXianShangGong] hash];
  }
  if (self.hasZhongXianQiangShi) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.zhongXianQiangShi] hash];
  }
  if (self.hasZhongXianKongPan) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.zhongXianKongPan] hash];
  }
  if (self.hasDuanXianChaoDie) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.duanXianChaoDie] hash];
  }
  if (self.hasZhongXianChaoDie) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.zhongXianChaoDie] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface zlztBuilder()
@property (strong) zlzt* resultZlzt;
@end

@implementation zlztBuilder
@synthesize resultZlzt;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultZlzt = [[zlzt alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultZlzt;
}
- (zlztBuilder*) clear {
  self.resultZlzt = [[zlzt alloc] init];
  return self;
}
- (zlztBuilder*) clone {
  return [zlzt builderWithPrototype:resultZlzt];
}
- (zlzt*) defaultInstance {
  return [zlzt defaultInstance];
}
- (zlzt*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (zlzt*) buildPartial {
  zlzt* returnMe = resultZlzt;
  self.resultZlzt = nil;
  return returnMe;
}
- (zlztBuilder*) mergeFrom:(zlzt*) other {
  if (other == [zlzt defaultInstance]) {
    return self;
  }
  if (other.hasTime) {
    [self setTime:other.time];
  }
  if (other.hasDuanXianShangGong) {
    [self setDuanXianShangGong:other.duanXianShangGong];
  }
  if (other.hasZhongXianQiangShi) {
    [self setZhongXianQiangShi:other.zhongXianQiangShi];
  }
  if (other.hasZhongXianKongPan) {
    [self setZhongXianKongPan:other.zhongXianKongPan];
  }
  if (other.hasDuanXianChaoDie) {
    [self setDuanXianChaoDie:other.duanXianChaoDie];
  }
  if (other.hasZhongXianChaoDie) {
    [self setZhongXianChaoDie:other.zhongXianChaoDie];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (zlztBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (zlztBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setTime:[input readUInt32]];
        break;
      }
      case 17: {
        [self setDuanXianShangGong:[input readDouble]];
        break;
      }
      case 25: {
        [self setZhongXianQiangShi:[input readDouble]];
        break;
      }
      case 33: {
        [self setZhongXianKongPan:[input readDouble]];
        break;
      }
      case 41: {
        [self setDuanXianChaoDie:[input readDouble]];
        break;
      }
      case 49: {
        [self setZhongXianChaoDie:[input readDouble]];
        break;
      }
    }
  }
}
- (BOOL) hasTime {
  return resultZlzt.hasTime;
}
- (UInt32) time {
  return resultZlzt.time;
}
- (zlztBuilder*) setTime:(UInt32) value {
  resultZlzt.hasTime = YES;
  resultZlzt.time = value;
  return self;
}
- (zlztBuilder*) clearTime {
  resultZlzt.hasTime = NO;
  resultZlzt.time = 0;
  return self;
}
- (BOOL) hasDuanXianShangGong {
  return resultZlzt.hasDuanXianShangGong;
}
- (Float64) duanXianShangGong {
  return resultZlzt.duanXianShangGong;
}
- (zlztBuilder*) setDuanXianShangGong:(Float64) value {
  resultZlzt.hasDuanXianShangGong = YES;
  resultZlzt.duanXianShangGong = value;
  return self;
}
- (zlztBuilder*) clearDuanXianShangGong {
  resultZlzt.hasDuanXianShangGong = NO;
  resultZlzt.duanXianShangGong = 0;
  return self;
}
- (BOOL) hasZhongXianQiangShi {
  return resultZlzt.hasZhongXianQiangShi;
}
- (Float64) zhongXianQiangShi {
  return resultZlzt.zhongXianQiangShi;
}
- (zlztBuilder*) setZhongXianQiangShi:(Float64) value {
  resultZlzt.hasZhongXianQiangShi = YES;
  resultZlzt.zhongXianQiangShi = value;
  return self;
}
- (zlztBuilder*) clearZhongXianQiangShi {
  resultZlzt.hasZhongXianQiangShi = NO;
  resultZlzt.zhongXianQiangShi = 0;
  return self;
}
- (BOOL) hasZhongXianKongPan {
  return resultZlzt.hasZhongXianKongPan;
}
- (Float64) zhongXianKongPan {
  return resultZlzt.zhongXianKongPan;
}
- (zlztBuilder*) setZhongXianKongPan:(Float64) value {
  resultZlzt.hasZhongXianKongPan = YES;
  resultZlzt.zhongXianKongPan = value;
  return self;
}
- (zlztBuilder*) clearZhongXianKongPan {
  resultZlzt.hasZhongXianKongPan = NO;
  resultZlzt.zhongXianKongPan = 0;
  return self;
}
- (BOOL) hasDuanXianChaoDie {
  return resultZlzt.hasDuanXianChaoDie;
}
- (Float64) duanXianChaoDie {
  return resultZlzt.duanXianChaoDie;
}
- (zlztBuilder*) setDuanXianChaoDie:(Float64) value {
  resultZlzt.hasDuanXianChaoDie = YES;
  resultZlzt.duanXianChaoDie = value;
  return self;
}
- (zlztBuilder*) clearDuanXianChaoDie {
  resultZlzt.hasDuanXianChaoDie = NO;
  resultZlzt.duanXianChaoDie = 0;
  return self;
}
- (BOOL) hasZhongXianChaoDie {
  return resultZlzt.hasZhongXianChaoDie;
}
- (Float64) zhongXianChaoDie {
  return resultZlzt.zhongXianChaoDie;
}
- (zlztBuilder*) setZhongXianChaoDie:(Float64) value {
  resultZlzt.hasZhongXianChaoDie = YES;
  resultZlzt.zhongXianChaoDie = value;
  return self;
}
- (zlztBuilder*) clearZhongXianChaoDie {
  resultZlzt.hasZhongXianChaoDie = NO;
  resultZlzt.zhongXianChaoDie = 0;
  return self;
}
@end

@interface zlzt_array ()
@property (strong) NSMutableArray * indexDataArray;
@end

@implementation zlzt_array

@synthesize indexDataArray;
@dynamic indexData;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static zlzt_array* defaultzlzt_arrayInstance = nil;
+ (void) initialize {
  if (self == [zlzt_array class]) {
    defaultzlzt_arrayInstance = [[zlzt_array alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultzlzt_arrayInstance;
}
- (instancetype) defaultInstance {
  return defaultzlzt_arrayInstance;
}
- (NSArray *)indexData {
  return indexDataArray;
}
- (zlzt*)indexDataAtIndex:(NSUInteger)index {
  return [indexDataArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  __block BOOL isInitindexData = YES;
   [self.indexData enumerateObjectsUsingBlock:^(zlzt *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitindexData = NO;
      *stop = YES;
    }
  }];
  if (!isInitindexData) return isInitindexData;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.indexDataArray enumerateObjectsUsingBlock:^(zlzt *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.indexDataArray enumerateObjectsUsingBlock:^(zlzt *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (zlzt_array*) parseFromData:(NSData*) data {
  return (zlzt_array*)[[[zlzt_array builder] mergeFromData:data] build];
}
+ (zlzt_array*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (zlzt_array*)[[[zlzt_array builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (zlzt_array*) parseFromInputStream:(NSInputStream*) input {
  return (zlzt_array*)[[[zlzt_array builder] mergeFromInputStream:input] build];
}
+ (zlzt_array*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (zlzt_array*)[[[zlzt_array builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (zlzt_array*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (zlzt_array*)[[[zlzt_array builder] mergeFromCodedInputStream:input] build];
}
+ (zlzt_array*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (zlzt_array*)[[[zlzt_array builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (zlzt_arrayBuilder*) builder {
  return [[zlzt_arrayBuilder alloc] init];
}
+ (zlzt_arrayBuilder*) builderWithPrototype:(zlzt_array*) prototype {
  return [[zlzt_array builder] mergeFrom:prototype];
}
- (zlzt_arrayBuilder*) builder {
  return [zlzt_array builder];
}
- (zlzt_arrayBuilder*) toBuilder {
  return [zlzt_array builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.indexDataArray enumerateObjectsUsingBlock:^(zlzt *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"indexData"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  for (zlzt* element in self.indexDataArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"indexData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[zlzt_array class]]) {
    return NO;
  }
  zlzt_array *otherMessage = other;
  return
      [self.indexDataArray isEqualToArray:otherMessage.indexDataArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.indexDataArray enumerateObjectsUsingBlock:^(zlzt *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface zlzt_arrayBuilder()
@property (strong) zlzt_array* resultZlztArray;
@end

@implementation zlzt_arrayBuilder
@synthesize resultZlztArray;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultZlztArray = [[zlzt_array alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultZlztArray;
}
- (zlzt_arrayBuilder*) clear {
  self.resultZlztArray = [[zlzt_array alloc] init];
  return self;
}
- (zlzt_arrayBuilder*) clone {
  return [zlzt_array builderWithPrototype:resultZlztArray];
}
- (zlzt_array*) defaultInstance {
  return [zlzt_array defaultInstance];
}
- (zlzt_array*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (zlzt_array*) buildPartial {
  zlzt_array* returnMe = resultZlztArray;
  self.resultZlztArray = nil;
  return returnMe;
}
- (zlzt_arrayBuilder*) mergeFrom:(zlzt_array*) other {
  if (other == [zlzt_array defaultInstance]) {
    return self;
  }
  if (other.indexDataArray.count > 0) {
    if (resultZlztArray.indexDataArray == nil) {
      resultZlztArray.indexDataArray = [[NSMutableArray alloc] initWithArray:other.indexDataArray];
    } else {
      [resultZlztArray.indexDataArray addObjectsFromArray:other.indexDataArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (zlzt_arrayBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (zlzt_arrayBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        zlztBuilder* subBuilder = [zlzt builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addIndexData:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)indexData {
  return resultZlztArray.indexDataArray;
}
- (zlzt*)indexDataAtIndex:(NSUInteger)index {
  return [resultZlztArray indexDataAtIndex:index];
}
- (zlzt_arrayBuilder *)addIndexData:(zlzt*)value {
  if (resultZlztArray.indexDataArray == nil) {
    resultZlztArray.indexDataArray = [[NSMutableArray alloc]init];
  }
  [resultZlztArray.indexDataArray addObject:value];
  return self;
}
- (zlzt_arrayBuilder *)setIndexDataArray:(NSArray *)array {
  resultZlztArray.indexDataArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (zlzt_arrayBuilder *)clearIndexData {
  resultZlztArray.indexDataArray = nil;
  return self;
}
@end

@interface bljj ()
@property UInt32 time;
@property Float64 xys0;
@property Float64 xyshsl;
@property Float64 cys13;
@end

@implementation bljj

- (BOOL) hasTime {
  return !!hasTime_;
}
- (void) setHasTime:(BOOL) _value_ {
  hasTime_ = !!_value_;
}
@synthesize time;
- (BOOL) hasXys0 {
  return !!hasXys0_;
}
- (void) setHasXys0:(BOOL) _value_ {
  hasXys0_ = !!_value_;
}
@synthesize xys0;
- (BOOL) hasXyshsl {
  return !!hasXyshsl_;
}
- (void) setHasXyshsl:(BOOL) _value_ {
  hasXyshsl_ = !!_value_;
}
@synthesize xyshsl;
- (BOOL) hasCys13 {
  return !!hasCys13_;
}
- (void) setHasCys13:(BOOL) _value_ {
  hasCys13_ = !!_value_;
}
@synthesize cys13;
- (instancetype) init {
  if ((self = [super init])) {
    self.time = 0;
    self.xys0 = 0;
    self.xyshsl = 0;
    self.cys13 = 0;
  }
  return self;
}
static bljj* defaultbljjInstance = nil;
+ (void) initialize {
  if (self == [bljj class]) {
    defaultbljjInstance = [[bljj alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultbljjInstance;
}
- (instancetype) defaultInstance {
  return defaultbljjInstance;
}
- (BOOL) isInitialized {
  if (!self.hasTime) {
    return NO;
  }
  if (!self.hasXys0) {
    return NO;
  }
  if (!self.hasXyshsl) {
    return NO;
  }
  if (!self.hasCys13) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTime) {
    [output writeUInt32:1 value:self.time];
  }
  if (self.hasXys0) {
    [output writeDouble:2 value:self.xys0];
  }
  if (self.hasXyshsl) {
    [output writeDouble:3 value:self.xyshsl];
  }
  if (self.hasCys13) {
    [output writeDouble:4 value:self.cys13];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasTime) {
    size_ += computeUInt32Size(1, self.time);
  }
  if (self.hasXys0) {
    size_ += computeDoubleSize(2, self.xys0);
  }
  if (self.hasXyshsl) {
    size_ += computeDoubleSize(3, self.xyshsl);
  }
  if (self.hasCys13) {
    size_ += computeDoubleSize(4, self.cys13);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (bljj*) parseFromData:(NSData*) data {
  return (bljj*)[[[bljj builder] mergeFromData:data] build];
}
+ (bljj*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (bljj*)[[[bljj builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (bljj*) parseFromInputStream:(NSInputStream*) input {
  return (bljj*)[[[bljj builder] mergeFromInputStream:input] build];
}
+ (bljj*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (bljj*)[[[bljj builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (bljj*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (bljj*)[[[bljj builder] mergeFromCodedInputStream:input] build];
}
+ (bljj*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (bljj*)[[[bljj builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (bljjBuilder*) builder {
  return [[bljjBuilder alloc] init];
}
+ (bljjBuilder*) builderWithPrototype:(bljj*) prototype {
  return [[bljj builder] mergeFrom:prototype];
}
- (bljjBuilder*) builder {
  return [bljj builder];
}
- (bljjBuilder*) toBuilder {
  return [bljj builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"time", [NSNumber numberWithInteger:self.time]];
  }
  if (self.hasXys0) {
    [output appendFormat:@"%@%@: %@\n", indent, @"xys0", [NSNumber numberWithDouble:self.xys0]];
  }
  if (self.hasXyshsl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"xyshsl", [NSNumber numberWithDouble:self.xyshsl]];
  }
  if (self.hasCys13) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cys13", [NSNumber numberWithDouble:self.cys13]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasTime) {
    [dictionary setObject: [NSNumber numberWithInteger:self.time] forKey: @"time"];
  }
  if (self.hasXys0) {
    [dictionary setObject: [NSNumber numberWithDouble:self.xys0] forKey: @"xys0"];
  }
  if (self.hasXyshsl) {
    [dictionary setObject: [NSNumber numberWithDouble:self.xyshsl] forKey: @"xyshsl"];
  }
  if (self.hasCys13) {
    [dictionary setObject: [NSNumber numberWithDouble:self.cys13] forKey: @"cys13"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[bljj class]]) {
    return NO;
  }
  bljj *otherMessage = other;
  return
      self.hasTime == otherMessage.hasTime &&
      (!self.hasTime || self.time == otherMessage.time) &&
      self.hasXys0 == otherMessage.hasXys0 &&
      (!self.hasXys0 || self.xys0 == otherMessage.xys0) &&
      self.hasXyshsl == otherMessage.hasXyshsl &&
      (!self.hasXyshsl || self.xyshsl == otherMessage.xyshsl) &&
      self.hasCys13 == otherMessage.hasCys13 &&
      (!self.hasCys13 || self.cys13 == otherMessage.cys13) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.time] hash];
  }
  if (self.hasXys0) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.xys0] hash];
  }
  if (self.hasXyshsl) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.xyshsl] hash];
  }
  if (self.hasCys13) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.cys13] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface bljjBuilder()
@property (strong) bljj* resultBljj;
@end

@implementation bljjBuilder
@synthesize resultBljj;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultBljj = [[bljj alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultBljj;
}
- (bljjBuilder*) clear {
  self.resultBljj = [[bljj alloc] init];
  return self;
}
- (bljjBuilder*) clone {
  return [bljj builderWithPrototype:resultBljj];
}
- (bljj*) defaultInstance {
  return [bljj defaultInstance];
}
- (bljj*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (bljj*) buildPartial {
  bljj* returnMe = resultBljj;
  self.resultBljj = nil;
  return returnMe;
}
- (bljjBuilder*) mergeFrom:(bljj*) other {
  if (other == [bljj defaultInstance]) {
    return self;
  }
  if (other.hasTime) {
    [self setTime:other.time];
  }
  if (other.hasXys0) {
    [self setXys0:other.xys0];
  }
  if (other.hasXyshsl) {
    [self setXyshsl:other.xyshsl];
  }
  if (other.hasCys13) {
    [self setCys13:other.cys13];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (bljjBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (bljjBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setTime:[input readUInt32]];
        break;
      }
      case 17: {
        [self setXys0:[input readDouble]];
        break;
      }
      case 25: {
        [self setXyshsl:[input readDouble]];
        break;
      }
      case 33: {
        [self setCys13:[input readDouble]];
        break;
      }
    }
  }
}
- (BOOL) hasTime {
  return resultBljj.hasTime;
}
- (UInt32) time {
  return resultBljj.time;
}
- (bljjBuilder*) setTime:(UInt32) value {
  resultBljj.hasTime = YES;
  resultBljj.time = value;
  return self;
}
- (bljjBuilder*) clearTime {
  resultBljj.hasTime = NO;
  resultBljj.time = 0;
  return self;
}
- (BOOL) hasXys0 {
  return resultBljj.hasXys0;
}
- (Float64) xys0 {
  return resultBljj.xys0;
}
- (bljjBuilder*) setXys0:(Float64) value {
  resultBljj.hasXys0 = YES;
  resultBljj.xys0 = value;
  return self;
}
- (bljjBuilder*) clearXys0 {
  resultBljj.hasXys0 = NO;
  resultBljj.xys0 = 0;
  return self;
}
- (BOOL) hasXyshsl {
  return resultBljj.hasXyshsl;
}
- (Float64) xyshsl {
  return resultBljj.xyshsl;
}
- (bljjBuilder*) setXyshsl:(Float64) value {
  resultBljj.hasXyshsl = YES;
  resultBljj.xyshsl = value;
  return self;
}
- (bljjBuilder*) clearXyshsl {
  resultBljj.hasXyshsl = NO;
  resultBljj.xyshsl = 0;
  return self;
}
- (BOOL) hasCys13 {
  return resultBljj.hasCys13;
}
- (Float64) cys13 {
  return resultBljj.cys13;
}
- (bljjBuilder*) setCys13:(Float64) value {
  resultBljj.hasCys13 = YES;
  resultBljj.cys13 = value;
  return self;
}
- (bljjBuilder*) clearCys13 {
  resultBljj.hasCys13 = NO;
  resultBljj.cys13 = 0;
  return self;
}
@end

@interface bljj_array ()
@property (strong) NSMutableArray * indexDataArray;
@end

@implementation bljj_array

@synthesize indexDataArray;
@dynamic indexData;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static bljj_array* defaultbljj_arrayInstance = nil;
+ (void) initialize {
  if (self == [bljj_array class]) {
    defaultbljj_arrayInstance = [[bljj_array alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultbljj_arrayInstance;
}
- (instancetype) defaultInstance {
  return defaultbljj_arrayInstance;
}
- (NSArray *)indexData {
  return indexDataArray;
}
- (bljj*)indexDataAtIndex:(NSUInteger)index {
  return [indexDataArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  __block BOOL isInitindexData = YES;
   [self.indexData enumerateObjectsUsingBlock:^(bljj *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitindexData = NO;
      *stop = YES;
    }
  }];
  if (!isInitindexData) return isInitindexData;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.indexDataArray enumerateObjectsUsingBlock:^(bljj *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.indexDataArray enumerateObjectsUsingBlock:^(bljj *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (bljj_array*) parseFromData:(NSData*) data {
  return (bljj_array*)[[[bljj_array builder] mergeFromData:data] build];
}
+ (bljj_array*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (bljj_array*)[[[bljj_array builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (bljj_array*) parseFromInputStream:(NSInputStream*) input {
  return (bljj_array*)[[[bljj_array builder] mergeFromInputStream:input] build];
}
+ (bljj_array*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (bljj_array*)[[[bljj_array builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (bljj_array*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (bljj_array*)[[[bljj_array builder] mergeFromCodedInputStream:input] build];
}
+ (bljj_array*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (bljj_array*)[[[bljj_array builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (bljj_arrayBuilder*) builder {
  return [[bljj_arrayBuilder alloc] init];
}
+ (bljj_arrayBuilder*) builderWithPrototype:(bljj_array*) prototype {
  return [[bljj_array builder] mergeFrom:prototype];
}
- (bljj_arrayBuilder*) builder {
  return [bljj_array builder];
}
- (bljj_arrayBuilder*) toBuilder {
  return [bljj_array builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.indexDataArray enumerateObjectsUsingBlock:^(bljj *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"indexData"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  for (bljj* element in self.indexDataArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"indexData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[bljj_array class]]) {
    return NO;
  }
  bljj_array *otherMessage = other;
  return
      [self.indexDataArray isEqualToArray:otherMessage.indexDataArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.indexDataArray enumerateObjectsUsingBlock:^(bljj *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface bljj_arrayBuilder()
@property (strong) bljj_array* resultBljjArray;
@end

@implementation bljj_arrayBuilder
@synthesize resultBljjArray;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultBljjArray = [[bljj_array alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultBljjArray;
}
- (bljj_arrayBuilder*) clear {
  self.resultBljjArray = [[bljj_array alloc] init];
  return self;
}
- (bljj_arrayBuilder*) clone {
  return [bljj_array builderWithPrototype:resultBljjArray];
}
- (bljj_array*) defaultInstance {
  return [bljj_array defaultInstance];
}
- (bljj_array*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (bljj_array*) buildPartial {
  bljj_array* returnMe = resultBljjArray;
  self.resultBljjArray = nil;
  return returnMe;
}
- (bljj_arrayBuilder*) mergeFrom:(bljj_array*) other {
  if (other == [bljj_array defaultInstance]) {
    return self;
  }
  if (other.indexDataArray.count > 0) {
    if (resultBljjArray.indexDataArray == nil) {
      resultBljjArray.indexDataArray = [[NSMutableArray alloc] initWithArray:other.indexDataArray];
    } else {
      [resultBljjArray.indexDataArray addObjectsFromArray:other.indexDataArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (bljj_arrayBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (bljj_arrayBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        bljjBuilder* subBuilder = [bljj builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addIndexData:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)indexData {
  return resultBljjArray.indexDataArray;
}
- (bljj*)indexDataAtIndex:(NSUInteger)index {
  return [resultBljjArray indexDataAtIndex:index];
}
- (bljj_arrayBuilder *)addIndexData:(bljj*)value {
  if (resultBljjArray.indexDataArray == nil) {
    resultBljjArray.indexDataArray = [[NSMutableArray alloc]init];
  }
  [resultBljjArray.indexDataArray addObject:value];
  return self;
}
- (bljj_arrayBuilder *)setIndexDataArray:(NSArray *)array {
  resultBljjArray.indexDataArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (bljj_arrayBuilder *)clearIndexData {
  resultBljjArray.indexDataArray = nil;
  return self;
}
@end

@interface minute_tj_data ()
@property UInt32 time;
@property Float64 tjValue;
@end

@implementation minute_tj_data

- (BOOL) hasTime {
  return !!hasTime_;
}
- (void) setHasTime:(BOOL) _value_ {
  hasTime_ = !!_value_;
}
@synthesize time;
- (BOOL) hasTjValue {
  return !!hasTjValue_;
}
- (void) setHasTjValue:(BOOL) _value_ {
  hasTjValue_ = !!_value_;
}
@synthesize tjValue;
- (instancetype) init {
  if ((self = [super init])) {
    self.time = 0;
    self.tjValue = 0;
  }
  return self;
}
static minute_tj_data* defaultminute_tj_dataInstance = nil;
+ (void) initialize {
  if (self == [minute_tj_data class]) {
    defaultminute_tj_dataInstance = [[minute_tj_data alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultminute_tj_dataInstance;
}
- (instancetype) defaultInstance {
  return defaultminute_tj_dataInstance;
}
- (BOOL) isInitialized {
  if (!self.hasTime) {
    return NO;
  }
  if (!self.hasTjValue) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTime) {
    [output writeUInt32:1 value:self.time];
  }
  if (self.hasTjValue) {
    [output writeDouble:2 value:self.tjValue];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasTime) {
    size_ += computeUInt32Size(1, self.time);
  }
  if (self.hasTjValue) {
    size_ += computeDoubleSize(2, self.tjValue);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (minute_tj_data*) parseFromData:(NSData*) data {
  return (minute_tj_data*)[[[minute_tj_data builder] mergeFromData:data] build];
}
+ (minute_tj_data*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (minute_tj_data*)[[[minute_tj_data builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (minute_tj_data*) parseFromInputStream:(NSInputStream*) input {
  return (minute_tj_data*)[[[minute_tj_data builder] mergeFromInputStream:input] build];
}
+ (minute_tj_data*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (minute_tj_data*)[[[minute_tj_data builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (minute_tj_data*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (minute_tj_data*)[[[minute_tj_data builder] mergeFromCodedInputStream:input] build];
}
+ (minute_tj_data*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (minute_tj_data*)[[[minute_tj_data builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (minute_tj_dataBuilder*) builder {
  return [[minute_tj_dataBuilder alloc] init];
}
+ (minute_tj_dataBuilder*) builderWithPrototype:(minute_tj_data*) prototype {
  return [[minute_tj_data builder] mergeFrom:prototype];
}
- (minute_tj_dataBuilder*) builder {
  return [minute_tj_data builder];
}
- (minute_tj_dataBuilder*) toBuilder {
  return [minute_tj_data builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"time", [NSNumber numberWithInteger:self.time]];
  }
  if (self.hasTjValue) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tjValue", [NSNumber numberWithDouble:self.tjValue]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasTime) {
    [dictionary setObject: [NSNumber numberWithInteger:self.time] forKey: @"time"];
  }
  if (self.hasTjValue) {
    [dictionary setObject: [NSNumber numberWithDouble:self.tjValue] forKey: @"tjValue"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[minute_tj_data class]]) {
    return NO;
  }
  minute_tj_data *otherMessage = other;
  return
      self.hasTime == otherMessage.hasTime &&
      (!self.hasTime || self.time == otherMessage.time) &&
      self.hasTjValue == otherMessage.hasTjValue &&
      (!self.hasTjValue || self.tjValue == otherMessage.tjValue) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.time] hash];
  }
  if (self.hasTjValue) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.tjValue] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface minute_tj_dataBuilder()
@property (strong) minute_tj_data* resultMinuteTjData;
@end

@implementation minute_tj_dataBuilder
@synthesize resultMinuteTjData;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultMinuteTjData = [[minute_tj_data alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultMinuteTjData;
}
- (minute_tj_dataBuilder*) clear {
  self.resultMinuteTjData = [[minute_tj_data alloc] init];
  return self;
}
- (minute_tj_dataBuilder*) clone {
  return [minute_tj_data builderWithPrototype:resultMinuteTjData];
}
- (minute_tj_data*) defaultInstance {
  return [minute_tj_data defaultInstance];
}
- (minute_tj_data*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (minute_tj_data*) buildPartial {
  minute_tj_data* returnMe = resultMinuteTjData;
  self.resultMinuteTjData = nil;
  return returnMe;
}
- (minute_tj_dataBuilder*) mergeFrom:(minute_tj_data*) other {
  if (other == [minute_tj_data defaultInstance]) {
    return self;
  }
  if (other.hasTime) {
    [self setTime:other.time];
  }
  if (other.hasTjValue) {
    [self setTjValue:other.tjValue];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (minute_tj_dataBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (minute_tj_dataBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setTime:[input readUInt32]];
        break;
      }
      case 17: {
        [self setTjValue:[input readDouble]];
        break;
      }
    }
  }
}
- (BOOL) hasTime {
  return resultMinuteTjData.hasTime;
}
- (UInt32) time {
  return resultMinuteTjData.time;
}
- (minute_tj_dataBuilder*) setTime:(UInt32) value {
  resultMinuteTjData.hasTime = YES;
  resultMinuteTjData.time = value;
  return self;
}
- (minute_tj_dataBuilder*) clearTime {
  resultMinuteTjData.hasTime = NO;
  resultMinuteTjData.time = 0;
  return self;
}
- (BOOL) hasTjValue {
  return resultMinuteTjData.hasTjValue;
}
- (Float64) tjValue {
  return resultMinuteTjData.tjValue;
}
- (minute_tj_dataBuilder*) setTjValue:(Float64) value {
  resultMinuteTjData.hasTjValue = YES;
  resultMinuteTjData.tjValue = value;
  return self;
}
- (minute_tj_dataBuilder*) clearTjValue {
  resultMinuteTjData.hasTjValue = NO;
  resultMinuteTjData.tjValue = 0;
  return self;
}
@end

@interface minute_tj_data_array ()
@property (strong) NSMutableArray * indexDataArray;
@end

@implementation minute_tj_data_array

@synthesize indexDataArray;
@dynamic indexData;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static minute_tj_data_array* defaultminute_tj_data_arrayInstance = nil;
+ (void) initialize {
  if (self == [minute_tj_data_array class]) {
    defaultminute_tj_data_arrayInstance = [[minute_tj_data_array alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultminute_tj_data_arrayInstance;
}
- (instancetype) defaultInstance {
  return defaultminute_tj_data_arrayInstance;
}
- (NSArray *)indexData {
  return indexDataArray;
}
- (minute_tj_data*)indexDataAtIndex:(NSUInteger)index {
  return [indexDataArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  __block BOOL isInitindexData = YES;
   [self.indexData enumerateObjectsUsingBlock:^(minute_tj_data *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitindexData = NO;
      *stop = YES;
    }
  }];
  if (!isInitindexData) return isInitindexData;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.indexDataArray enumerateObjectsUsingBlock:^(minute_tj_data *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.indexDataArray enumerateObjectsUsingBlock:^(minute_tj_data *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (minute_tj_data_array*) parseFromData:(NSData*) data {
  return (minute_tj_data_array*)[[[minute_tj_data_array builder] mergeFromData:data] build];
}
+ (minute_tj_data_array*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (minute_tj_data_array*)[[[minute_tj_data_array builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (minute_tj_data_array*) parseFromInputStream:(NSInputStream*) input {
  return (minute_tj_data_array*)[[[minute_tj_data_array builder] mergeFromInputStream:input] build];
}
+ (minute_tj_data_array*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (minute_tj_data_array*)[[[minute_tj_data_array builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (minute_tj_data_array*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (minute_tj_data_array*)[[[minute_tj_data_array builder] mergeFromCodedInputStream:input] build];
}
+ (minute_tj_data_array*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (minute_tj_data_array*)[[[minute_tj_data_array builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (minute_tj_data_arrayBuilder*) builder {
  return [[minute_tj_data_arrayBuilder alloc] init];
}
+ (minute_tj_data_arrayBuilder*) builderWithPrototype:(minute_tj_data_array*) prototype {
  return [[minute_tj_data_array builder] mergeFrom:prototype];
}
- (minute_tj_data_arrayBuilder*) builder {
  return [minute_tj_data_array builder];
}
- (minute_tj_data_arrayBuilder*) toBuilder {
  return [minute_tj_data_array builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.indexDataArray enumerateObjectsUsingBlock:^(minute_tj_data *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"indexData"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  for (minute_tj_data* element in self.indexDataArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"indexData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[minute_tj_data_array class]]) {
    return NO;
  }
  minute_tj_data_array *otherMessage = other;
  return
      [self.indexDataArray isEqualToArray:otherMessage.indexDataArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.indexDataArray enumerateObjectsUsingBlock:^(minute_tj_data *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface minute_tj_data_arrayBuilder()
@property (strong) minute_tj_data_array* resultMinuteTjDataArray;
@end

@implementation minute_tj_data_arrayBuilder
@synthesize resultMinuteTjDataArray;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultMinuteTjDataArray = [[minute_tj_data_array alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultMinuteTjDataArray;
}
- (minute_tj_data_arrayBuilder*) clear {
  self.resultMinuteTjDataArray = [[minute_tj_data_array alloc] init];
  return self;
}
- (minute_tj_data_arrayBuilder*) clone {
  return [minute_tj_data_array builderWithPrototype:resultMinuteTjDataArray];
}
- (minute_tj_data_array*) defaultInstance {
  return [minute_tj_data_array defaultInstance];
}
- (minute_tj_data_array*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (minute_tj_data_array*) buildPartial {
  minute_tj_data_array* returnMe = resultMinuteTjDataArray;
  self.resultMinuteTjDataArray = nil;
  return returnMe;
}
- (minute_tj_data_arrayBuilder*) mergeFrom:(minute_tj_data_array*) other {
  if (other == [minute_tj_data_array defaultInstance]) {
    return self;
  }
  if (other.indexDataArray.count > 0) {
    if (resultMinuteTjDataArray.indexDataArray == nil) {
      resultMinuteTjDataArray.indexDataArray = [[NSMutableArray alloc] initWithArray:other.indexDataArray];
    } else {
      [resultMinuteTjDataArray.indexDataArray addObjectsFromArray:other.indexDataArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (minute_tj_data_arrayBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (minute_tj_data_arrayBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        minute_tj_dataBuilder* subBuilder = [minute_tj_data builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addIndexData:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)indexData {
  return resultMinuteTjDataArray.indexDataArray;
}
- (minute_tj_data*)indexDataAtIndex:(NSUInteger)index {
  return [resultMinuteTjDataArray indexDataAtIndex:index];
}
- (minute_tj_data_arrayBuilder *)addIndexData:(minute_tj_data*)value {
  if (resultMinuteTjDataArray.indexDataArray == nil) {
    resultMinuteTjDataArray.indexDataArray = [[NSMutableArray alloc]init];
  }
  [resultMinuteTjDataArray.indexDataArray addObject:value];
  return self;
}
- (minute_tj_data_arrayBuilder *)setIndexDataArray:(NSArray *)array {
  resultMinuteTjDataArray.indexDataArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (minute_tj_data_arrayBuilder *)clearIndexData {
  resultMinuteTjDataArray.indexDataArray = nil;
  return self;
}
@end

@interface tj_draw_value ()
@property Float64 p1;
@property Float64 p2;
@property BOOL empty;
@property UInt32 diff;
@end

@implementation tj_draw_value

- (BOOL) hasP1 {
  return !!hasP1_;
}
- (void) setHasP1:(BOOL) _value_ {
  hasP1_ = !!_value_;
}
@synthesize p1;
- (BOOL) hasP2 {
  return !!hasP2_;
}
- (void) setHasP2:(BOOL) _value_ {
  hasP2_ = !!_value_;
}
@synthesize p2;
- (BOOL) hasEmpty {
  return !!hasEmpty_;
}
- (void) setHasEmpty:(BOOL) _value_ {
  hasEmpty_ = !!_value_;
}
- (BOOL) empty {
  return !!empty_;
}
- (void) setEmpty:(BOOL) _value_ {
  empty_ = !!_value_;
}
- (BOOL) hasDiff {
  return !!hasDiff_;
}
- (void) setHasDiff:(BOOL) _value_ {
  hasDiff_ = !!_value_;
}
@synthesize diff;
- (instancetype) init {
  if ((self = [super init])) {
    self.p1 = 0;
    self.p2 = 0;
    self.empty = NO;
    self.diff = 0;
  }
  return self;
}
static tj_draw_value* defaulttj_draw_valueInstance = nil;
+ (void) initialize {
  if (self == [tj_draw_value class]) {
    defaulttj_draw_valueInstance = [[tj_draw_value alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaulttj_draw_valueInstance;
}
- (instancetype) defaultInstance {
  return defaulttj_draw_valueInstance;
}
- (BOOL) isInitialized {
  if (!self.hasP1) {
    return NO;
  }
  if (!self.hasP2) {
    return NO;
  }
  if (!self.hasEmpty) {
    return NO;
  }
  if (!self.hasDiff) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasP1) {
    [output writeDouble:1 value:self.p1];
  }
  if (self.hasP2) {
    [output writeDouble:2 value:self.p2];
  }
  if (self.hasEmpty) {
    [output writeBool:3 value:self.empty];
  }
  if (self.hasDiff) {
    [output writeUInt32:4 value:self.diff];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasP1) {
    size_ += computeDoubleSize(1, self.p1);
  }
  if (self.hasP2) {
    size_ += computeDoubleSize(2, self.p2);
  }
  if (self.hasEmpty) {
    size_ += computeBoolSize(3, self.empty);
  }
  if (self.hasDiff) {
    size_ += computeUInt32Size(4, self.diff);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (tj_draw_value*) parseFromData:(NSData*) data {
  return (tj_draw_value*)[[[tj_draw_value builder] mergeFromData:data] build];
}
+ (tj_draw_value*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (tj_draw_value*)[[[tj_draw_value builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (tj_draw_value*) parseFromInputStream:(NSInputStream*) input {
  return (tj_draw_value*)[[[tj_draw_value builder] mergeFromInputStream:input] build];
}
+ (tj_draw_value*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (tj_draw_value*)[[[tj_draw_value builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (tj_draw_value*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (tj_draw_value*)[[[tj_draw_value builder] mergeFromCodedInputStream:input] build];
}
+ (tj_draw_value*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (tj_draw_value*)[[[tj_draw_value builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (tj_draw_valueBuilder*) builder {
  return [[tj_draw_valueBuilder alloc] init];
}
+ (tj_draw_valueBuilder*) builderWithPrototype:(tj_draw_value*) prototype {
  return [[tj_draw_value builder] mergeFrom:prototype];
}
- (tj_draw_valueBuilder*) builder {
  return [tj_draw_value builder];
}
- (tj_draw_valueBuilder*) toBuilder {
  return [tj_draw_value builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasP1) {
    [output appendFormat:@"%@%@: %@\n", indent, @"p1", [NSNumber numberWithDouble:self.p1]];
  }
  if (self.hasP2) {
    [output appendFormat:@"%@%@: %@\n", indent, @"p2", [NSNumber numberWithDouble:self.p2]];
  }
  if (self.hasEmpty) {
    [output appendFormat:@"%@%@: %@\n", indent, @"empty", [NSNumber numberWithBool:self.empty]];
  }
  if (self.hasDiff) {
    [output appendFormat:@"%@%@: %@\n", indent, @"diff", [NSNumber numberWithInteger:self.diff]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasP1) {
    [dictionary setObject: [NSNumber numberWithDouble:self.p1] forKey: @"p1"];
  }
  if (self.hasP2) {
    [dictionary setObject: [NSNumber numberWithDouble:self.p2] forKey: @"p2"];
  }
  if (self.hasEmpty) {
    [dictionary setObject: [NSNumber numberWithBool:self.empty] forKey: @"empty"];
  }
  if (self.hasDiff) {
    [dictionary setObject: [NSNumber numberWithInteger:self.diff] forKey: @"diff"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[tj_draw_value class]]) {
    return NO;
  }
  tj_draw_value *otherMessage = other;
  return
      self.hasP1 == otherMessage.hasP1 &&
      (!self.hasP1 || self.p1 == otherMessage.p1) &&
      self.hasP2 == otherMessage.hasP2 &&
      (!self.hasP2 || self.p2 == otherMessage.p2) &&
      self.hasEmpty == otherMessage.hasEmpty &&
      (!self.hasEmpty || self.empty == otherMessage.empty) &&
      self.hasDiff == otherMessage.hasDiff &&
      (!self.hasDiff || self.diff == otherMessage.diff) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasP1) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.p1] hash];
  }
  if (self.hasP2) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.p2] hash];
  }
  if (self.hasEmpty) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.empty] hash];
  }
  if (self.hasDiff) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.diff] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface tj_draw_valueBuilder()
@property (strong) tj_draw_value* resultTjDrawValue;
@end

@implementation tj_draw_valueBuilder
@synthesize resultTjDrawValue;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultTjDrawValue = [[tj_draw_value alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultTjDrawValue;
}
- (tj_draw_valueBuilder*) clear {
  self.resultTjDrawValue = [[tj_draw_value alloc] init];
  return self;
}
- (tj_draw_valueBuilder*) clone {
  return [tj_draw_value builderWithPrototype:resultTjDrawValue];
}
- (tj_draw_value*) defaultInstance {
  return [tj_draw_value defaultInstance];
}
- (tj_draw_value*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (tj_draw_value*) buildPartial {
  tj_draw_value* returnMe = resultTjDrawValue;
  self.resultTjDrawValue = nil;
  return returnMe;
}
- (tj_draw_valueBuilder*) mergeFrom:(tj_draw_value*) other {
  if (other == [tj_draw_value defaultInstance]) {
    return self;
  }
  if (other.hasP1) {
    [self setP1:other.p1];
  }
  if (other.hasP2) {
    [self setP2:other.p2];
  }
  if (other.hasEmpty) {
    [self setEmpty:other.empty];
  }
  if (other.hasDiff) {
    [self setDiff:other.diff];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (tj_draw_valueBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (tj_draw_valueBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 9: {
        [self setP1:[input readDouble]];
        break;
      }
      case 17: {
        [self setP2:[input readDouble]];
        break;
      }
      case 24: {
        [self setEmpty:[input readBool]];
        break;
      }
      case 32: {
        [self setDiff:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasP1 {
  return resultTjDrawValue.hasP1;
}
- (Float64) p1 {
  return resultTjDrawValue.p1;
}
- (tj_draw_valueBuilder*) setP1:(Float64) value {
  resultTjDrawValue.hasP1 = YES;
  resultTjDrawValue.p1 = value;
  return self;
}
- (tj_draw_valueBuilder*) clearP1 {
  resultTjDrawValue.hasP1 = NO;
  resultTjDrawValue.p1 = 0;
  return self;
}
- (BOOL) hasP2 {
  return resultTjDrawValue.hasP2;
}
- (Float64) p2 {
  return resultTjDrawValue.p2;
}
- (tj_draw_valueBuilder*) setP2:(Float64) value {
  resultTjDrawValue.hasP2 = YES;
  resultTjDrawValue.p2 = value;
  return self;
}
- (tj_draw_valueBuilder*) clearP2 {
  resultTjDrawValue.hasP2 = NO;
  resultTjDrawValue.p2 = 0;
  return self;
}
- (BOOL) hasEmpty {
  return resultTjDrawValue.hasEmpty;
}
- (BOOL) empty {
  return resultTjDrawValue.empty;
}
- (tj_draw_valueBuilder*) setEmpty:(BOOL) value {
  resultTjDrawValue.hasEmpty = YES;
  resultTjDrawValue.empty = value;
  return self;
}
- (tj_draw_valueBuilder*) clearEmpty {
  resultTjDrawValue.hasEmpty = NO;
  resultTjDrawValue.empty = NO;
  return self;
}
- (BOOL) hasDiff {
  return resultTjDrawValue.hasDiff;
}
- (UInt32) diff {
  return resultTjDrawValue.diff;
}
- (tj_draw_valueBuilder*) setDiff:(UInt32) value {
  resultTjDrawValue.hasDiff = YES;
  resultTjDrawValue.diff = value;
  return self;
}
- (tj_draw_valueBuilder*) clearDiff {
  resultTjDrawValue.hasDiff = NO;
  resultTjDrawValue.diff = 0;
  return self;
}
@end

@interface kline_tj_data ()
@property UInt32 time;
@property Float64 buy;
@property Float64 sel;
@property Float64 jme;
@property Float64 jb;
@property (strong) NSMutableArray * drawValueArray;
@property Float64 tjValue;
@end

@implementation kline_tj_data

- (BOOL) hasTime {
  return !!hasTime_;
}
- (void) setHasTime:(BOOL) _value_ {
  hasTime_ = !!_value_;
}
@synthesize time;
- (BOOL) hasBuy {
  return !!hasBuy_;
}
- (void) setHasBuy:(BOOL) _value_ {
  hasBuy_ = !!_value_;
}
@synthesize buy;
- (BOOL) hasSel {
  return !!hasSel_;
}
- (void) setHasSel:(BOOL) _value_ {
  hasSel_ = !!_value_;
}
@synthesize sel;
- (BOOL) hasJme {
  return !!hasJme_;
}
- (void) setHasJme:(BOOL) _value_ {
  hasJme_ = !!_value_;
}
@synthesize jme;
- (BOOL) hasJb {
  return !!hasJb_;
}
- (void) setHasJb:(BOOL) _value_ {
  hasJb_ = !!_value_;
}
@synthesize jb;
@synthesize drawValueArray;
@dynamic drawValue;
- (BOOL) hasTjValue {
  return !!hasTjValue_;
}
- (void) setHasTjValue:(BOOL) _value_ {
  hasTjValue_ = !!_value_;
}
@synthesize tjValue;
- (instancetype) init {
  if ((self = [super init])) {
    self.time = 0;
    self.buy = 0;
    self.sel = 0;
    self.jme = 0;
    self.jb = 0;
    self.tjValue = 0;
  }
  return self;
}
static kline_tj_data* defaultkline_tj_dataInstance = nil;
+ (void) initialize {
  if (self == [kline_tj_data class]) {
    defaultkline_tj_dataInstance = [[kline_tj_data alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultkline_tj_dataInstance;
}
- (instancetype) defaultInstance {
  return defaultkline_tj_dataInstance;
}
- (NSArray *)drawValue {
  return drawValueArray;
}
- (tj_draw_value*)drawValueAtIndex:(NSUInteger)index {
  return [drawValueArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasTime) {
    return NO;
  }
  if (!self.hasBuy) {
    return NO;
  }
  if (!self.hasSel) {
    return NO;
  }
  if (!self.hasJme) {
    return NO;
  }
  if (!self.hasJb) {
    return NO;
  }
  if (!self.hasTjValue) {
    return NO;
  }
  __block BOOL isInitdrawValue = YES;
   [self.drawValue enumerateObjectsUsingBlock:^(tj_draw_value *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitdrawValue = NO;
      *stop = YES;
    }
  }];
  if (!isInitdrawValue) return isInitdrawValue;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTime) {
    [output writeUInt32:1 value:self.time];
  }
  if (self.hasBuy) {
    [output writeDouble:2 value:self.buy];
  }
  if (self.hasSel) {
    [output writeDouble:3 value:self.sel];
  }
  if (self.hasJme) {
    [output writeDouble:4 value:self.jme];
  }
  if (self.hasJb) {
    [output writeDouble:5 value:self.jb];
  }
  [self.drawValueArray enumerateObjectsUsingBlock:^(tj_draw_value *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:6 value:element];
  }];
  if (self.hasTjValue) {
    [output writeDouble:7 value:self.tjValue];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasTime) {
    size_ += computeUInt32Size(1, self.time);
  }
  if (self.hasBuy) {
    size_ += computeDoubleSize(2, self.buy);
  }
  if (self.hasSel) {
    size_ += computeDoubleSize(3, self.sel);
  }
  if (self.hasJme) {
    size_ += computeDoubleSize(4, self.jme);
  }
  if (self.hasJb) {
    size_ += computeDoubleSize(5, self.jb);
  }
  [self.drawValueArray enumerateObjectsUsingBlock:^(tj_draw_value *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(6, element);
  }];
  if (self.hasTjValue) {
    size_ += computeDoubleSize(7, self.tjValue);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (kline_tj_data*) parseFromData:(NSData*) data {
  return (kline_tj_data*)[[[kline_tj_data builder] mergeFromData:data] build];
}
+ (kline_tj_data*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (kline_tj_data*)[[[kline_tj_data builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (kline_tj_data*) parseFromInputStream:(NSInputStream*) input {
  return (kline_tj_data*)[[[kline_tj_data builder] mergeFromInputStream:input] build];
}
+ (kline_tj_data*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (kline_tj_data*)[[[kline_tj_data builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (kline_tj_data*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (kline_tj_data*)[[[kline_tj_data builder] mergeFromCodedInputStream:input] build];
}
+ (kline_tj_data*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (kline_tj_data*)[[[kline_tj_data builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (kline_tj_dataBuilder*) builder {
  return [[kline_tj_dataBuilder alloc] init];
}
+ (kline_tj_dataBuilder*) builderWithPrototype:(kline_tj_data*) prototype {
  return [[kline_tj_data builder] mergeFrom:prototype];
}
- (kline_tj_dataBuilder*) builder {
  return [kline_tj_data builder];
}
- (kline_tj_dataBuilder*) toBuilder {
  return [kline_tj_data builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"time", [NSNumber numberWithInteger:self.time]];
  }
  if (self.hasBuy) {
    [output appendFormat:@"%@%@: %@\n", indent, @"buy", [NSNumber numberWithDouble:self.buy]];
  }
  if (self.hasSel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sel", [NSNumber numberWithDouble:self.sel]];
  }
  if (self.hasJme) {
    [output appendFormat:@"%@%@: %@\n", indent, @"jme", [NSNumber numberWithDouble:self.jme]];
  }
  if (self.hasJb) {
    [output appendFormat:@"%@%@: %@\n", indent, @"jb", [NSNumber numberWithDouble:self.jb]];
  }
  [self.drawValueArray enumerateObjectsUsingBlock:^(tj_draw_value *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"drawValue"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasTjValue) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tjValue", [NSNumber numberWithDouble:self.tjValue]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasTime) {
    [dictionary setObject: [NSNumber numberWithInteger:self.time] forKey: @"time"];
  }
  if (self.hasBuy) {
    [dictionary setObject: [NSNumber numberWithDouble:self.buy] forKey: @"buy"];
  }
  if (self.hasSel) {
    [dictionary setObject: [NSNumber numberWithDouble:self.sel] forKey: @"sel"];
  }
  if (self.hasJme) {
    [dictionary setObject: [NSNumber numberWithDouble:self.jme] forKey: @"jme"];
  }
  if (self.hasJb) {
    [dictionary setObject: [NSNumber numberWithDouble:self.jb] forKey: @"jb"];
  }
  for (tj_draw_value* element in self.drawValueArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"drawValue"];
  }
  if (self.hasTjValue) {
    [dictionary setObject: [NSNumber numberWithDouble:self.tjValue] forKey: @"tjValue"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[kline_tj_data class]]) {
    return NO;
  }
  kline_tj_data *otherMessage = other;
  return
      self.hasTime == otherMessage.hasTime &&
      (!self.hasTime || self.time == otherMessage.time) &&
      self.hasBuy == otherMessage.hasBuy &&
      (!self.hasBuy || self.buy == otherMessage.buy) &&
      self.hasSel == otherMessage.hasSel &&
      (!self.hasSel || self.sel == otherMessage.sel) &&
      self.hasJme == otherMessage.hasJme &&
      (!self.hasJme || self.jme == otherMessage.jme) &&
      self.hasJb == otherMessage.hasJb &&
      (!self.hasJb || self.jb == otherMessage.jb) &&
      [self.drawValueArray isEqualToArray:otherMessage.drawValueArray] &&
      self.hasTjValue == otherMessage.hasTjValue &&
      (!self.hasTjValue || self.tjValue == otherMessage.tjValue) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.time] hash];
  }
  if (self.hasBuy) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.buy] hash];
  }
  if (self.hasSel) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.sel] hash];
  }
  if (self.hasJme) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.jme] hash];
  }
  if (self.hasJb) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.jb] hash];
  }
  [self.drawValueArray enumerateObjectsUsingBlock:^(tj_draw_value *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasTjValue) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.tjValue] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface kline_tj_dataBuilder()
@property (strong) kline_tj_data* resultKlineTjData;
@end

@implementation kline_tj_dataBuilder
@synthesize resultKlineTjData;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultKlineTjData = [[kline_tj_data alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultKlineTjData;
}
- (kline_tj_dataBuilder*) clear {
  self.resultKlineTjData = [[kline_tj_data alloc] init];
  return self;
}
- (kline_tj_dataBuilder*) clone {
  return [kline_tj_data builderWithPrototype:resultKlineTjData];
}
- (kline_tj_data*) defaultInstance {
  return [kline_tj_data defaultInstance];
}
- (kline_tj_data*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (kline_tj_data*) buildPartial {
  kline_tj_data* returnMe = resultKlineTjData;
  self.resultKlineTjData = nil;
  return returnMe;
}
- (kline_tj_dataBuilder*) mergeFrom:(kline_tj_data*) other {
  if (other == [kline_tj_data defaultInstance]) {
    return self;
  }
  if (other.hasTime) {
    [self setTime:other.time];
  }
  if (other.hasBuy) {
    [self setBuy:other.buy];
  }
  if (other.hasSel) {
    [self setSel:other.sel];
  }
  if (other.hasJme) {
    [self setJme:other.jme];
  }
  if (other.hasJb) {
    [self setJb:other.jb];
  }
  if (other.drawValueArray.count > 0) {
    if (resultKlineTjData.drawValueArray == nil) {
      resultKlineTjData.drawValueArray = [[NSMutableArray alloc] initWithArray:other.drawValueArray];
    } else {
      [resultKlineTjData.drawValueArray addObjectsFromArray:other.drawValueArray];
    }
  }
  if (other.hasTjValue) {
    [self setTjValue:other.tjValue];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (kline_tj_dataBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (kline_tj_dataBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setTime:[input readUInt32]];
        break;
      }
      case 17: {
        [self setBuy:[input readDouble]];
        break;
      }
      case 25: {
        [self setSel:[input readDouble]];
        break;
      }
      case 33: {
        [self setJme:[input readDouble]];
        break;
      }
      case 41: {
        [self setJb:[input readDouble]];
        break;
      }
      case 50: {
        tj_draw_valueBuilder* subBuilder = [tj_draw_value builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addDrawValue:[subBuilder buildPartial]];
        break;
      }
      case 57: {
        [self setTjValue:[input readDouble]];
        break;
      }
    }
  }
}
- (BOOL) hasTime {
  return resultKlineTjData.hasTime;
}
- (UInt32) time {
  return resultKlineTjData.time;
}
- (kline_tj_dataBuilder*) setTime:(UInt32) value {
  resultKlineTjData.hasTime = YES;
  resultKlineTjData.time = value;
  return self;
}
- (kline_tj_dataBuilder*) clearTime {
  resultKlineTjData.hasTime = NO;
  resultKlineTjData.time = 0;
  return self;
}
- (BOOL) hasBuy {
  return resultKlineTjData.hasBuy;
}
- (Float64) buy {
  return resultKlineTjData.buy;
}
- (kline_tj_dataBuilder*) setBuy:(Float64) value {
  resultKlineTjData.hasBuy = YES;
  resultKlineTjData.buy = value;
  return self;
}
- (kline_tj_dataBuilder*) clearBuy {
  resultKlineTjData.hasBuy = NO;
  resultKlineTjData.buy = 0;
  return self;
}
- (BOOL) hasSel {
  return resultKlineTjData.hasSel;
}
- (Float64) sel {
  return resultKlineTjData.sel;
}
- (kline_tj_dataBuilder*) setSel:(Float64) value {
  resultKlineTjData.hasSel = YES;
  resultKlineTjData.sel = value;
  return self;
}
- (kline_tj_dataBuilder*) clearSel {
  resultKlineTjData.hasSel = NO;
  resultKlineTjData.sel = 0;
  return self;
}
- (BOOL) hasJme {
  return resultKlineTjData.hasJme;
}
- (Float64) jme {
  return resultKlineTjData.jme;
}
- (kline_tj_dataBuilder*) setJme:(Float64) value {
  resultKlineTjData.hasJme = YES;
  resultKlineTjData.jme = value;
  return self;
}
- (kline_tj_dataBuilder*) clearJme {
  resultKlineTjData.hasJme = NO;
  resultKlineTjData.jme = 0;
  return self;
}
- (BOOL) hasJb {
  return resultKlineTjData.hasJb;
}
- (Float64) jb {
  return resultKlineTjData.jb;
}
- (kline_tj_dataBuilder*) setJb:(Float64) value {
  resultKlineTjData.hasJb = YES;
  resultKlineTjData.jb = value;
  return self;
}
- (kline_tj_dataBuilder*) clearJb {
  resultKlineTjData.hasJb = NO;
  resultKlineTjData.jb = 0;
  return self;
}
- (NSMutableArray *)drawValue {
  return resultKlineTjData.drawValueArray;
}
- (tj_draw_value*)drawValueAtIndex:(NSUInteger)index {
  return [resultKlineTjData drawValueAtIndex:index];
}
- (kline_tj_dataBuilder *)addDrawValue:(tj_draw_value*)value {
  if (resultKlineTjData.drawValueArray == nil) {
    resultKlineTjData.drawValueArray = [[NSMutableArray alloc]init];
  }
  [resultKlineTjData.drawValueArray addObject:value];
  return self;
}
- (kline_tj_dataBuilder *)setDrawValueArray:(NSArray *)array {
  resultKlineTjData.drawValueArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (kline_tj_dataBuilder *)clearDrawValue {
  resultKlineTjData.drawValueArray = nil;
  return self;
}
- (BOOL) hasTjValue {
  return resultKlineTjData.hasTjValue;
}
- (Float64) tjValue {
  return resultKlineTjData.tjValue;
}
- (kline_tj_dataBuilder*) setTjValue:(Float64) value {
  resultKlineTjData.hasTjValue = YES;
  resultKlineTjData.tjValue = value;
  return self;
}
- (kline_tj_dataBuilder*) clearTjValue {
  resultKlineTjData.hasTjValue = NO;
  resultKlineTjData.tjValue = 0;
  return self;
}
@end

@interface kline_tj_data_array ()
@property (strong) NSMutableArray * indexDataArray;
@end

@implementation kline_tj_data_array

@synthesize indexDataArray;
@dynamic indexData;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static kline_tj_data_array* defaultkline_tj_data_arrayInstance = nil;
+ (void) initialize {
  if (self == [kline_tj_data_array class]) {
    defaultkline_tj_data_arrayInstance = [[kline_tj_data_array alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultkline_tj_data_arrayInstance;
}
- (instancetype) defaultInstance {
  return defaultkline_tj_data_arrayInstance;
}
- (NSArray *)indexData {
  return indexDataArray;
}
- (kline_tj_data*)indexDataAtIndex:(NSUInteger)index {
  return [indexDataArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  __block BOOL isInitindexData = YES;
   [self.indexData enumerateObjectsUsingBlock:^(kline_tj_data *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitindexData = NO;
      *stop = YES;
    }
  }];
  if (!isInitindexData) return isInitindexData;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.indexDataArray enumerateObjectsUsingBlock:^(kline_tj_data *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.indexDataArray enumerateObjectsUsingBlock:^(kline_tj_data *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (kline_tj_data_array*) parseFromData:(NSData*) data {
  return (kline_tj_data_array*)[[[kline_tj_data_array builder] mergeFromData:data] build];
}
+ (kline_tj_data_array*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (kline_tj_data_array*)[[[kline_tj_data_array builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (kline_tj_data_array*) parseFromInputStream:(NSInputStream*) input {
  return (kline_tj_data_array*)[[[kline_tj_data_array builder] mergeFromInputStream:input] build];
}
+ (kline_tj_data_array*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (kline_tj_data_array*)[[[kline_tj_data_array builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (kline_tj_data_array*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (kline_tj_data_array*)[[[kline_tj_data_array builder] mergeFromCodedInputStream:input] build];
}
+ (kline_tj_data_array*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (kline_tj_data_array*)[[[kline_tj_data_array builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (kline_tj_data_arrayBuilder*) builder {
  return [[kline_tj_data_arrayBuilder alloc] init];
}
+ (kline_tj_data_arrayBuilder*) builderWithPrototype:(kline_tj_data_array*) prototype {
  return [[kline_tj_data_array builder] mergeFrom:prototype];
}
- (kline_tj_data_arrayBuilder*) builder {
  return [kline_tj_data_array builder];
}
- (kline_tj_data_arrayBuilder*) toBuilder {
  return [kline_tj_data_array builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.indexDataArray enumerateObjectsUsingBlock:^(kline_tj_data *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"indexData"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  for (kline_tj_data* element in self.indexDataArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"indexData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[kline_tj_data_array class]]) {
    return NO;
  }
  kline_tj_data_array *otherMessage = other;
  return
      [self.indexDataArray isEqualToArray:otherMessage.indexDataArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.indexDataArray enumerateObjectsUsingBlock:^(kline_tj_data *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface kline_tj_data_arrayBuilder()
@property (strong) kline_tj_data_array* resultKlineTjDataArray;
@end

@implementation kline_tj_data_arrayBuilder
@synthesize resultKlineTjDataArray;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultKlineTjDataArray = [[kline_tj_data_array alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultKlineTjDataArray;
}
- (kline_tj_data_arrayBuilder*) clear {
  self.resultKlineTjDataArray = [[kline_tj_data_array alloc] init];
  return self;
}
- (kline_tj_data_arrayBuilder*) clone {
  return [kline_tj_data_array builderWithPrototype:resultKlineTjDataArray];
}
- (kline_tj_data_array*) defaultInstance {
  return [kline_tj_data_array defaultInstance];
}
- (kline_tj_data_array*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (kline_tj_data_array*) buildPartial {
  kline_tj_data_array* returnMe = resultKlineTjDataArray;
  self.resultKlineTjDataArray = nil;
  return returnMe;
}
- (kline_tj_data_arrayBuilder*) mergeFrom:(kline_tj_data_array*) other {
  if (other == [kline_tj_data_array defaultInstance]) {
    return self;
  }
  if (other.indexDataArray.count > 0) {
    if (resultKlineTjDataArray.indexDataArray == nil) {
      resultKlineTjDataArray.indexDataArray = [[NSMutableArray alloc] initWithArray:other.indexDataArray];
    } else {
      [resultKlineTjDataArray.indexDataArray addObjectsFromArray:other.indexDataArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (kline_tj_data_arrayBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (kline_tj_data_arrayBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        kline_tj_dataBuilder* subBuilder = [kline_tj_data builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addIndexData:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)indexData {
  return resultKlineTjDataArray.indexDataArray;
}
- (kline_tj_data*)indexDataAtIndex:(NSUInteger)index {
  return [resultKlineTjDataArray indexDataAtIndex:index];
}
- (kline_tj_data_arrayBuilder *)addIndexData:(kline_tj_data*)value {
  if (resultKlineTjDataArray.indexDataArray == nil) {
    resultKlineTjDataArray.indexDataArray = [[NSMutableArray alloc]init];
  }
  [resultKlineTjDataArray.indexDataArray addObject:value];
  return self;
}
- (kline_tj_data_arrayBuilder *)setIndexDataArray:(NSArray *)array {
  resultKlineTjDataArray.indexDataArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (kline_tj_data_arrayBuilder *)clearIndexData {
  resultKlineTjDataArray.indexDataArray = nil;
  return self;
}
@end

@interface sstp ()
@property UInt32 time;
@property Float64 shang;
@property Float64 ciShang;
@property Float64 ciXia;
@property Float64 xia;
@end

@implementation sstp

- (BOOL) hasTime {
  return !!hasTime_;
}
- (void) setHasTime:(BOOL) _value_ {
  hasTime_ = !!_value_;
}
@synthesize time;
- (BOOL) hasShang {
  return !!hasShang_;
}
- (void) setHasShang:(BOOL) _value_ {
  hasShang_ = !!_value_;
}
@synthesize shang;
- (BOOL) hasCiShang {
  return !!hasCiShang_;
}
- (void) setHasCiShang:(BOOL) _value_ {
  hasCiShang_ = !!_value_;
}
@synthesize ciShang;
- (BOOL) hasCiXia {
  return !!hasCiXia_;
}
- (void) setHasCiXia:(BOOL) _value_ {
  hasCiXia_ = !!_value_;
}
@synthesize ciXia;
- (BOOL) hasXia {
  return !!hasXia_;
}
- (void) setHasXia:(BOOL) _value_ {
  hasXia_ = !!_value_;
}
@synthesize xia;
- (instancetype) init {
  if ((self = [super init])) {
    self.time = 0;
    self.shang = 0;
    self.ciShang = 0;
    self.ciXia = 0;
    self.xia = 0;
  }
  return self;
}
static sstp* defaultsstpInstance = nil;
+ (void) initialize {
  if (self == [sstp class]) {
    defaultsstpInstance = [[sstp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultsstpInstance;
}
- (instancetype) defaultInstance {
  return defaultsstpInstance;
}
- (BOOL) isInitialized {
  if (!self.hasTime) {
    return NO;
  }
  if (!self.hasShang) {
    return NO;
  }
  if (!self.hasCiShang) {
    return NO;
  }
  if (!self.hasCiXia) {
    return NO;
  }
  if (!self.hasXia) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTime) {
    [output writeUInt32:1 value:self.time];
  }
  if (self.hasShang) {
    [output writeDouble:2 value:self.shang];
  }
  if (self.hasCiShang) {
    [output writeDouble:3 value:self.ciShang];
  }
  if (self.hasCiXia) {
    [output writeDouble:4 value:self.ciXia];
  }
  if (self.hasXia) {
    [output writeDouble:5 value:self.xia];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasTime) {
    size_ += computeUInt32Size(1, self.time);
  }
  if (self.hasShang) {
    size_ += computeDoubleSize(2, self.shang);
  }
  if (self.hasCiShang) {
    size_ += computeDoubleSize(3, self.ciShang);
  }
  if (self.hasCiXia) {
    size_ += computeDoubleSize(4, self.ciXia);
  }
  if (self.hasXia) {
    size_ += computeDoubleSize(5, self.xia);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (sstp*) parseFromData:(NSData*) data {
  return (sstp*)[[[sstp builder] mergeFromData:data] build];
}
+ (sstp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (sstp*)[[[sstp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (sstp*) parseFromInputStream:(NSInputStream*) input {
  return (sstp*)[[[sstp builder] mergeFromInputStream:input] build];
}
+ (sstp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (sstp*)[[[sstp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (sstp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (sstp*)[[[sstp builder] mergeFromCodedInputStream:input] build];
}
+ (sstp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (sstp*)[[[sstp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (sstpBuilder*) builder {
  return [[sstpBuilder alloc] init];
}
+ (sstpBuilder*) builderWithPrototype:(sstp*) prototype {
  return [[sstp builder] mergeFrom:prototype];
}
- (sstpBuilder*) builder {
  return [sstp builder];
}
- (sstpBuilder*) toBuilder {
  return [sstp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"time", [NSNumber numberWithInteger:self.time]];
  }
  if (self.hasShang) {
    [output appendFormat:@"%@%@: %@\n", indent, @"shang", [NSNumber numberWithDouble:self.shang]];
  }
  if (self.hasCiShang) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ciShang", [NSNumber numberWithDouble:self.ciShang]];
  }
  if (self.hasCiXia) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ciXia", [NSNumber numberWithDouble:self.ciXia]];
  }
  if (self.hasXia) {
    [output appendFormat:@"%@%@: %@\n", indent, @"xia", [NSNumber numberWithDouble:self.xia]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasTime) {
    [dictionary setObject: [NSNumber numberWithInteger:self.time] forKey: @"time"];
  }
  if (self.hasShang) {
    [dictionary setObject: [NSNumber numberWithDouble:self.shang] forKey: @"shang"];
  }
  if (self.hasCiShang) {
    [dictionary setObject: [NSNumber numberWithDouble:self.ciShang] forKey: @"ciShang"];
  }
  if (self.hasCiXia) {
    [dictionary setObject: [NSNumber numberWithDouble:self.ciXia] forKey: @"ciXia"];
  }
  if (self.hasXia) {
    [dictionary setObject: [NSNumber numberWithDouble:self.xia] forKey: @"xia"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[sstp class]]) {
    return NO;
  }
  sstp *otherMessage = other;
  return
      self.hasTime == otherMessage.hasTime &&
      (!self.hasTime || self.time == otherMessage.time) &&
      self.hasShang == otherMessage.hasShang &&
      (!self.hasShang || self.shang == otherMessage.shang) &&
      self.hasCiShang == otherMessage.hasCiShang &&
      (!self.hasCiShang || self.ciShang == otherMessage.ciShang) &&
      self.hasCiXia == otherMessage.hasCiXia &&
      (!self.hasCiXia || self.ciXia == otherMessage.ciXia) &&
      self.hasXia == otherMessage.hasXia &&
      (!self.hasXia || self.xia == otherMessage.xia) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.time] hash];
  }
  if (self.hasShang) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.shang] hash];
  }
  if (self.hasCiShang) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.ciShang] hash];
  }
  if (self.hasCiXia) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.ciXia] hash];
  }
  if (self.hasXia) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.xia] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface sstpBuilder()
@property (strong) sstp* resultSstp;
@end

@implementation sstpBuilder
@synthesize resultSstp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultSstp = [[sstp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultSstp;
}
- (sstpBuilder*) clear {
  self.resultSstp = [[sstp alloc] init];
  return self;
}
- (sstpBuilder*) clone {
  return [sstp builderWithPrototype:resultSstp];
}
- (sstp*) defaultInstance {
  return [sstp defaultInstance];
}
- (sstp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (sstp*) buildPartial {
  sstp* returnMe = resultSstp;
  self.resultSstp = nil;
  return returnMe;
}
- (sstpBuilder*) mergeFrom:(sstp*) other {
  if (other == [sstp defaultInstance]) {
    return self;
  }
  if (other.hasTime) {
    [self setTime:other.time];
  }
  if (other.hasShang) {
    [self setShang:other.shang];
  }
  if (other.hasCiShang) {
    [self setCiShang:other.ciShang];
  }
  if (other.hasCiXia) {
    [self setCiXia:other.ciXia];
  }
  if (other.hasXia) {
    [self setXia:other.xia];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (sstpBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (sstpBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setTime:[input readUInt32]];
        break;
      }
      case 17: {
        [self setShang:[input readDouble]];
        break;
      }
      case 25: {
        [self setCiShang:[input readDouble]];
        break;
      }
      case 33: {
        [self setCiXia:[input readDouble]];
        break;
      }
      case 41: {
        [self setXia:[input readDouble]];
        break;
      }
    }
  }
}
- (BOOL) hasTime {
  return resultSstp.hasTime;
}
- (UInt32) time {
  return resultSstp.time;
}
- (sstpBuilder*) setTime:(UInt32) value {
  resultSstp.hasTime = YES;
  resultSstp.time = value;
  return self;
}
- (sstpBuilder*) clearTime {
  resultSstp.hasTime = NO;
  resultSstp.time = 0;
  return self;
}
- (BOOL) hasShang {
  return resultSstp.hasShang;
}
- (Float64) shang {
  return resultSstp.shang;
}
- (sstpBuilder*) setShang:(Float64) value {
  resultSstp.hasShang = YES;
  resultSstp.shang = value;
  return self;
}
- (sstpBuilder*) clearShang {
  resultSstp.hasShang = NO;
  resultSstp.shang = 0;
  return self;
}
- (BOOL) hasCiShang {
  return resultSstp.hasCiShang;
}
- (Float64) ciShang {
  return resultSstp.ciShang;
}
- (sstpBuilder*) setCiShang:(Float64) value {
  resultSstp.hasCiShang = YES;
  resultSstp.ciShang = value;
  return self;
}
- (sstpBuilder*) clearCiShang {
  resultSstp.hasCiShang = NO;
  resultSstp.ciShang = 0;
  return self;
}
- (BOOL) hasCiXia {
  return resultSstp.hasCiXia;
}
- (Float64) ciXia {
  return resultSstp.ciXia;
}
- (sstpBuilder*) setCiXia:(Float64) value {
  resultSstp.hasCiXia = YES;
  resultSstp.ciXia = value;
  return self;
}
- (sstpBuilder*) clearCiXia {
  resultSstp.hasCiXia = NO;
  resultSstp.ciXia = 0;
  return self;
}
- (BOOL) hasXia {
  return resultSstp.hasXia;
}
- (Float64) xia {
  return resultSstp.xia;
}
- (sstpBuilder*) setXia:(Float64) value {
  resultSstp.hasXia = YES;
  resultSstp.xia = value;
  return self;
}
- (sstpBuilder*) clearXia {
  resultSstp.hasXia = NO;
  resultSstp.xia = 0;
  return self;
}
@end

@interface sstp_array ()
@property (strong) NSMutableArray * indexDataArray;
@end

@implementation sstp_array

@synthesize indexDataArray;
@dynamic indexData;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static sstp_array* defaultsstp_arrayInstance = nil;
+ (void) initialize {
  if (self == [sstp_array class]) {
    defaultsstp_arrayInstance = [[sstp_array alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultsstp_arrayInstance;
}
- (instancetype) defaultInstance {
  return defaultsstp_arrayInstance;
}
- (NSArray *)indexData {
  return indexDataArray;
}
- (sstp*)indexDataAtIndex:(NSUInteger)index {
  return [indexDataArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  __block BOOL isInitindexData = YES;
   [self.indexData enumerateObjectsUsingBlock:^(sstp *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitindexData = NO;
      *stop = YES;
    }
  }];
  if (!isInitindexData) return isInitindexData;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.indexDataArray enumerateObjectsUsingBlock:^(sstp *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.indexDataArray enumerateObjectsUsingBlock:^(sstp *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (sstp_array*) parseFromData:(NSData*) data {
  return (sstp_array*)[[[sstp_array builder] mergeFromData:data] build];
}
+ (sstp_array*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (sstp_array*)[[[sstp_array builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (sstp_array*) parseFromInputStream:(NSInputStream*) input {
  return (sstp_array*)[[[sstp_array builder] mergeFromInputStream:input] build];
}
+ (sstp_array*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (sstp_array*)[[[sstp_array builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (sstp_array*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (sstp_array*)[[[sstp_array builder] mergeFromCodedInputStream:input] build];
}
+ (sstp_array*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (sstp_array*)[[[sstp_array builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (sstp_arrayBuilder*) builder {
  return [[sstp_arrayBuilder alloc] init];
}
+ (sstp_arrayBuilder*) builderWithPrototype:(sstp_array*) prototype {
  return [[sstp_array builder] mergeFrom:prototype];
}
- (sstp_arrayBuilder*) builder {
  return [sstp_array builder];
}
- (sstp_arrayBuilder*) toBuilder {
  return [sstp_array builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.indexDataArray enumerateObjectsUsingBlock:^(sstp *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"indexData"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  for (sstp* element in self.indexDataArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"indexData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[sstp_array class]]) {
    return NO;
  }
  sstp_array *otherMessage = other;
  return
      [self.indexDataArray isEqualToArray:otherMessage.indexDataArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.indexDataArray enumerateObjectsUsingBlock:^(sstp *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface sstp_arrayBuilder()
@property (strong) sstp_array* resultSstpArray;
@end

@implementation sstp_arrayBuilder
@synthesize resultSstpArray;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultSstpArray = [[sstp_array alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultSstpArray;
}
- (sstp_arrayBuilder*) clear {
  self.resultSstpArray = [[sstp_array alloc] init];
  return self;
}
- (sstp_arrayBuilder*) clone {
  return [sstp_array builderWithPrototype:resultSstpArray];
}
- (sstp_array*) defaultInstance {
  return [sstp_array defaultInstance];
}
- (sstp_array*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (sstp_array*) buildPartial {
  sstp_array* returnMe = resultSstpArray;
  self.resultSstpArray = nil;
  return returnMe;
}
- (sstp_arrayBuilder*) mergeFrom:(sstp_array*) other {
  if (other == [sstp_array defaultInstance]) {
    return self;
  }
  if (other.indexDataArray.count > 0) {
    if (resultSstpArray.indexDataArray == nil) {
      resultSstpArray.indexDataArray = [[NSMutableArray alloc] initWithArray:other.indexDataArray];
    } else {
      [resultSstpArray.indexDataArray addObjectsFromArray:other.indexDataArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (sstp_arrayBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (sstp_arrayBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        sstpBuilder* subBuilder = [sstp builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addIndexData:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)indexData {
  return resultSstpArray.indexDataArray;
}
- (sstp*)indexDataAtIndex:(NSUInteger)index {
  return [resultSstpArray indexDataAtIndex:index];
}
- (sstp_arrayBuilder *)addIndexData:(sstp*)value {
  if (resultSstpArray.indexDataArray == nil) {
    resultSstpArray.indexDataArray = [[NSMutableArray alloc]init];
  }
  [resultSstpArray.indexDataArray addObject:value];
  return self;
}
- (sstp_arrayBuilder *)setIndexDataArray:(NSArray *)array {
  resultSstpArray.indexDataArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (sstp_arrayBuilder *)clearIndexData {
  resultSstpArray.indexDataArray = nil;
  return self;
}
@end

@interface qlft ()
@property UInt32 time;
@property Float64 zhongXianQiangRuo;
@property Float64 me;
@end

@implementation qlft

- (BOOL) hasTime {
  return !!hasTime_;
}
- (void) setHasTime:(BOOL) _value_ {
  hasTime_ = !!_value_;
}
@synthesize time;
- (BOOL) hasZhongXianQiangRuo {
  return !!hasZhongXianQiangRuo_;
}
- (void) setHasZhongXianQiangRuo:(BOOL) _value_ {
  hasZhongXianQiangRuo_ = !!_value_;
}
@synthesize zhongXianQiangRuo;
- (BOOL) hasMe {
  return !!hasMe_;
}
- (void) setHasMe:(BOOL) _value_ {
  hasMe_ = !!_value_;
}
@synthesize me;
- (instancetype) init {
  if ((self = [super init])) {
    self.time = 0;
    self.zhongXianQiangRuo = 0;
    self.me = 0;
  }
  return self;
}
static qlft* defaultqlftInstance = nil;
+ (void) initialize {
  if (self == [qlft class]) {
    defaultqlftInstance = [[qlft alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultqlftInstance;
}
- (instancetype) defaultInstance {
  return defaultqlftInstance;
}
- (BOOL) isInitialized {
  if (!self.hasTime) {
    return NO;
  }
  if (!self.hasZhongXianQiangRuo) {
    return NO;
  }
  if (!self.hasMe) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTime) {
    [output writeUInt32:1 value:self.time];
  }
  if (self.hasZhongXianQiangRuo) {
    [output writeDouble:2 value:self.zhongXianQiangRuo];
  }
  if (self.hasMe) {
    [output writeDouble:3 value:self.me];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasTime) {
    size_ += computeUInt32Size(1, self.time);
  }
  if (self.hasZhongXianQiangRuo) {
    size_ += computeDoubleSize(2, self.zhongXianQiangRuo);
  }
  if (self.hasMe) {
    size_ += computeDoubleSize(3, self.me);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (qlft*) parseFromData:(NSData*) data {
  return (qlft*)[[[qlft builder] mergeFromData:data] build];
}
+ (qlft*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (qlft*)[[[qlft builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (qlft*) parseFromInputStream:(NSInputStream*) input {
  return (qlft*)[[[qlft builder] mergeFromInputStream:input] build];
}
+ (qlft*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (qlft*)[[[qlft builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (qlft*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (qlft*)[[[qlft builder] mergeFromCodedInputStream:input] build];
}
+ (qlft*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (qlft*)[[[qlft builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (qlftBuilder*) builder {
  return [[qlftBuilder alloc] init];
}
+ (qlftBuilder*) builderWithPrototype:(qlft*) prototype {
  return [[qlft builder] mergeFrom:prototype];
}
- (qlftBuilder*) builder {
  return [qlft builder];
}
- (qlftBuilder*) toBuilder {
  return [qlft builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"time", [NSNumber numberWithInteger:self.time]];
  }
  if (self.hasZhongXianQiangRuo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"zhongXianQiangRuo", [NSNumber numberWithDouble:self.zhongXianQiangRuo]];
  }
  if (self.hasMe) {
    [output appendFormat:@"%@%@: %@\n", indent, @"me", [NSNumber numberWithDouble:self.me]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasTime) {
    [dictionary setObject: [NSNumber numberWithInteger:self.time] forKey: @"time"];
  }
  if (self.hasZhongXianQiangRuo) {
    [dictionary setObject: [NSNumber numberWithDouble:self.zhongXianQiangRuo] forKey: @"zhongXianQiangRuo"];
  }
  if (self.hasMe) {
    [dictionary setObject: [NSNumber numberWithDouble:self.me] forKey: @"me"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[qlft class]]) {
    return NO;
  }
  qlft *otherMessage = other;
  return
      self.hasTime == otherMessage.hasTime &&
      (!self.hasTime || self.time == otherMessage.time) &&
      self.hasZhongXianQiangRuo == otherMessage.hasZhongXianQiangRuo &&
      (!self.hasZhongXianQiangRuo || self.zhongXianQiangRuo == otherMessage.zhongXianQiangRuo) &&
      self.hasMe == otherMessage.hasMe &&
      (!self.hasMe || self.me == otherMessage.me) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.time] hash];
  }
  if (self.hasZhongXianQiangRuo) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.zhongXianQiangRuo] hash];
  }
  if (self.hasMe) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.me] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface qlftBuilder()
@property (strong) qlft* resultQlft;
@end

@implementation qlftBuilder
@synthesize resultQlft;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultQlft = [[qlft alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultQlft;
}
- (qlftBuilder*) clear {
  self.resultQlft = [[qlft alloc] init];
  return self;
}
- (qlftBuilder*) clone {
  return [qlft builderWithPrototype:resultQlft];
}
- (qlft*) defaultInstance {
  return [qlft defaultInstance];
}
- (qlft*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (qlft*) buildPartial {
  qlft* returnMe = resultQlft;
  self.resultQlft = nil;
  return returnMe;
}
- (qlftBuilder*) mergeFrom:(qlft*) other {
  if (other == [qlft defaultInstance]) {
    return self;
  }
  if (other.hasTime) {
    [self setTime:other.time];
  }
  if (other.hasZhongXianQiangRuo) {
    [self setZhongXianQiangRuo:other.zhongXianQiangRuo];
  }
  if (other.hasMe) {
    [self setMe:other.me];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (qlftBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (qlftBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setTime:[input readUInt32]];
        break;
      }
      case 17: {
        [self setZhongXianQiangRuo:[input readDouble]];
        break;
      }
      case 25: {
        [self setMe:[input readDouble]];
        break;
      }
    }
  }
}
- (BOOL) hasTime {
  return resultQlft.hasTime;
}
- (UInt32) time {
  return resultQlft.time;
}
- (qlftBuilder*) setTime:(UInt32) value {
  resultQlft.hasTime = YES;
  resultQlft.time = value;
  return self;
}
- (qlftBuilder*) clearTime {
  resultQlft.hasTime = NO;
  resultQlft.time = 0;
  return self;
}
- (BOOL) hasZhongXianQiangRuo {
  return resultQlft.hasZhongXianQiangRuo;
}
- (Float64) zhongXianQiangRuo {
  return resultQlft.zhongXianQiangRuo;
}
- (qlftBuilder*) setZhongXianQiangRuo:(Float64) value {
  resultQlft.hasZhongXianQiangRuo = YES;
  resultQlft.zhongXianQiangRuo = value;
  return self;
}
- (qlftBuilder*) clearZhongXianQiangRuo {
  resultQlft.hasZhongXianQiangRuo = NO;
  resultQlft.zhongXianQiangRuo = 0;
  return self;
}
- (BOOL) hasMe {
  return resultQlft.hasMe;
}
- (Float64) me {
  return resultQlft.me;
}
- (qlftBuilder*) setMe:(Float64) value {
  resultQlft.hasMe = YES;
  resultQlft.me = value;
  return self;
}
- (qlftBuilder*) clearMe {
  resultQlft.hasMe = NO;
  resultQlft.me = 0;
  return self;
}
@end

@interface qlft_array ()
@property (strong) NSMutableArray * indexDataArray;
@end

@implementation qlft_array

@synthesize indexDataArray;
@dynamic indexData;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static qlft_array* defaultqlft_arrayInstance = nil;
+ (void) initialize {
  if (self == [qlft_array class]) {
    defaultqlft_arrayInstance = [[qlft_array alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultqlft_arrayInstance;
}
- (instancetype) defaultInstance {
  return defaultqlft_arrayInstance;
}
- (NSArray *)indexData {
  return indexDataArray;
}
- (qlft*)indexDataAtIndex:(NSUInteger)index {
  return [indexDataArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  __block BOOL isInitindexData = YES;
   [self.indexData enumerateObjectsUsingBlock:^(qlft *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitindexData = NO;
      *stop = YES;
    }
  }];
  if (!isInitindexData) return isInitindexData;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.indexDataArray enumerateObjectsUsingBlock:^(qlft *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.indexDataArray enumerateObjectsUsingBlock:^(qlft *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (qlft_array*) parseFromData:(NSData*) data {
  return (qlft_array*)[[[qlft_array builder] mergeFromData:data] build];
}
+ (qlft_array*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (qlft_array*)[[[qlft_array builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (qlft_array*) parseFromInputStream:(NSInputStream*) input {
  return (qlft_array*)[[[qlft_array builder] mergeFromInputStream:input] build];
}
+ (qlft_array*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (qlft_array*)[[[qlft_array builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (qlft_array*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (qlft_array*)[[[qlft_array builder] mergeFromCodedInputStream:input] build];
}
+ (qlft_array*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (qlft_array*)[[[qlft_array builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (qlft_arrayBuilder*) builder {
  return [[qlft_arrayBuilder alloc] init];
}
+ (qlft_arrayBuilder*) builderWithPrototype:(qlft_array*) prototype {
  return [[qlft_array builder] mergeFrom:prototype];
}
- (qlft_arrayBuilder*) builder {
  return [qlft_array builder];
}
- (qlft_arrayBuilder*) toBuilder {
  return [qlft_array builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.indexDataArray enumerateObjectsUsingBlock:^(qlft *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"indexData"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  for (qlft* element in self.indexDataArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"indexData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[qlft_array class]]) {
    return NO;
  }
  qlft_array *otherMessage = other;
  return
      [self.indexDataArray isEqualToArray:otherMessage.indexDataArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.indexDataArray enumerateObjectsUsingBlock:^(qlft *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface qlft_arrayBuilder()
@property (strong) qlft_array* resultQlftArray;
@end

@implementation qlft_arrayBuilder
@synthesize resultQlftArray;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultQlftArray = [[qlft_array alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultQlftArray;
}
- (qlft_arrayBuilder*) clear {
  self.resultQlftArray = [[qlft_array alloc] init];
  return self;
}
- (qlft_arrayBuilder*) clone {
  return [qlft_array builderWithPrototype:resultQlftArray];
}
- (qlft_array*) defaultInstance {
  return [qlft_array defaultInstance];
}
- (qlft_array*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (qlft_array*) buildPartial {
  qlft_array* returnMe = resultQlftArray;
  self.resultQlftArray = nil;
  return returnMe;
}
- (qlft_arrayBuilder*) mergeFrom:(qlft_array*) other {
  if (other == [qlft_array defaultInstance]) {
    return self;
  }
  if (other.indexDataArray.count > 0) {
    if (resultQlftArray.indexDataArray == nil) {
      resultQlftArray.indexDataArray = [[NSMutableArray alloc] initWithArray:other.indexDataArray];
    } else {
      [resultQlftArray.indexDataArray addObjectsFromArray:other.indexDataArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (qlft_arrayBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (qlft_arrayBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        qlftBuilder* subBuilder = [qlft builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addIndexData:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)indexData {
  return resultQlftArray.indexDataArray;
}
- (qlft*)indexDataAtIndex:(NSUInteger)index {
  return [resultQlftArray indexDataAtIndex:index];
}
- (qlft_arrayBuilder *)addIndexData:(qlft*)value {
  if (resultQlftArray.indexDataArray == nil) {
    resultQlftArray.indexDataArray = [[NSMutableArray alloc]init];
  }
  [resultQlftArray.indexDataArray addObject:value];
  return self;
}
- (qlft_arrayBuilder *)setIndexDataArray:(NSArray *)array {
  resultQlftArray.indexDataArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (qlft_arrayBuilder *)clearIndexData {
  resultQlftArray.indexDataArray = nil;
  return self;
}
@end

@interface ldzj ()
@property UInt32 time;
@property Float64 ldzjValue;
@end

@implementation ldzj

- (BOOL) hasTime {
  return !!hasTime_;
}
- (void) setHasTime:(BOOL) _value_ {
  hasTime_ = !!_value_;
}
@synthesize time;
- (BOOL) hasLdzjValue {
  return !!hasLdzjValue_;
}
- (void) setHasLdzjValue:(BOOL) _value_ {
  hasLdzjValue_ = !!_value_;
}
@synthesize ldzjValue;
- (instancetype) init {
  if ((self = [super init])) {
    self.time = 0;
    self.ldzjValue = 0;
  }
  return self;
}
static ldzj* defaultldzjInstance = nil;
+ (void) initialize {
  if (self == [ldzj class]) {
    defaultldzjInstance = [[ldzj alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultldzjInstance;
}
- (instancetype) defaultInstance {
  return defaultldzjInstance;
}
- (BOOL) isInitialized {
  if (!self.hasTime) {
    return NO;
  }
  if (!self.hasLdzjValue) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTime) {
    [output writeUInt32:1 value:self.time];
  }
  if (self.hasLdzjValue) {
    [output writeDouble:2 value:self.ldzjValue];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasTime) {
    size_ += computeUInt32Size(1, self.time);
  }
  if (self.hasLdzjValue) {
    size_ += computeDoubleSize(2, self.ldzjValue);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ldzj*) parseFromData:(NSData*) data {
  return (ldzj*)[[[ldzj builder] mergeFromData:data] build];
}
+ (ldzj*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ldzj*)[[[ldzj builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ldzj*) parseFromInputStream:(NSInputStream*) input {
  return (ldzj*)[[[ldzj builder] mergeFromInputStream:input] build];
}
+ (ldzj*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ldzj*)[[[ldzj builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ldzj*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ldzj*)[[[ldzj builder] mergeFromCodedInputStream:input] build];
}
+ (ldzj*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ldzj*)[[[ldzj builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ldzjBuilder*) builder {
  return [[ldzjBuilder alloc] init];
}
+ (ldzjBuilder*) builderWithPrototype:(ldzj*) prototype {
  return [[ldzj builder] mergeFrom:prototype];
}
- (ldzjBuilder*) builder {
  return [ldzj builder];
}
- (ldzjBuilder*) toBuilder {
  return [ldzj builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"time", [NSNumber numberWithInteger:self.time]];
  }
  if (self.hasLdzjValue) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ldzjValue", [NSNumber numberWithDouble:self.ldzjValue]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasTime) {
    [dictionary setObject: [NSNumber numberWithInteger:self.time] forKey: @"time"];
  }
  if (self.hasLdzjValue) {
    [dictionary setObject: [NSNumber numberWithDouble:self.ldzjValue] forKey: @"ldzjValue"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ldzj class]]) {
    return NO;
  }
  ldzj *otherMessage = other;
  return
      self.hasTime == otherMessage.hasTime &&
      (!self.hasTime || self.time == otherMessage.time) &&
      self.hasLdzjValue == otherMessage.hasLdzjValue &&
      (!self.hasLdzjValue || self.ldzjValue == otherMessage.ldzjValue) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.time] hash];
  }
  if (self.hasLdzjValue) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.ldzjValue] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ldzjBuilder()
@property (strong) ldzj* resultLdzj;
@end

@implementation ldzjBuilder
@synthesize resultLdzj;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultLdzj = [[ldzj alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultLdzj;
}
- (ldzjBuilder*) clear {
  self.resultLdzj = [[ldzj alloc] init];
  return self;
}
- (ldzjBuilder*) clone {
  return [ldzj builderWithPrototype:resultLdzj];
}
- (ldzj*) defaultInstance {
  return [ldzj defaultInstance];
}
- (ldzj*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ldzj*) buildPartial {
  ldzj* returnMe = resultLdzj;
  self.resultLdzj = nil;
  return returnMe;
}
- (ldzjBuilder*) mergeFrom:(ldzj*) other {
  if (other == [ldzj defaultInstance]) {
    return self;
  }
  if (other.hasTime) {
    [self setTime:other.time];
  }
  if (other.hasLdzjValue) {
    [self setLdzjValue:other.ldzjValue];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ldzjBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ldzjBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setTime:[input readUInt32]];
        break;
      }
      case 17: {
        [self setLdzjValue:[input readDouble]];
        break;
      }
    }
  }
}
- (BOOL) hasTime {
  return resultLdzj.hasTime;
}
- (UInt32) time {
  return resultLdzj.time;
}
- (ldzjBuilder*) setTime:(UInt32) value {
  resultLdzj.hasTime = YES;
  resultLdzj.time = value;
  return self;
}
- (ldzjBuilder*) clearTime {
  resultLdzj.hasTime = NO;
  resultLdzj.time = 0;
  return self;
}
- (BOOL) hasLdzjValue {
  return resultLdzj.hasLdzjValue;
}
- (Float64) ldzjValue {
  return resultLdzj.ldzjValue;
}
- (ldzjBuilder*) setLdzjValue:(Float64) value {
  resultLdzj.hasLdzjValue = YES;
  resultLdzj.ldzjValue = value;
  return self;
}
- (ldzjBuilder*) clearLdzjValue {
  resultLdzj.hasLdzjValue = NO;
  resultLdzj.ldzjValue = 0;
  return self;
}
@end

@interface ldzj_array ()
@property (strong) NSMutableArray * indexDataArray;
@end

@implementation ldzj_array

@synthesize indexDataArray;
@dynamic indexData;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static ldzj_array* defaultldzj_arrayInstance = nil;
+ (void) initialize {
  if (self == [ldzj_array class]) {
    defaultldzj_arrayInstance = [[ldzj_array alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultldzj_arrayInstance;
}
- (instancetype) defaultInstance {
  return defaultldzj_arrayInstance;
}
- (NSArray *)indexData {
  return indexDataArray;
}
- (ldzj*)indexDataAtIndex:(NSUInteger)index {
  return [indexDataArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  __block BOOL isInitindexData = YES;
   [self.indexData enumerateObjectsUsingBlock:^(ldzj *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitindexData = NO;
      *stop = YES;
    }
  }];
  if (!isInitindexData) return isInitindexData;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.indexDataArray enumerateObjectsUsingBlock:^(ldzj *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.indexDataArray enumerateObjectsUsingBlock:^(ldzj *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ldzj_array*) parseFromData:(NSData*) data {
  return (ldzj_array*)[[[ldzj_array builder] mergeFromData:data] build];
}
+ (ldzj_array*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ldzj_array*)[[[ldzj_array builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ldzj_array*) parseFromInputStream:(NSInputStream*) input {
  return (ldzj_array*)[[[ldzj_array builder] mergeFromInputStream:input] build];
}
+ (ldzj_array*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ldzj_array*)[[[ldzj_array builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ldzj_array*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ldzj_array*)[[[ldzj_array builder] mergeFromCodedInputStream:input] build];
}
+ (ldzj_array*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ldzj_array*)[[[ldzj_array builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ldzj_arrayBuilder*) builder {
  return [[ldzj_arrayBuilder alloc] init];
}
+ (ldzj_arrayBuilder*) builderWithPrototype:(ldzj_array*) prototype {
  return [[ldzj_array builder] mergeFrom:prototype];
}
- (ldzj_arrayBuilder*) builder {
  return [ldzj_array builder];
}
- (ldzj_arrayBuilder*) toBuilder {
  return [ldzj_array builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.indexDataArray enumerateObjectsUsingBlock:^(ldzj *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"indexData"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  for (ldzj* element in self.indexDataArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"indexData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ldzj_array class]]) {
    return NO;
  }
  ldzj_array *otherMessage = other;
  return
      [self.indexDataArray isEqualToArray:otherMessage.indexDataArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.indexDataArray enumerateObjectsUsingBlock:^(ldzj *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ldzj_arrayBuilder()
@property (strong) ldzj_array* resultLdzjArray;
@end

@implementation ldzj_arrayBuilder
@synthesize resultLdzjArray;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultLdzjArray = [[ldzj_array alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultLdzjArray;
}
- (ldzj_arrayBuilder*) clear {
  self.resultLdzjArray = [[ldzj_array alloc] init];
  return self;
}
- (ldzj_arrayBuilder*) clone {
  return [ldzj_array builderWithPrototype:resultLdzjArray];
}
- (ldzj_array*) defaultInstance {
  return [ldzj_array defaultInstance];
}
- (ldzj_array*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ldzj_array*) buildPartial {
  ldzj_array* returnMe = resultLdzjArray;
  self.resultLdzjArray = nil;
  return returnMe;
}
- (ldzj_arrayBuilder*) mergeFrom:(ldzj_array*) other {
  if (other == [ldzj_array defaultInstance]) {
    return self;
  }
  if (other.indexDataArray.count > 0) {
    if (resultLdzjArray.indexDataArray == nil) {
      resultLdzjArray.indexDataArray = [[NSMutableArray alloc] initWithArray:other.indexDataArray];
    } else {
      [resultLdzjArray.indexDataArray addObjectsFromArray:other.indexDataArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ldzj_arrayBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ldzj_arrayBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        ldzjBuilder* subBuilder = [ldzj builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addIndexData:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)indexData {
  return resultLdzjArray.indexDataArray;
}
- (ldzj*)indexDataAtIndex:(NSUInteger)index {
  return [resultLdzjArray indexDataAtIndex:index];
}
- (ldzj_arrayBuilder *)addIndexData:(ldzj*)value {
  if (resultLdzjArray.indexDataArray == nil) {
    resultLdzjArray.indexDataArray = [[NSMutableArray alloc]init];
  }
  [resultLdzjArray.indexDataArray addObject:value];
  return self;
}
- (ldzj_arrayBuilder *)setIndexDataArray:(NSArray *)array {
  resultLdzjArray.indexDataArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (ldzj_arrayBuilder *)clearIndexData {
  resultLdzjArray.indexDataArray = nil;
  return self;
}
@end

@interface zlkp ()
@property UInt32 time;
@property Float64 kongPanChengDu;
@property Float64 gaoKongPan;
@end

@implementation zlkp

- (BOOL) hasTime {
  return !!hasTime_;
}
- (void) setHasTime:(BOOL) _value_ {
  hasTime_ = !!_value_;
}
@synthesize time;
- (BOOL) hasKongPanChengDu {
  return !!hasKongPanChengDu_;
}
- (void) setHasKongPanChengDu:(BOOL) _value_ {
  hasKongPanChengDu_ = !!_value_;
}
@synthesize kongPanChengDu;
- (BOOL) hasGaoKongPan {
  return !!hasGaoKongPan_;
}
- (void) setHasGaoKongPan:(BOOL) _value_ {
  hasGaoKongPan_ = !!_value_;
}
@synthesize gaoKongPan;
- (instancetype) init {
  if ((self = [super init])) {
    self.time = 0;
    self.kongPanChengDu = 0;
    self.gaoKongPan = 0;
  }
  return self;
}
static zlkp* defaultzlkpInstance = nil;
+ (void) initialize {
  if (self == [zlkp class]) {
    defaultzlkpInstance = [[zlkp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultzlkpInstance;
}
- (instancetype) defaultInstance {
  return defaultzlkpInstance;
}
- (BOOL) isInitialized {
  if (!self.hasTime) {
    return NO;
  }
  if (!self.hasKongPanChengDu) {
    return NO;
  }
  if (!self.hasGaoKongPan) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTime) {
    [output writeUInt32:1 value:self.time];
  }
  if (self.hasKongPanChengDu) {
    [output writeDouble:2 value:self.kongPanChengDu];
  }
  if (self.hasGaoKongPan) {
    [output writeDouble:3 value:self.gaoKongPan];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasTime) {
    size_ += computeUInt32Size(1, self.time);
  }
  if (self.hasKongPanChengDu) {
    size_ += computeDoubleSize(2, self.kongPanChengDu);
  }
  if (self.hasGaoKongPan) {
    size_ += computeDoubleSize(3, self.gaoKongPan);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (zlkp*) parseFromData:(NSData*) data {
  return (zlkp*)[[[zlkp builder] mergeFromData:data] build];
}
+ (zlkp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (zlkp*)[[[zlkp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (zlkp*) parseFromInputStream:(NSInputStream*) input {
  return (zlkp*)[[[zlkp builder] mergeFromInputStream:input] build];
}
+ (zlkp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (zlkp*)[[[zlkp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (zlkp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (zlkp*)[[[zlkp builder] mergeFromCodedInputStream:input] build];
}
+ (zlkp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (zlkp*)[[[zlkp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (zlkpBuilder*) builder {
  return [[zlkpBuilder alloc] init];
}
+ (zlkpBuilder*) builderWithPrototype:(zlkp*) prototype {
  return [[zlkp builder] mergeFrom:prototype];
}
- (zlkpBuilder*) builder {
  return [zlkp builder];
}
- (zlkpBuilder*) toBuilder {
  return [zlkp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"time", [NSNumber numberWithInteger:self.time]];
  }
  if (self.hasKongPanChengDu) {
    [output appendFormat:@"%@%@: %@\n", indent, @"kongPanChengDu", [NSNumber numberWithDouble:self.kongPanChengDu]];
  }
  if (self.hasGaoKongPan) {
    [output appendFormat:@"%@%@: %@\n", indent, @"gaoKongPan", [NSNumber numberWithDouble:self.gaoKongPan]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasTime) {
    [dictionary setObject: [NSNumber numberWithInteger:self.time] forKey: @"time"];
  }
  if (self.hasKongPanChengDu) {
    [dictionary setObject: [NSNumber numberWithDouble:self.kongPanChengDu] forKey: @"kongPanChengDu"];
  }
  if (self.hasGaoKongPan) {
    [dictionary setObject: [NSNumber numberWithDouble:self.gaoKongPan] forKey: @"gaoKongPan"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[zlkp class]]) {
    return NO;
  }
  zlkp *otherMessage = other;
  return
      self.hasTime == otherMessage.hasTime &&
      (!self.hasTime || self.time == otherMessage.time) &&
      self.hasKongPanChengDu == otherMessage.hasKongPanChengDu &&
      (!self.hasKongPanChengDu || self.kongPanChengDu == otherMessage.kongPanChengDu) &&
      self.hasGaoKongPan == otherMessage.hasGaoKongPan &&
      (!self.hasGaoKongPan || self.gaoKongPan == otherMessage.gaoKongPan) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.time] hash];
  }
  if (self.hasKongPanChengDu) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.kongPanChengDu] hash];
  }
  if (self.hasGaoKongPan) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.gaoKongPan] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface zlkpBuilder()
@property (strong) zlkp* resultZlkp;
@end

@implementation zlkpBuilder
@synthesize resultZlkp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultZlkp = [[zlkp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultZlkp;
}
- (zlkpBuilder*) clear {
  self.resultZlkp = [[zlkp alloc] init];
  return self;
}
- (zlkpBuilder*) clone {
  return [zlkp builderWithPrototype:resultZlkp];
}
- (zlkp*) defaultInstance {
  return [zlkp defaultInstance];
}
- (zlkp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (zlkp*) buildPartial {
  zlkp* returnMe = resultZlkp;
  self.resultZlkp = nil;
  return returnMe;
}
- (zlkpBuilder*) mergeFrom:(zlkp*) other {
  if (other == [zlkp defaultInstance]) {
    return self;
  }
  if (other.hasTime) {
    [self setTime:other.time];
  }
  if (other.hasKongPanChengDu) {
    [self setKongPanChengDu:other.kongPanChengDu];
  }
  if (other.hasGaoKongPan) {
    [self setGaoKongPan:other.gaoKongPan];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (zlkpBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (zlkpBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setTime:[input readUInt32]];
        break;
      }
      case 17: {
        [self setKongPanChengDu:[input readDouble]];
        break;
      }
      case 25: {
        [self setGaoKongPan:[input readDouble]];
        break;
      }
    }
  }
}
- (BOOL) hasTime {
  return resultZlkp.hasTime;
}
- (UInt32) time {
  return resultZlkp.time;
}
- (zlkpBuilder*) setTime:(UInt32) value {
  resultZlkp.hasTime = YES;
  resultZlkp.time = value;
  return self;
}
- (zlkpBuilder*) clearTime {
  resultZlkp.hasTime = NO;
  resultZlkp.time = 0;
  return self;
}
- (BOOL) hasKongPanChengDu {
  return resultZlkp.hasKongPanChengDu;
}
- (Float64) kongPanChengDu {
  return resultZlkp.kongPanChengDu;
}
- (zlkpBuilder*) setKongPanChengDu:(Float64) value {
  resultZlkp.hasKongPanChengDu = YES;
  resultZlkp.kongPanChengDu = value;
  return self;
}
- (zlkpBuilder*) clearKongPanChengDu {
  resultZlkp.hasKongPanChengDu = NO;
  resultZlkp.kongPanChengDu = 0;
  return self;
}
- (BOOL) hasGaoKongPan {
  return resultZlkp.hasGaoKongPan;
}
- (Float64) gaoKongPan {
  return resultZlkp.gaoKongPan;
}
- (zlkpBuilder*) setGaoKongPan:(Float64) value {
  resultZlkp.hasGaoKongPan = YES;
  resultZlkp.gaoKongPan = value;
  return self;
}
- (zlkpBuilder*) clearGaoKongPan {
  resultZlkp.hasGaoKongPan = NO;
  resultZlkp.gaoKongPan = 0;
  return self;
}
@end

@interface zlkp_array ()
@property (strong) NSMutableArray * indexDataArray;
@end

@implementation zlkp_array

@synthesize indexDataArray;
@dynamic indexData;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static zlkp_array* defaultzlkp_arrayInstance = nil;
+ (void) initialize {
  if (self == [zlkp_array class]) {
    defaultzlkp_arrayInstance = [[zlkp_array alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultzlkp_arrayInstance;
}
- (instancetype) defaultInstance {
  return defaultzlkp_arrayInstance;
}
- (NSArray *)indexData {
  return indexDataArray;
}
- (zlkp*)indexDataAtIndex:(NSUInteger)index {
  return [indexDataArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  __block BOOL isInitindexData = YES;
   [self.indexData enumerateObjectsUsingBlock:^(zlkp *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitindexData = NO;
      *stop = YES;
    }
  }];
  if (!isInitindexData) return isInitindexData;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.indexDataArray enumerateObjectsUsingBlock:^(zlkp *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.indexDataArray enumerateObjectsUsingBlock:^(zlkp *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (zlkp_array*) parseFromData:(NSData*) data {
  return (zlkp_array*)[[[zlkp_array builder] mergeFromData:data] build];
}
+ (zlkp_array*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (zlkp_array*)[[[zlkp_array builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (zlkp_array*) parseFromInputStream:(NSInputStream*) input {
  return (zlkp_array*)[[[zlkp_array builder] mergeFromInputStream:input] build];
}
+ (zlkp_array*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (zlkp_array*)[[[zlkp_array builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (zlkp_array*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (zlkp_array*)[[[zlkp_array builder] mergeFromCodedInputStream:input] build];
}
+ (zlkp_array*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (zlkp_array*)[[[zlkp_array builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (zlkp_arrayBuilder*) builder {
  return [[zlkp_arrayBuilder alloc] init];
}
+ (zlkp_arrayBuilder*) builderWithPrototype:(zlkp_array*) prototype {
  return [[zlkp_array builder] mergeFrom:prototype];
}
- (zlkp_arrayBuilder*) builder {
  return [zlkp_array builder];
}
- (zlkp_arrayBuilder*) toBuilder {
  return [zlkp_array builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.indexDataArray enumerateObjectsUsingBlock:^(zlkp *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"indexData"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  for (zlkp* element in self.indexDataArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"indexData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[zlkp_array class]]) {
    return NO;
  }
  zlkp_array *otherMessage = other;
  return
      [self.indexDataArray isEqualToArray:otherMessage.indexDataArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.indexDataArray enumerateObjectsUsingBlock:^(zlkp *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface zlkp_arrayBuilder()
@property (strong) zlkp_array* resultZlkpArray;
@end

@implementation zlkp_arrayBuilder
@synthesize resultZlkpArray;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultZlkpArray = [[zlkp_array alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultZlkpArray;
}
- (zlkp_arrayBuilder*) clear {
  self.resultZlkpArray = [[zlkp_array alloc] init];
  return self;
}
- (zlkp_arrayBuilder*) clone {
  return [zlkp_array builderWithPrototype:resultZlkpArray];
}
- (zlkp_array*) defaultInstance {
  return [zlkp_array defaultInstance];
}
- (zlkp_array*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (zlkp_array*) buildPartial {
  zlkp_array* returnMe = resultZlkpArray;
  self.resultZlkpArray = nil;
  return returnMe;
}
- (zlkp_arrayBuilder*) mergeFrom:(zlkp_array*) other {
  if (other == [zlkp_array defaultInstance]) {
    return self;
  }
  if (other.indexDataArray.count > 0) {
    if (resultZlkpArray.indexDataArray == nil) {
      resultZlkpArray.indexDataArray = [[NSMutableArray alloc] initWithArray:other.indexDataArray];
    } else {
      [resultZlkpArray.indexDataArray addObjectsFromArray:other.indexDataArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (zlkp_arrayBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (zlkp_arrayBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        zlkpBuilder* subBuilder = [zlkp builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addIndexData:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)indexData {
  return resultZlkpArray.indexDataArray;
}
- (zlkp*)indexDataAtIndex:(NSUInteger)index {
  return [resultZlkpArray indexDataAtIndex:index];
}
- (zlkp_arrayBuilder *)addIndexData:(zlkp*)value {
  if (resultZlkpArray.indexDataArray == nil) {
    resultZlkpArray.indexDataArray = [[NSMutableArray alloc]init];
  }
  [resultZlkpArray.indexDataArray addObject:value];
  return self;
}
- (zlkp_arrayBuilder *)setIndexDataArray:(NSArray *)array {
  resultZlkpArray.indexDataArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (zlkp_arrayBuilder *)clearIndexData {
  resultZlkpArray.indexDataArray = nil;
  return self;
}
@end

@interface zlzj ()
@property UInt32 time;
@property Float64 jz;
@property Float64 mmbl;
@end

@implementation zlzj

- (BOOL) hasTime {
  return !!hasTime_;
}
- (void) setHasTime:(BOOL) _value_ {
  hasTime_ = !!_value_;
}
@synthesize time;
- (BOOL) hasJz {
  return !!hasJz_;
}
- (void) setHasJz:(BOOL) _value_ {
  hasJz_ = !!_value_;
}
@synthesize jz;
- (BOOL) hasMmbl {
  return !!hasMmbl_;
}
- (void) setHasMmbl:(BOOL) _value_ {
  hasMmbl_ = !!_value_;
}
@synthesize mmbl;
- (instancetype) init {
  if ((self = [super init])) {
    self.time = 0;
    self.jz = 0;
    self.mmbl = 0;
  }
  return self;
}
static zlzj* defaultzlzjInstance = nil;
+ (void) initialize {
  if (self == [zlzj class]) {
    defaultzlzjInstance = [[zlzj alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultzlzjInstance;
}
- (instancetype) defaultInstance {
  return defaultzlzjInstance;
}
- (BOOL) isInitialized {
  if (!self.hasTime) {
    return NO;
  }
  if (!self.hasJz) {
    return NO;
  }
  if (!self.hasMmbl) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTime) {
    [output writeUInt32:1 value:self.time];
  }
  if (self.hasJz) {
    [output writeDouble:2 value:self.jz];
  }
  if (self.hasMmbl) {
    [output writeDouble:3 value:self.mmbl];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasTime) {
    size_ += computeUInt32Size(1, self.time);
  }
  if (self.hasJz) {
    size_ += computeDoubleSize(2, self.jz);
  }
  if (self.hasMmbl) {
    size_ += computeDoubleSize(3, self.mmbl);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (zlzj*) parseFromData:(NSData*) data {
  return (zlzj*)[[[zlzj builder] mergeFromData:data] build];
}
+ (zlzj*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (zlzj*)[[[zlzj builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (zlzj*) parseFromInputStream:(NSInputStream*) input {
  return (zlzj*)[[[zlzj builder] mergeFromInputStream:input] build];
}
+ (zlzj*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (zlzj*)[[[zlzj builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (zlzj*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (zlzj*)[[[zlzj builder] mergeFromCodedInputStream:input] build];
}
+ (zlzj*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (zlzj*)[[[zlzj builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (zlzjBuilder*) builder {
  return [[zlzjBuilder alloc] init];
}
+ (zlzjBuilder*) builderWithPrototype:(zlzj*) prototype {
  return [[zlzj builder] mergeFrom:prototype];
}
- (zlzjBuilder*) builder {
  return [zlzj builder];
}
- (zlzjBuilder*) toBuilder {
  return [zlzj builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"time", [NSNumber numberWithInteger:self.time]];
  }
  if (self.hasJz) {
    [output appendFormat:@"%@%@: %@\n", indent, @"jz", [NSNumber numberWithDouble:self.jz]];
  }
  if (self.hasMmbl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"mmbl", [NSNumber numberWithDouble:self.mmbl]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasTime) {
    [dictionary setObject: [NSNumber numberWithInteger:self.time] forKey: @"time"];
  }
  if (self.hasJz) {
    [dictionary setObject: [NSNumber numberWithDouble:self.jz] forKey: @"jz"];
  }
  if (self.hasMmbl) {
    [dictionary setObject: [NSNumber numberWithDouble:self.mmbl] forKey: @"mmbl"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[zlzj class]]) {
    return NO;
  }
  zlzj *otherMessage = other;
  return
      self.hasTime == otherMessage.hasTime &&
      (!self.hasTime || self.time == otherMessage.time) &&
      self.hasJz == otherMessage.hasJz &&
      (!self.hasJz || self.jz == otherMessage.jz) &&
      self.hasMmbl == otherMessage.hasMmbl &&
      (!self.hasMmbl || self.mmbl == otherMessage.mmbl) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.time] hash];
  }
  if (self.hasJz) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.jz] hash];
  }
  if (self.hasMmbl) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.mmbl] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface zlzjBuilder()
@property (strong) zlzj* resultZlzj;
@end

@implementation zlzjBuilder
@synthesize resultZlzj;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultZlzj = [[zlzj alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultZlzj;
}
- (zlzjBuilder*) clear {
  self.resultZlzj = [[zlzj alloc] init];
  return self;
}
- (zlzjBuilder*) clone {
  return [zlzj builderWithPrototype:resultZlzj];
}
- (zlzj*) defaultInstance {
  return [zlzj defaultInstance];
}
- (zlzj*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (zlzj*) buildPartial {
  zlzj* returnMe = resultZlzj;
  self.resultZlzj = nil;
  return returnMe;
}
- (zlzjBuilder*) mergeFrom:(zlzj*) other {
  if (other == [zlzj defaultInstance]) {
    return self;
  }
  if (other.hasTime) {
    [self setTime:other.time];
  }
  if (other.hasJz) {
    [self setJz:other.jz];
  }
  if (other.hasMmbl) {
    [self setMmbl:other.mmbl];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (zlzjBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (zlzjBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setTime:[input readUInt32]];
        break;
      }
      case 17: {
        [self setJz:[input readDouble]];
        break;
      }
      case 25: {
        [self setMmbl:[input readDouble]];
        break;
      }
    }
  }
}
- (BOOL) hasTime {
  return resultZlzj.hasTime;
}
- (UInt32) time {
  return resultZlzj.time;
}
- (zlzjBuilder*) setTime:(UInt32) value {
  resultZlzj.hasTime = YES;
  resultZlzj.time = value;
  return self;
}
- (zlzjBuilder*) clearTime {
  resultZlzj.hasTime = NO;
  resultZlzj.time = 0;
  return self;
}
- (BOOL) hasJz {
  return resultZlzj.hasJz;
}
- (Float64) jz {
  return resultZlzj.jz;
}
- (zlzjBuilder*) setJz:(Float64) value {
  resultZlzj.hasJz = YES;
  resultZlzj.jz = value;
  return self;
}
- (zlzjBuilder*) clearJz {
  resultZlzj.hasJz = NO;
  resultZlzj.jz = 0;
  return self;
}
- (BOOL) hasMmbl {
  return resultZlzj.hasMmbl;
}
- (Float64) mmbl {
  return resultZlzj.mmbl;
}
- (zlzjBuilder*) setMmbl:(Float64) value {
  resultZlzj.hasMmbl = YES;
  resultZlzj.mmbl = value;
  return self;
}
- (zlzjBuilder*) clearMmbl {
  resultZlzj.hasMmbl = NO;
  resultZlzj.mmbl = 0;
  return self;
}
@end

@interface zlzj_array ()
@property (strong) NSMutableArray * indexDataArray;
@end

@implementation zlzj_array

@synthesize indexDataArray;
@dynamic indexData;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static zlzj_array* defaultzlzj_arrayInstance = nil;
+ (void) initialize {
  if (self == [zlzj_array class]) {
    defaultzlzj_arrayInstance = [[zlzj_array alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultzlzj_arrayInstance;
}
- (instancetype) defaultInstance {
  return defaultzlzj_arrayInstance;
}
- (NSArray *)indexData {
  return indexDataArray;
}
- (zlzj*)indexDataAtIndex:(NSUInteger)index {
  return [indexDataArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  __block BOOL isInitindexData = YES;
   [self.indexData enumerateObjectsUsingBlock:^(zlzj *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitindexData = NO;
      *stop = YES;
    }
  }];
  if (!isInitindexData) return isInitindexData;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.indexDataArray enumerateObjectsUsingBlock:^(zlzj *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.indexDataArray enumerateObjectsUsingBlock:^(zlzj *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (zlzj_array*) parseFromData:(NSData*) data {
  return (zlzj_array*)[[[zlzj_array builder] mergeFromData:data] build];
}
+ (zlzj_array*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (zlzj_array*)[[[zlzj_array builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (zlzj_array*) parseFromInputStream:(NSInputStream*) input {
  return (zlzj_array*)[[[zlzj_array builder] mergeFromInputStream:input] build];
}
+ (zlzj_array*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (zlzj_array*)[[[zlzj_array builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (zlzj_array*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (zlzj_array*)[[[zlzj_array builder] mergeFromCodedInputStream:input] build];
}
+ (zlzj_array*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (zlzj_array*)[[[zlzj_array builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (zlzj_arrayBuilder*) builder {
  return [[zlzj_arrayBuilder alloc] init];
}
+ (zlzj_arrayBuilder*) builderWithPrototype:(zlzj_array*) prototype {
  return [[zlzj_array builder] mergeFrom:prototype];
}
- (zlzj_arrayBuilder*) builder {
  return [zlzj_array builder];
}
- (zlzj_arrayBuilder*) toBuilder {
  return [zlzj_array builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.indexDataArray enumerateObjectsUsingBlock:^(zlzj *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"indexData"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  for (zlzj* element in self.indexDataArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"indexData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[zlzj_array class]]) {
    return NO;
  }
  zlzj_array *otherMessage = other;
  return
      [self.indexDataArray isEqualToArray:otherMessage.indexDataArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.indexDataArray enumerateObjectsUsingBlock:^(zlzj *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface zlzj_arrayBuilder()
@property (strong) zlzj_array* resultZlzjArray;
@end

@implementation zlzj_arrayBuilder
@synthesize resultZlzjArray;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultZlzjArray = [[zlzj_array alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultZlzjArray;
}
- (zlzj_arrayBuilder*) clear {
  self.resultZlzjArray = [[zlzj_array alloc] init];
  return self;
}
- (zlzj_arrayBuilder*) clone {
  return [zlzj_array builderWithPrototype:resultZlzjArray];
}
- (zlzj_array*) defaultInstance {
  return [zlzj_array defaultInstance];
}
- (zlzj_array*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (zlzj_array*) buildPartial {
  zlzj_array* returnMe = resultZlzjArray;
  self.resultZlzjArray = nil;
  return returnMe;
}
- (zlzj_arrayBuilder*) mergeFrom:(zlzj_array*) other {
  if (other == [zlzj_array defaultInstance]) {
    return self;
  }
  if (other.indexDataArray.count > 0) {
    if (resultZlzjArray.indexDataArray == nil) {
      resultZlzjArray.indexDataArray = [[NSMutableArray alloc] initWithArray:other.indexDataArray];
    } else {
      [resultZlzjArray.indexDataArray addObjectsFromArray:other.indexDataArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (zlzj_arrayBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (zlzj_arrayBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        zlzjBuilder* subBuilder = [zlzj builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addIndexData:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)indexData {
  return resultZlzjArray.indexDataArray;
}
- (zlzj*)indexDataAtIndex:(NSUInteger)index {
  return [resultZlzjArray indexDataAtIndex:index];
}
- (zlzj_arrayBuilder *)addIndexData:(zlzj*)value {
  if (resultZlzjArray.indexDataArray == nil) {
    resultZlzjArray.indexDataArray = [[NSMutableArray alloc]init];
  }
  [resultZlzjArray.indexDataArray addObject:value];
  return self;
}
- (zlzj_arrayBuilder *)setIndexDataArray:(NSArray *)array {
  resultZlzjArray.indexDataArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (zlzj_arrayBuilder *)clearIndexData {
  resultZlzjArray.indexDataArray = nil;
  return self;
}
@end

@interface zljme ()
@property UInt32 time;
@property Float64 zljmeValue;
@end

@implementation zljme

- (BOOL) hasTime {
  return !!hasTime_;
}
- (void) setHasTime:(BOOL) _value_ {
  hasTime_ = !!_value_;
}
@synthesize time;
- (BOOL) hasZljmeValue {
  return !!hasZljmeValue_;
}
- (void) setHasZljmeValue:(BOOL) _value_ {
  hasZljmeValue_ = !!_value_;
}
@synthesize zljmeValue;
- (instancetype) init {
  if ((self = [super init])) {
    self.time = 0;
    self.zljmeValue = 0;
  }
  return self;
}
static zljme* defaultzljmeInstance = nil;
+ (void) initialize {
  if (self == [zljme class]) {
    defaultzljmeInstance = [[zljme alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultzljmeInstance;
}
- (instancetype) defaultInstance {
  return defaultzljmeInstance;
}
- (BOOL) isInitialized {
  if (!self.hasTime) {
    return NO;
  }
  if (!self.hasZljmeValue) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTime) {
    [output writeUInt32:1 value:self.time];
  }
  if (self.hasZljmeValue) {
    [output writeDouble:2 value:self.zljmeValue];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasTime) {
    size_ += computeUInt32Size(1, self.time);
  }
  if (self.hasZljmeValue) {
    size_ += computeDoubleSize(2, self.zljmeValue);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (zljme*) parseFromData:(NSData*) data {
  return (zljme*)[[[zljme builder] mergeFromData:data] build];
}
+ (zljme*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (zljme*)[[[zljme builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (zljme*) parseFromInputStream:(NSInputStream*) input {
  return (zljme*)[[[zljme builder] mergeFromInputStream:input] build];
}
+ (zljme*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (zljme*)[[[zljme builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (zljme*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (zljme*)[[[zljme builder] mergeFromCodedInputStream:input] build];
}
+ (zljme*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (zljme*)[[[zljme builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (zljmeBuilder*) builder {
  return [[zljmeBuilder alloc] init];
}
+ (zljmeBuilder*) builderWithPrototype:(zljme*) prototype {
  return [[zljme builder] mergeFrom:prototype];
}
- (zljmeBuilder*) builder {
  return [zljme builder];
}
- (zljmeBuilder*) toBuilder {
  return [zljme builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"time", [NSNumber numberWithInteger:self.time]];
  }
  if (self.hasZljmeValue) {
    [output appendFormat:@"%@%@: %@\n", indent, @"zljmeValue", [NSNumber numberWithDouble:self.zljmeValue]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasTime) {
    [dictionary setObject: [NSNumber numberWithInteger:self.time] forKey: @"time"];
  }
  if (self.hasZljmeValue) {
    [dictionary setObject: [NSNumber numberWithDouble:self.zljmeValue] forKey: @"zljmeValue"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[zljme class]]) {
    return NO;
  }
  zljme *otherMessage = other;
  return
      self.hasTime == otherMessage.hasTime &&
      (!self.hasTime || self.time == otherMessage.time) &&
      self.hasZljmeValue == otherMessage.hasZljmeValue &&
      (!self.hasZljmeValue || self.zljmeValue == otherMessage.zljmeValue) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.time] hash];
  }
  if (self.hasZljmeValue) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.zljmeValue] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface zljmeBuilder()
@property (strong) zljme* resultZljme;
@end

@implementation zljmeBuilder
@synthesize resultZljme;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultZljme = [[zljme alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultZljme;
}
- (zljmeBuilder*) clear {
  self.resultZljme = [[zljme alloc] init];
  return self;
}
- (zljmeBuilder*) clone {
  return [zljme builderWithPrototype:resultZljme];
}
- (zljme*) defaultInstance {
  return [zljme defaultInstance];
}
- (zljme*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (zljme*) buildPartial {
  zljme* returnMe = resultZljme;
  self.resultZljme = nil;
  return returnMe;
}
- (zljmeBuilder*) mergeFrom:(zljme*) other {
  if (other == [zljme defaultInstance]) {
    return self;
  }
  if (other.hasTime) {
    [self setTime:other.time];
  }
  if (other.hasZljmeValue) {
    [self setZljmeValue:other.zljmeValue];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (zljmeBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (zljmeBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setTime:[input readUInt32]];
        break;
      }
      case 17: {
        [self setZljmeValue:[input readDouble]];
        break;
      }
    }
  }
}
- (BOOL) hasTime {
  return resultZljme.hasTime;
}
- (UInt32) time {
  return resultZljme.time;
}
- (zljmeBuilder*) setTime:(UInt32) value {
  resultZljme.hasTime = YES;
  resultZljme.time = value;
  return self;
}
- (zljmeBuilder*) clearTime {
  resultZljme.hasTime = NO;
  resultZljme.time = 0;
  return self;
}
- (BOOL) hasZljmeValue {
  return resultZljme.hasZljmeValue;
}
- (Float64) zljmeValue {
  return resultZljme.zljmeValue;
}
- (zljmeBuilder*) setZljmeValue:(Float64) value {
  resultZljme.hasZljmeValue = YES;
  resultZljme.zljmeValue = value;
  return self;
}
- (zljmeBuilder*) clearZljmeValue {
  resultZljme.hasZljmeValue = NO;
  resultZljme.zljmeValue = 0;
  return self;
}
@end

@interface zljme_array ()
@property (strong) NSMutableArray * indexDataArray;
@end

@implementation zljme_array

@synthesize indexDataArray;
@dynamic indexData;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static zljme_array* defaultzljme_arrayInstance = nil;
+ (void) initialize {
  if (self == [zljme_array class]) {
    defaultzljme_arrayInstance = [[zljme_array alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultzljme_arrayInstance;
}
- (instancetype) defaultInstance {
  return defaultzljme_arrayInstance;
}
- (NSArray *)indexData {
  return indexDataArray;
}
- (zljme*)indexDataAtIndex:(NSUInteger)index {
  return [indexDataArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  __block BOOL isInitindexData = YES;
   [self.indexData enumerateObjectsUsingBlock:^(zljme *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitindexData = NO;
      *stop = YES;
    }
  }];
  if (!isInitindexData) return isInitindexData;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.indexDataArray enumerateObjectsUsingBlock:^(zljme *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.indexDataArray enumerateObjectsUsingBlock:^(zljme *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (zljme_array*) parseFromData:(NSData*) data {
  return (zljme_array*)[[[zljme_array builder] mergeFromData:data] build];
}
+ (zljme_array*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (zljme_array*)[[[zljme_array builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (zljme_array*) parseFromInputStream:(NSInputStream*) input {
  return (zljme_array*)[[[zljme_array builder] mergeFromInputStream:input] build];
}
+ (zljme_array*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (zljme_array*)[[[zljme_array builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (zljme_array*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (zljme_array*)[[[zljme_array builder] mergeFromCodedInputStream:input] build];
}
+ (zljme_array*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (zljme_array*)[[[zljme_array builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (zljme_arrayBuilder*) builder {
  return [[zljme_arrayBuilder alloc] init];
}
+ (zljme_arrayBuilder*) builderWithPrototype:(zljme_array*) prototype {
  return [[zljme_array builder] mergeFrom:prototype];
}
- (zljme_arrayBuilder*) builder {
  return [zljme_array builder];
}
- (zljme_arrayBuilder*) toBuilder {
  return [zljme_array builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.indexDataArray enumerateObjectsUsingBlock:^(zljme *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"indexData"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  for (zljme* element in self.indexDataArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"indexData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[zljme_array class]]) {
    return NO;
  }
  zljme_array *otherMessage = other;
  return
      [self.indexDataArray isEqualToArray:otherMessage.indexDataArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.indexDataArray enumerateObjectsUsingBlock:^(zljme *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface zljme_arrayBuilder()
@property (strong) zljme_array* resultZljmeArray;
@end

@implementation zljme_arrayBuilder
@synthesize resultZljmeArray;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultZljmeArray = [[zljme_array alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultZljmeArray;
}
- (zljme_arrayBuilder*) clear {
  self.resultZljmeArray = [[zljme_array alloc] init];
  return self;
}
- (zljme_arrayBuilder*) clone {
  return [zljme_array builderWithPrototype:resultZljmeArray];
}
- (zljme_array*) defaultInstance {
  return [zljme_array defaultInstance];
}
- (zljme_array*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (zljme_array*) buildPartial {
  zljme_array* returnMe = resultZljmeArray;
  self.resultZljmeArray = nil;
  return returnMe;
}
- (zljme_arrayBuilder*) mergeFrom:(zljme_array*) other {
  if (other == [zljme_array defaultInstance]) {
    return self;
  }
  if (other.indexDataArray.count > 0) {
    if (resultZljmeArray.indexDataArray == nil) {
      resultZljmeArray.indexDataArray = [[NSMutableArray alloc] initWithArray:other.indexDataArray];
    } else {
      [resultZljmeArray.indexDataArray addObjectsFromArray:other.indexDataArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (zljme_arrayBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (zljme_arrayBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        zljmeBuilder* subBuilder = [zljme builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addIndexData:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)indexData {
  return resultZljmeArray.indexDataArray;
}
- (zljme*)indexDataAtIndex:(NSUInteger)index {
  return [resultZljmeArray indexDataAtIndex:index];
}
- (zljme_arrayBuilder *)addIndexData:(zljme*)value {
  if (resultZljmeArray.indexDataArray == nil) {
    resultZljmeArray.indexDataArray = [[NSMutableArray alloc]init];
  }
  [resultZljmeArray.indexDataArray addObject:value];
  return self;
}
- (zljme_arrayBuilder *)setIndexDataArray:(NSArray *)array {
  resultZljmeArray.indexDataArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (zljme_arrayBuilder *)clearIndexData {
  resultZljmeArray.indexDataArray = nil;
  return self;
}
@end

@interface hhjvol ()
@property UInt32 time;
@property Float64 ma1Value;
@property Float64 ma2Value;
@property Float64 ma3Value;
@property Float64 xuniValue;
@property Float64 volValue;
@end

@implementation hhjvol

- (BOOL) hasTime {
  return !!hasTime_;
}
- (void) setHasTime:(BOOL) _value_ {
  hasTime_ = !!_value_;
}
@synthesize time;
- (BOOL) hasMa1Value {
  return !!hasMa1Value_;
}
- (void) setHasMa1Value:(BOOL) _value_ {
  hasMa1Value_ = !!_value_;
}
@synthesize ma1Value;
- (BOOL) hasMa2Value {
  return !!hasMa2Value_;
}
- (void) setHasMa2Value:(BOOL) _value_ {
  hasMa2Value_ = !!_value_;
}
@synthesize ma2Value;
- (BOOL) hasMa3Value {
  return !!hasMa3Value_;
}
- (void) setHasMa3Value:(BOOL) _value_ {
  hasMa3Value_ = !!_value_;
}
@synthesize ma3Value;
- (BOOL) hasXuniValue {
  return !!hasXuniValue_;
}
- (void) setHasXuniValue:(BOOL) _value_ {
  hasXuniValue_ = !!_value_;
}
@synthesize xuniValue;
- (BOOL) hasVolValue {
  return !!hasVolValue_;
}
- (void) setHasVolValue:(BOOL) _value_ {
  hasVolValue_ = !!_value_;
}
@synthesize volValue;
- (instancetype) init {
  if ((self = [super init])) {
    self.time = 0;
    self.ma1Value = 0;
    self.ma2Value = 0;
    self.ma3Value = 0;
    self.xuniValue = 0;
    self.volValue = 0;
  }
  return self;
}
static hhjvol* defaulthhjvolInstance = nil;
+ (void) initialize {
  if (self == [hhjvol class]) {
    defaulthhjvolInstance = [[hhjvol alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaulthhjvolInstance;
}
- (instancetype) defaultInstance {
  return defaulthhjvolInstance;
}
- (BOOL) isInitialized {
  if (!self.hasTime) {
    return NO;
  }
  if (!self.hasMa1Value) {
    return NO;
  }
  if (!self.hasMa2Value) {
    return NO;
  }
  if (!self.hasMa3Value) {
    return NO;
  }
  if (!self.hasXuniValue) {
    return NO;
  }
  if (!self.hasVolValue) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTime) {
    [output writeUInt32:1 value:self.time];
  }
  if (self.hasMa1Value) {
    [output writeDouble:2 value:self.ma1Value];
  }
  if (self.hasMa2Value) {
    [output writeDouble:3 value:self.ma2Value];
  }
  if (self.hasMa3Value) {
    [output writeDouble:4 value:self.ma3Value];
  }
  if (self.hasXuniValue) {
    [output writeDouble:5 value:self.xuniValue];
  }
  if (self.hasVolValue) {
    [output writeDouble:6 value:self.volValue];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasTime) {
    size_ += computeUInt32Size(1, self.time);
  }
  if (self.hasMa1Value) {
    size_ += computeDoubleSize(2, self.ma1Value);
  }
  if (self.hasMa2Value) {
    size_ += computeDoubleSize(3, self.ma2Value);
  }
  if (self.hasMa3Value) {
    size_ += computeDoubleSize(4, self.ma3Value);
  }
  if (self.hasXuniValue) {
    size_ += computeDoubleSize(5, self.xuniValue);
  }
  if (self.hasVolValue) {
    size_ += computeDoubleSize(6, self.volValue);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (hhjvol*) parseFromData:(NSData*) data {
  return (hhjvol*)[[[hhjvol builder] mergeFromData:data] build];
}
+ (hhjvol*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (hhjvol*)[[[hhjvol builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (hhjvol*) parseFromInputStream:(NSInputStream*) input {
  return (hhjvol*)[[[hhjvol builder] mergeFromInputStream:input] build];
}
+ (hhjvol*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (hhjvol*)[[[hhjvol builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (hhjvol*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (hhjvol*)[[[hhjvol builder] mergeFromCodedInputStream:input] build];
}
+ (hhjvol*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (hhjvol*)[[[hhjvol builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (hhjvolBuilder*) builder {
  return [[hhjvolBuilder alloc] init];
}
+ (hhjvolBuilder*) builderWithPrototype:(hhjvol*) prototype {
  return [[hhjvol builder] mergeFrom:prototype];
}
- (hhjvolBuilder*) builder {
  return [hhjvol builder];
}
- (hhjvolBuilder*) toBuilder {
  return [hhjvol builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"time", [NSNumber numberWithInteger:self.time]];
  }
  if (self.hasMa1Value) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ma1Value", [NSNumber numberWithDouble:self.ma1Value]];
  }
  if (self.hasMa2Value) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ma2Value", [NSNumber numberWithDouble:self.ma2Value]];
  }
  if (self.hasMa3Value) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ma3Value", [NSNumber numberWithDouble:self.ma3Value]];
  }
  if (self.hasXuniValue) {
    [output appendFormat:@"%@%@: %@\n", indent, @"xuniValue", [NSNumber numberWithDouble:self.xuniValue]];
  }
  if (self.hasVolValue) {
    [output appendFormat:@"%@%@: %@\n", indent, @"volValue", [NSNumber numberWithDouble:self.volValue]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasTime) {
    [dictionary setObject: [NSNumber numberWithInteger:self.time] forKey: @"time"];
  }
  if (self.hasMa1Value) {
    [dictionary setObject: [NSNumber numberWithDouble:self.ma1Value] forKey: @"ma1Value"];
  }
  if (self.hasMa2Value) {
    [dictionary setObject: [NSNumber numberWithDouble:self.ma2Value] forKey: @"ma2Value"];
  }
  if (self.hasMa3Value) {
    [dictionary setObject: [NSNumber numberWithDouble:self.ma3Value] forKey: @"ma3Value"];
  }
  if (self.hasXuniValue) {
    [dictionary setObject: [NSNumber numberWithDouble:self.xuniValue] forKey: @"xuniValue"];
  }
  if (self.hasVolValue) {
    [dictionary setObject: [NSNumber numberWithDouble:self.volValue] forKey: @"volValue"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[hhjvol class]]) {
    return NO;
  }
  hhjvol *otherMessage = other;
  return
      self.hasTime == otherMessage.hasTime &&
      (!self.hasTime || self.time == otherMessage.time) &&
      self.hasMa1Value == otherMessage.hasMa1Value &&
      (!self.hasMa1Value || self.ma1Value == otherMessage.ma1Value) &&
      self.hasMa2Value == otherMessage.hasMa2Value &&
      (!self.hasMa2Value || self.ma2Value == otherMessage.ma2Value) &&
      self.hasMa3Value == otherMessage.hasMa3Value &&
      (!self.hasMa3Value || self.ma3Value == otherMessage.ma3Value) &&
      self.hasXuniValue == otherMessage.hasXuniValue &&
      (!self.hasXuniValue || self.xuniValue == otherMessage.xuniValue) &&
      self.hasVolValue == otherMessage.hasVolValue &&
      (!self.hasVolValue || self.volValue == otherMessage.volValue) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.time] hash];
  }
  if (self.hasMa1Value) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.ma1Value] hash];
  }
  if (self.hasMa2Value) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.ma2Value] hash];
  }
  if (self.hasMa3Value) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.ma3Value] hash];
  }
  if (self.hasXuniValue) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.xuniValue] hash];
  }
  if (self.hasVolValue) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.volValue] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface hhjvolBuilder()
@property (strong) hhjvol* resultHhjvol;
@end

@implementation hhjvolBuilder
@synthesize resultHhjvol;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultHhjvol = [[hhjvol alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultHhjvol;
}
- (hhjvolBuilder*) clear {
  self.resultHhjvol = [[hhjvol alloc] init];
  return self;
}
- (hhjvolBuilder*) clone {
  return [hhjvol builderWithPrototype:resultHhjvol];
}
- (hhjvol*) defaultInstance {
  return [hhjvol defaultInstance];
}
- (hhjvol*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (hhjvol*) buildPartial {
  hhjvol* returnMe = resultHhjvol;
  self.resultHhjvol = nil;
  return returnMe;
}
- (hhjvolBuilder*) mergeFrom:(hhjvol*) other {
  if (other == [hhjvol defaultInstance]) {
    return self;
  }
  if (other.hasTime) {
    [self setTime:other.time];
  }
  if (other.hasMa1Value) {
    [self setMa1Value:other.ma1Value];
  }
  if (other.hasMa2Value) {
    [self setMa2Value:other.ma2Value];
  }
  if (other.hasMa3Value) {
    [self setMa3Value:other.ma3Value];
  }
  if (other.hasXuniValue) {
    [self setXuniValue:other.xuniValue];
  }
  if (other.hasVolValue) {
    [self setVolValue:other.volValue];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (hhjvolBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (hhjvolBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setTime:[input readUInt32]];
        break;
      }
      case 17: {
        [self setMa1Value:[input readDouble]];
        break;
      }
      case 25: {
        [self setMa2Value:[input readDouble]];
        break;
      }
      case 33: {
        [self setMa3Value:[input readDouble]];
        break;
      }
      case 41: {
        [self setXuniValue:[input readDouble]];
        break;
      }
      case 49: {
        [self setVolValue:[input readDouble]];
        break;
      }
    }
  }
}
- (BOOL) hasTime {
  return resultHhjvol.hasTime;
}
- (UInt32) time {
  return resultHhjvol.time;
}
- (hhjvolBuilder*) setTime:(UInt32) value {
  resultHhjvol.hasTime = YES;
  resultHhjvol.time = value;
  return self;
}
- (hhjvolBuilder*) clearTime {
  resultHhjvol.hasTime = NO;
  resultHhjvol.time = 0;
  return self;
}
- (BOOL) hasMa1Value {
  return resultHhjvol.hasMa1Value;
}
- (Float64) ma1Value {
  return resultHhjvol.ma1Value;
}
- (hhjvolBuilder*) setMa1Value:(Float64) value {
  resultHhjvol.hasMa1Value = YES;
  resultHhjvol.ma1Value = value;
  return self;
}
- (hhjvolBuilder*) clearMa1Value {
  resultHhjvol.hasMa1Value = NO;
  resultHhjvol.ma1Value = 0;
  return self;
}
- (BOOL) hasMa2Value {
  return resultHhjvol.hasMa2Value;
}
- (Float64) ma2Value {
  return resultHhjvol.ma2Value;
}
- (hhjvolBuilder*) setMa2Value:(Float64) value {
  resultHhjvol.hasMa2Value = YES;
  resultHhjvol.ma2Value = value;
  return self;
}
- (hhjvolBuilder*) clearMa2Value {
  resultHhjvol.hasMa2Value = NO;
  resultHhjvol.ma2Value = 0;
  return self;
}
- (BOOL) hasMa3Value {
  return resultHhjvol.hasMa3Value;
}
- (Float64) ma3Value {
  return resultHhjvol.ma3Value;
}
- (hhjvolBuilder*) setMa3Value:(Float64) value {
  resultHhjvol.hasMa3Value = YES;
  resultHhjvol.ma3Value = value;
  return self;
}
- (hhjvolBuilder*) clearMa3Value {
  resultHhjvol.hasMa3Value = NO;
  resultHhjvol.ma3Value = 0;
  return self;
}
- (BOOL) hasXuniValue {
  return resultHhjvol.hasXuniValue;
}
- (Float64) xuniValue {
  return resultHhjvol.xuniValue;
}
- (hhjvolBuilder*) setXuniValue:(Float64) value {
  resultHhjvol.hasXuniValue = YES;
  resultHhjvol.xuniValue = value;
  return self;
}
- (hhjvolBuilder*) clearXuniValue {
  resultHhjvol.hasXuniValue = NO;
  resultHhjvol.xuniValue = 0;
  return self;
}
- (BOOL) hasVolValue {
  return resultHhjvol.hasVolValue;
}
- (Float64) volValue {
  return resultHhjvol.volValue;
}
- (hhjvolBuilder*) setVolValue:(Float64) value {
  resultHhjvol.hasVolValue = YES;
  resultHhjvol.volValue = value;
  return self;
}
- (hhjvolBuilder*) clearVolValue {
  resultHhjvol.hasVolValue = NO;
  resultHhjvol.volValue = 0;
  return self;
}
@end

@interface hhjvol_array ()
@property (strong) NSMutableArray * indexDataArray;
@end

@implementation hhjvol_array

@synthesize indexDataArray;
@dynamic indexData;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static hhjvol_array* defaulthhjvol_arrayInstance = nil;
+ (void) initialize {
  if (self == [hhjvol_array class]) {
    defaulthhjvol_arrayInstance = [[hhjvol_array alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaulthhjvol_arrayInstance;
}
- (instancetype) defaultInstance {
  return defaulthhjvol_arrayInstance;
}
- (NSArray *)indexData {
  return indexDataArray;
}
- (hhjvol*)indexDataAtIndex:(NSUInteger)index {
  return [indexDataArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  __block BOOL isInitindexData = YES;
   [self.indexData enumerateObjectsUsingBlock:^(hhjvol *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitindexData = NO;
      *stop = YES;
    }
  }];
  if (!isInitindexData) return isInitindexData;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.indexDataArray enumerateObjectsUsingBlock:^(hhjvol *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.indexDataArray enumerateObjectsUsingBlock:^(hhjvol *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (hhjvol_array*) parseFromData:(NSData*) data {
  return (hhjvol_array*)[[[hhjvol_array builder] mergeFromData:data] build];
}
+ (hhjvol_array*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (hhjvol_array*)[[[hhjvol_array builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (hhjvol_array*) parseFromInputStream:(NSInputStream*) input {
  return (hhjvol_array*)[[[hhjvol_array builder] mergeFromInputStream:input] build];
}
+ (hhjvol_array*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (hhjvol_array*)[[[hhjvol_array builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (hhjvol_array*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (hhjvol_array*)[[[hhjvol_array builder] mergeFromCodedInputStream:input] build];
}
+ (hhjvol_array*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (hhjvol_array*)[[[hhjvol_array builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (hhjvol_arrayBuilder*) builder {
  return [[hhjvol_arrayBuilder alloc] init];
}
+ (hhjvol_arrayBuilder*) builderWithPrototype:(hhjvol_array*) prototype {
  return [[hhjvol_array builder] mergeFrom:prototype];
}
- (hhjvol_arrayBuilder*) builder {
  return [hhjvol_array builder];
}
- (hhjvol_arrayBuilder*) toBuilder {
  return [hhjvol_array builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.indexDataArray enumerateObjectsUsingBlock:^(hhjvol *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"indexData"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  for (hhjvol* element in self.indexDataArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"indexData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[hhjvol_array class]]) {
    return NO;
  }
  hhjvol_array *otherMessage = other;
  return
      [self.indexDataArray isEqualToArray:otherMessage.indexDataArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.indexDataArray enumerateObjectsUsingBlock:^(hhjvol *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface hhjvol_arrayBuilder()
@property (strong) hhjvol_array* resultHhjvolArray;
@end

@implementation hhjvol_arrayBuilder
@synthesize resultHhjvolArray;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultHhjvolArray = [[hhjvol_array alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultHhjvolArray;
}
- (hhjvol_arrayBuilder*) clear {
  self.resultHhjvolArray = [[hhjvol_array alloc] init];
  return self;
}
- (hhjvol_arrayBuilder*) clone {
  return [hhjvol_array builderWithPrototype:resultHhjvolArray];
}
- (hhjvol_array*) defaultInstance {
  return [hhjvol_array defaultInstance];
}
- (hhjvol_array*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (hhjvol_array*) buildPartial {
  hhjvol_array* returnMe = resultHhjvolArray;
  self.resultHhjvolArray = nil;
  return returnMe;
}
- (hhjvol_arrayBuilder*) mergeFrom:(hhjvol_array*) other {
  if (other == [hhjvol_array defaultInstance]) {
    return self;
  }
  if (other.indexDataArray.count > 0) {
    if (resultHhjvolArray.indexDataArray == nil) {
      resultHhjvolArray.indexDataArray = [[NSMutableArray alloc] initWithArray:other.indexDataArray];
    } else {
      [resultHhjvolArray.indexDataArray addObjectsFromArray:other.indexDataArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (hhjvol_arrayBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (hhjvol_arrayBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        hhjvolBuilder* subBuilder = [hhjvol builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addIndexData:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)indexData {
  return resultHhjvolArray.indexDataArray;
}
- (hhjvol*)indexDataAtIndex:(NSUInteger)index {
  return [resultHhjvolArray indexDataAtIndex:index];
}
- (hhjvol_arrayBuilder *)addIndexData:(hhjvol*)value {
  if (resultHhjvolArray.indexDataArray == nil) {
    resultHhjvolArray.indexDataArray = [[NSMutableArray alloc]init];
  }
  [resultHhjvolArray.indexDataArray addObject:value];
  return self;
}
- (hhjvol_arrayBuilder *)setIndexDataArray:(NSArray *)array {
  resultHhjvolArray.indexDataArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (hhjvol_arrayBuilder *)clearIndexData {
  resultHhjvolArray.indexDataArray = nil;
  return self;
}
@end

@interface xdjw ()
@property UInt32 time;
@property Float64 pjgj;
@property Float64 hs300;
@end

@implementation xdjw

- (BOOL) hasTime {
  return !!hasTime_;
}
- (void) setHasTime:(BOOL) _value_ {
  hasTime_ = !!_value_;
}
@synthesize time;
- (BOOL) hasPjgj {
  return !!hasPjgj_;
}
- (void) setHasPjgj:(BOOL) _value_ {
  hasPjgj_ = !!_value_;
}
@synthesize pjgj;
- (BOOL) hasHs300 {
  return !!hasHs300_;
}
- (void) setHasHs300:(BOOL) _value_ {
  hasHs300_ = !!_value_;
}
@synthesize hs300;
- (instancetype) init {
  if ((self = [super init])) {
    self.time = 0;
    self.pjgj = 0;
    self.hs300 = 0;
  }
  return self;
}
static xdjw* defaultxdjwInstance = nil;
+ (void) initialize {
  if (self == [xdjw class]) {
    defaultxdjwInstance = [[xdjw alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultxdjwInstance;
}
- (instancetype) defaultInstance {
  return defaultxdjwInstance;
}
- (BOOL) isInitialized {
  if (!self.hasTime) {
    return NO;
  }
  if (!self.hasPjgj) {
    return NO;
  }
  if (!self.hasHs300) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTime) {
    [output writeUInt32:1 value:self.time];
  }
  if (self.hasPjgj) {
    [output writeDouble:2 value:self.pjgj];
  }
  if (self.hasHs300) {
    [output writeDouble:3 value:self.hs300];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasTime) {
    size_ += computeUInt32Size(1, self.time);
  }
  if (self.hasPjgj) {
    size_ += computeDoubleSize(2, self.pjgj);
  }
  if (self.hasHs300) {
    size_ += computeDoubleSize(3, self.hs300);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (xdjw*) parseFromData:(NSData*) data {
  return (xdjw*)[[[xdjw builder] mergeFromData:data] build];
}
+ (xdjw*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (xdjw*)[[[xdjw builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (xdjw*) parseFromInputStream:(NSInputStream*) input {
  return (xdjw*)[[[xdjw builder] mergeFromInputStream:input] build];
}
+ (xdjw*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (xdjw*)[[[xdjw builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (xdjw*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (xdjw*)[[[xdjw builder] mergeFromCodedInputStream:input] build];
}
+ (xdjw*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (xdjw*)[[[xdjw builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (xdjwBuilder*) builder {
  return [[xdjwBuilder alloc] init];
}
+ (xdjwBuilder*) builderWithPrototype:(xdjw*) prototype {
  return [[xdjw builder] mergeFrom:prototype];
}
- (xdjwBuilder*) builder {
  return [xdjw builder];
}
- (xdjwBuilder*) toBuilder {
  return [xdjw builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"time", [NSNumber numberWithInteger:self.time]];
  }
  if (self.hasPjgj) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pjgj", [NSNumber numberWithDouble:self.pjgj]];
  }
  if (self.hasHs300) {
    [output appendFormat:@"%@%@: %@\n", indent, @"hs300", [NSNumber numberWithDouble:self.hs300]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasTime) {
    [dictionary setObject: [NSNumber numberWithInteger:self.time] forKey: @"time"];
  }
  if (self.hasPjgj) {
    [dictionary setObject: [NSNumber numberWithDouble:self.pjgj] forKey: @"pjgj"];
  }
  if (self.hasHs300) {
    [dictionary setObject: [NSNumber numberWithDouble:self.hs300] forKey: @"hs300"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[xdjw class]]) {
    return NO;
  }
  xdjw *otherMessage = other;
  return
      self.hasTime == otherMessage.hasTime &&
      (!self.hasTime || self.time == otherMessage.time) &&
      self.hasPjgj == otherMessage.hasPjgj &&
      (!self.hasPjgj || self.pjgj == otherMessage.pjgj) &&
      self.hasHs300 == otherMessage.hasHs300 &&
      (!self.hasHs300 || self.hs300 == otherMessage.hs300) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.time] hash];
  }
  if (self.hasPjgj) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.pjgj] hash];
  }
  if (self.hasHs300) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.hs300] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface xdjwBuilder()
@property (strong) xdjw* resultXdjw;
@end

@implementation xdjwBuilder
@synthesize resultXdjw;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultXdjw = [[xdjw alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultXdjw;
}
- (xdjwBuilder*) clear {
  self.resultXdjw = [[xdjw alloc] init];
  return self;
}
- (xdjwBuilder*) clone {
  return [xdjw builderWithPrototype:resultXdjw];
}
- (xdjw*) defaultInstance {
  return [xdjw defaultInstance];
}
- (xdjw*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (xdjw*) buildPartial {
  xdjw* returnMe = resultXdjw;
  self.resultXdjw = nil;
  return returnMe;
}
- (xdjwBuilder*) mergeFrom:(xdjw*) other {
  if (other == [xdjw defaultInstance]) {
    return self;
  }
  if (other.hasTime) {
    [self setTime:other.time];
  }
  if (other.hasPjgj) {
    [self setPjgj:other.pjgj];
  }
  if (other.hasHs300) {
    [self setHs300:other.hs300];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (xdjwBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (xdjwBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setTime:[input readUInt32]];
        break;
      }
      case 17: {
        [self setPjgj:[input readDouble]];
        break;
      }
      case 25: {
        [self setHs300:[input readDouble]];
        break;
      }
    }
  }
}
- (BOOL) hasTime {
  return resultXdjw.hasTime;
}
- (UInt32) time {
  return resultXdjw.time;
}
- (xdjwBuilder*) setTime:(UInt32) value {
  resultXdjw.hasTime = YES;
  resultXdjw.time = value;
  return self;
}
- (xdjwBuilder*) clearTime {
  resultXdjw.hasTime = NO;
  resultXdjw.time = 0;
  return self;
}
- (BOOL) hasPjgj {
  return resultXdjw.hasPjgj;
}
- (Float64) pjgj {
  return resultXdjw.pjgj;
}
- (xdjwBuilder*) setPjgj:(Float64) value {
  resultXdjw.hasPjgj = YES;
  resultXdjw.pjgj = value;
  return self;
}
- (xdjwBuilder*) clearPjgj {
  resultXdjw.hasPjgj = NO;
  resultXdjw.pjgj = 0;
  return self;
}
- (BOOL) hasHs300 {
  return resultXdjw.hasHs300;
}
- (Float64) hs300 {
  return resultXdjw.hs300;
}
- (xdjwBuilder*) setHs300:(Float64) value {
  resultXdjw.hasHs300 = YES;
  resultXdjw.hs300 = value;
  return self;
}
- (xdjwBuilder*) clearHs300 {
  resultXdjw.hasHs300 = NO;
  resultXdjw.hs300 = 0;
  return self;
}
@end

@interface xdjw_array ()
@property (strong) NSMutableArray * indexDataArray;
@end

@implementation xdjw_array

@synthesize indexDataArray;
@dynamic indexData;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static xdjw_array* defaultxdjw_arrayInstance = nil;
+ (void) initialize {
  if (self == [xdjw_array class]) {
    defaultxdjw_arrayInstance = [[xdjw_array alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultxdjw_arrayInstance;
}
- (instancetype) defaultInstance {
  return defaultxdjw_arrayInstance;
}
- (NSArray *)indexData {
  return indexDataArray;
}
- (xdjw*)indexDataAtIndex:(NSUInteger)index {
  return [indexDataArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  __block BOOL isInitindexData = YES;
   [self.indexData enumerateObjectsUsingBlock:^(xdjw *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitindexData = NO;
      *stop = YES;
    }
  }];
  if (!isInitindexData) return isInitindexData;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.indexDataArray enumerateObjectsUsingBlock:^(xdjw *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.indexDataArray enumerateObjectsUsingBlock:^(xdjw *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (xdjw_array*) parseFromData:(NSData*) data {
  return (xdjw_array*)[[[xdjw_array builder] mergeFromData:data] build];
}
+ (xdjw_array*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (xdjw_array*)[[[xdjw_array builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (xdjw_array*) parseFromInputStream:(NSInputStream*) input {
  return (xdjw_array*)[[[xdjw_array builder] mergeFromInputStream:input] build];
}
+ (xdjw_array*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (xdjw_array*)[[[xdjw_array builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (xdjw_array*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (xdjw_array*)[[[xdjw_array builder] mergeFromCodedInputStream:input] build];
}
+ (xdjw_array*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (xdjw_array*)[[[xdjw_array builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (xdjw_arrayBuilder*) builder {
  return [[xdjw_arrayBuilder alloc] init];
}
+ (xdjw_arrayBuilder*) builderWithPrototype:(xdjw_array*) prototype {
  return [[xdjw_array builder] mergeFrom:prototype];
}
- (xdjw_arrayBuilder*) builder {
  return [xdjw_array builder];
}
- (xdjw_arrayBuilder*) toBuilder {
  return [xdjw_array builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.indexDataArray enumerateObjectsUsingBlock:^(xdjw *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"indexData"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  for (xdjw* element in self.indexDataArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"indexData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[xdjw_array class]]) {
    return NO;
  }
  xdjw_array *otherMessage = other;
  return
      [self.indexDataArray isEqualToArray:otherMessage.indexDataArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.indexDataArray enumerateObjectsUsingBlock:^(xdjw *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface xdjw_arrayBuilder()
@property (strong) xdjw_array* resultXdjwArray;
@end

@implementation xdjw_arrayBuilder
@synthesize resultXdjwArray;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultXdjwArray = [[xdjw_array alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultXdjwArray;
}
- (xdjw_arrayBuilder*) clear {
  self.resultXdjwArray = [[xdjw_array alloc] init];
  return self;
}
- (xdjw_arrayBuilder*) clone {
  return [xdjw_array builderWithPrototype:resultXdjwArray];
}
- (xdjw_array*) defaultInstance {
  return [xdjw_array defaultInstance];
}
- (xdjw_array*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (xdjw_array*) buildPartial {
  xdjw_array* returnMe = resultXdjwArray;
  self.resultXdjwArray = nil;
  return returnMe;
}
- (xdjw_arrayBuilder*) mergeFrom:(xdjw_array*) other {
  if (other == [xdjw_array defaultInstance]) {
    return self;
  }
  if (other.indexDataArray.count > 0) {
    if (resultXdjwArray.indexDataArray == nil) {
      resultXdjwArray.indexDataArray = [[NSMutableArray alloc] initWithArray:other.indexDataArray];
    } else {
      [resultXdjwArray.indexDataArray addObjectsFromArray:other.indexDataArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (xdjw_arrayBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (xdjw_arrayBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        xdjwBuilder* subBuilder = [xdjw builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addIndexData:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)indexData {
  return resultXdjwArray.indexDataArray;
}
- (xdjw*)indexDataAtIndex:(NSUInteger)index {
  return [resultXdjwArray indexDataAtIndex:index];
}
- (xdjw_arrayBuilder *)addIndexData:(xdjw*)value {
  if (resultXdjwArray.indexDataArray == nil) {
    resultXdjwArray.indexDataArray = [[NSMutableArray alloc]init];
  }
  [resultXdjwArray.indexDataArray addObject:value];
  return self;
}
- (xdjw_arrayBuilder *)setIndexDataArray:(NSArray *)array {
  resultXdjwArray.indexDataArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (xdjw_arrayBuilder *)clearIndexData {
  resultXdjwArray.indexDataArray = nil;
  return self;
}
@end

@interface zcc ()
@property UInt32 time;
@property Float64 keepSell;
@property Float64 keepBuy;
@end

@implementation zcc

- (BOOL) hasTime {
  return !!hasTime_;
}
- (void) setHasTime:(BOOL) _value_ {
  hasTime_ = !!_value_;
}
@synthesize time;
- (BOOL) hasKeepSell {
  return !!hasKeepSell_;
}
- (void) setHasKeepSell:(BOOL) _value_ {
  hasKeepSell_ = !!_value_;
}
@synthesize keepSell;
- (BOOL) hasKeepBuy {
  return !!hasKeepBuy_;
}
- (void) setHasKeepBuy:(BOOL) _value_ {
  hasKeepBuy_ = !!_value_;
}
@synthesize keepBuy;
- (instancetype) init {
  if ((self = [super init])) {
    self.time = 0;
    self.keepSell = 0;
    self.keepBuy = 0;
  }
  return self;
}
static zcc* defaultzccInstance = nil;
+ (void) initialize {
  if (self == [zcc class]) {
    defaultzccInstance = [[zcc alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultzccInstance;
}
- (instancetype) defaultInstance {
  return defaultzccInstance;
}
- (BOOL) isInitialized {
  if (!self.hasTime) {
    return NO;
  }
  if (!self.hasKeepSell) {
    return NO;
  }
  if (!self.hasKeepBuy) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTime) {
    [output writeUInt32:1 value:self.time];
  }
  if (self.hasKeepSell) {
    [output writeDouble:2 value:self.keepSell];
  }
  if (self.hasKeepBuy) {
    [output writeDouble:3 value:self.keepBuy];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasTime) {
    size_ += computeUInt32Size(1, self.time);
  }
  if (self.hasKeepSell) {
    size_ += computeDoubleSize(2, self.keepSell);
  }
  if (self.hasKeepBuy) {
    size_ += computeDoubleSize(3, self.keepBuy);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (zcc*) parseFromData:(NSData*) data {
  return (zcc*)[[[zcc builder] mergeFromData:data] build];
}
+ (zcc*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (zcc*)[[[zcc builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (zcc*) parseFromInputStream:(NSInputStream*) input {
  return (zcc*)[[[zcc builder] mergeFromInputStream:input] build];
}
+ (zcc*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (zcc*)[[[zcc builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (zcc*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (zcc*)[[[zcc builder] mergeFromCodedInputStream:input] build];
}
+ (zcc*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (zcc*)[[[zcc builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (zccBuilder*) builder {
  return [[zccBuilder alloc] init];
}
+ (zccBuilder*) builderWithPrototype:(zcc*) prototype {
  return [[zcc builder] mergeFrom:prototype];
}
- (zccBuilder*) builder {
  return [zcc builder];
}
- (zccBuilder*) toBuilder {
  return [zcc builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"time", [NSNumber numberWithInteger:self.time]];
  }
  if (self.hasKeepSell) {
    [output appendFormat:@"%@%@: %@\n", indent, @"keepSell", [NSNumber numberWithDouble:self.keepSell]];
  }
  if (self.hasKeepBuy) {
    [output appendFormat:@"%@%@: %@\n", indent, @"keepBuy", [NSNumber numberWithDouble:self.keepBuy]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasTime) {
    [dictionary setObject: [NSNumber numberWithInteger:self.time] forKey: @"time"];
  }
  if (self.hasKeepSell) {
    [dictionary setObject: [NSNumber numberWithDouble:self.keepSell] forKey: @"keepSell"];
  }
  if (self.hasKeepBuy) {
    [dictionary setObject: [NSNumber numberWithDouble:self.keepBuy] forKey: @"keepBuy"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[zcc class]]) {
    return NO;
  }
  zcc *otherMessage = other;
  return
      self.hasTime == otherMessage.hasTime &&
      (!self.hasTime || self.time == otherMessage.time) &&
      self.hasKeepSell == otherMessage.hasKeepSell &&
      (!self.hasKeepSell || self.keepSell == otherMessage.keepSell) &&
      self.hasKeepBuy == otherMessage.hasKeepBuy &&
      (!self.hasKeepBuy || self.keepBuy == otherMessage.keepBuy) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.time] hash];
  }
  if (self.hasKeepSell) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.keepSell] hash];
  }
  if (self.hasKeepBuy) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.keepBuy] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface zccBuilder()
@property (strong) zcc* resultZcc;
@end

@implementation zccBuilder
@synthesize resultZcc;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultZcc = [[zcc alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultZcc;
}
- (zccBuilder*) clear {
  self.resultZcc = [[zcc alloc] init];
  return self;
}
- (zccBuilder*) clone {
  return [zcc builderWithPrototype:resultZcc];
}
- (zcc*) defaultInstance {
  return [zcc defaultInstance];
}
- (zcc*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (zcc*) buildPartial {
  zcc* returnMe = resultZcc;
  self.resultZcc = nil;
  return returnMe;
}
- (zccBuilder*) mergeFrom:(zcc*) other {
  if (other == [zcc defaultInstance]) {
    return self;
  }
  if (other.hasTime) {
    [self setTime:other.time];
  }
  if (other.hasKeepSell) {
    [self setKeepSell:other.keepSell];
  }
  if (other.hasKeepBuy) {
    [self setKeepBuy:other.keepBuy];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (zccBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (zccBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setTime:[input readUInt32]];
        break;
      }
      case 17: {
        [self setKeepSell:[input readDouble]];
        break;
      }
      case 25: {
        [self setKeepBuy:[input readDouble]];
        break;
      }
    }
  }
}
- (BOOL) hasTime {
  return resultZcc.hasTime;
}
- (UInt32) time {
  return resultZcc.time;
}
- (zccBuilder*) setTime:(UInt32) value {
  resultZcc.hasTime = YES;
  resultZcc.time = value;
  return self;
}
- (zccBuilder*) clearTime {
  resultZcc.hasTime = NO;
  resultZcc.time = 0;
  return self;
}
- (BOOL) hasKeepSell {
  return resultZcc.hasKeepSell;
}
- (Float64) keepSell {
  return resultZcc.keepSell;
}
- (zccBuilder*) setKeepSell:(Float64) value {
  resultZcc.hasKeepSell = YES;
  resultZcc.keepSell = value;
  return self;
}
- (zccBuilder*) clearKeepSell {
  resultZcc.hasKeepSell = NO;
  resultZcc.keepSell = 0;
  return self;
}
- (BOOL) hasKeepBuy {
  return resultZcc.hasKeepBuy;
}
- (Float64) keepBuy {
  return resultZcc.keepBuy;
}
- (zccBuilder*) setKeepBuy:(Float64) value {
  resultZcc.hasKeepBuy = YES;
  resultZcc.keepBuy = value;
  return self;
}
- (zccBuilder*) clearKeepBuy {
  resultZcc.hasKeepBuy = NO;
  resultZcc.keepBuy = 0;
  return self;
}
@end

@interface zcc_array ()
@property (strong) NSMutableArray * indexDataArray;
@end

@implementation zcc_array

@synthesize indexDataArray;
@dynamic indexData;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static zcc_array* defaultzcc_arrayInstance = nil;
+ (void) initialize {
  if (self == [zcc_array class]) {
    defaultzcc_arrayInstance = [[zcc_array alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultzcc_arrayInstance;
}
- (instancetype) defaultInstance {
  return defaultzcc_arrayInstance;
}
- (NSArray *)indexData {
  return indexDataArray;
}
- (zcc*)indexDataAtIndex:(NSUInteger)index {
  return [indexDataArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  __block BOOL isInitindexData = YES;
   [self.indexData enumerateObjectsUsingBlock:^(zcc *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitindexData = NO;
      *stop = YES;
    }
  }];
  if (!isInitindexData) return isInitindexData;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.indexDataArray enumerateObjectsUsingBlock:^(zcc *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.indexDataArray enumerateObjectsUsingBlock:^(zcc *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (zcc_array*) parseFromData:(NSData*) data {
  return (zcc_array*)[[[zcc_array builder] mergeFromData:data] build];
}
+ (zcc_array*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (zcc_array*)[[[zcc_array builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (zcc_array*) parseFromInputStream:(NSInputStream*) input {
  return (zcc_array*)[[[zcc_array builder] mergeFromInputStream:input] build];
}
+ (zcc_array*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (zcc_array*)[[[zcc_array builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (zcc_array*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (zcc_array*)[[[zcc_array builder] mergeFromCodedInputStream:input] build];
}
+ (zcc_array*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (zcc_array*)[[[zcc_array builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (zcc_arrayBuilder*) builder {
  return [[zcc_arrayBuilder alloc] init];
}
+ (zcc_arrayBuilder*) builderWithPrototype:(zcc_array*) prototype {
  return [[zcc_array builder] mergeFrom:prototype];
}
- (zcc_arrayBuilder*) builder {
  return [zcc_array builder];
}
- (zcc_arrayBuilder*) toBuilder {
  return [zcc_array builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.indexDataArray enumerateObjectsUsingBlock:^(zcc *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"indexData"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  for (zcc* element in self.indexDataArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"indexData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[zcc_array class]]) {
    return NO;
  }
  zcc_array *otherMessage = other;
  return
      [self.indexDataArray isEqualToArray:otherMessage.indexDataArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.indexDataArray enumerateObjectsUsingBlock:^(zcc *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface zcc_arrayBuilder()
@property (strong) zcc_array* resultZccArray;
@end

@implementation zcc_arrayBuilder
@synthesize resultZccArray;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultZccArray = [[zcc_array alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultZccArray;
}
- (zcc_arrayBuilder*) clear {
  self.resultZccArray = [[zcc_array alloc] init];
  return self;
}
- (zcc_arrayBuilder*) clone {
  return [zcc_array builderWithPrototype:resultZccArray];
}
- (zcc_array*) defaultInstance {
  return [zcc_array defaultInstance];
}
- (zcc_array*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (zcc_array*) buildPartial {
  zcc_array* returnMe = resultZccArray;
  self.resultZccArray = nil;
  return returnMe;
}
- (zcc_arrayBuilder*) mergeFrom:(zcc_array*) other {
  if (other == [zcc_array defaultInstance]) {
    return self;
  }
  if (other.indexDataArray.count > 0) {
    if (resultZccArray.indexDataArray == nil) {
      resultZccArray.indexDataArray = [[NSMutableArray alloc] initWithArray:other.indexDataArray];
    } else {
      [resultZccArray.indexDataArray addObjectsFromArray:other.indexDataArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (zcc_arrayBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (zcc_arrayBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        zccBuilder* subBuilder = [zcc builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addIndexData:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)indexData {
  return resultZccArray.indexDataArray;
}
- (zcc*)indexDataAtIndex:(NSUInteger)index {
  return [resultZccArray indexDataAtIndex:index];
}
- (zcc_arrayBuilder *)addIndexData:(zcc*)value {
  if (resultZccArray.indexDataArray == nil) {
    resultZccArray.indexDataArray = [[NSMutableArray alloc]init];
  }
  [resultZccArray.indexDataArray addObject:value];
  return self;
}
- (zcc_arrayBuilder *)setIndexDataArray:(NSArray *)array {
  resultZccArray.indexDataArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (zcc_arrayBuilder *)clearIndexData {
  resultZccArray.indexDataArray = nil;
  return self;
}
@end

@interface hyxd ()
@property UInt32 time;
@property UInt32 mx;
@property UInt32 nx;
@property UInt32 ssrgl;
@property UInt32 j;
@end

@implementation hyxd

- (BOOL) hasTime {
  return !!hasTime_;
}
- (void) setHasTime:(BOOL) _value_ {
  hasTime_ = !!_value_;
}
@synthesize time;
- (BOOL) hasMx {
  return !!hasMx_;
}
- (void) setHasMx:(BOOL) _value_ {
  hasMx_ = !!_value_;
}
@synthesize mx;
- (BOOL) hasNx {
  return !!hasNx_;
}
- (void) setHasNx:(BOOL) _value_ {
  hasNx_ = !!_value_;
}
@synthesize nx;
- (BOOL) hasSsrgl {
  return !!hasSsrgl_;
}
- (void) setHasSsrgl:(BOOL) _value_ {
  hasSsrgl_ = !!_value_;
}
@synthesize ssrgl;
- (BOOL) hasJ {
  return !!hasJ_;
}
- (void) setHasJ:(BOOL) _value_ {
  hasJ_ = !!_value_;
}
@synthesize j;
- (instancetype) init {
  if ((self = [super init])) {
    self.time = 0;
    self.mx = 0;
    self.nx = 0;
    self.ssrgl = 0;
    self.j = 0;
  }
  return self;
}
static hyxd* defaulthyxdInstance = nil;
+ (void) initialize {
  if (self == [hyxd class]) {
    defaulthyxdInstance = [[hyxd alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaulthyxdInstance;
}
- (instancetype) defaultInstance {
  return defaulthyxdInstance;
}
- (BOOL) isInitialized {
  if (!self.hasTime) {
    return NO;
  }
  if (!self.hasMx) {
    return NO;
  }
  if (!self.hasNx) {
    return NO;
  }
  if (!self.hasSsrgl) {
    return NO;
  }
  if (!self.hasJ) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTime) {
    [output writeUInt32:1 value:self.time];
  }
  if (self.hasMx) {
    [output writeUInt32:2 value:self.mx];
  }
  if (self.hasNx) {
    [output writeUInt32:3 value:self.nx];
  }
  if (self.hasSsrgl) {
    [output writeUInt32:4 value:self.ssrgl];
  }
  if (self.hasJ) {
    [output writeUInt32:5 value:self.j];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasTime) {
    size_ += computeUInt32Size(1, self.time);
  }
  if (self.hasMx) {
    size_ += computeUInt32Size(2, self.mx);
  }
  if (self.hasNx) {
    size_ += computeUInt32Size(3, self.nx);
  }
  if (self.hasSsrgl) {
    size_ += computeUInt32Size(4, self.ssrgl);
  }
  if (self.hasJ) {
    size_ += computeUInt32Size(5, self.j);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (hyxd*) parseFromData:(NSData*) data {
  return (hyxd*)[[[hyxd builder] mergeFromData:data] build];
}
+ (hyxd*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (hyxd*)[[[hyxd builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (hyxd*) parseFromInputStream:(NSInputStream*) input {
  return (hyxd*)[[[hyxd builder] mergeFromInputStream:input] build];
}
+ (hyxd*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (hyxd*)[[[hyxd builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (hyxd*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (hyxd*)[[[hyxd builder] mergeFromCodedInputStream:input] build];
}
+ (hyxd*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (hyxd*)[[[hyxd builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (hyxdBuilder*) builder {
  return [[hyxdBuilder alloc] init];
}
+ (hyxdBuilder*) builderWithPrototype:(hyxd*) prototype {
  return [[hyxd builder] mergeFrom:prototype];
}
- (hyxdBuilder*) builder {
  return [hyxd builder];
}
- (hyxdBuilder*) toBuilder {
  return [hyxd builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"time", [NSNumber numberWithInteger:self.time]];
  }
  if (self.hasMx) {
    [output appendFormat:@"%@%@: %@\n", indent, @"mx", [NSNumber numberWithInteger:self.mx]];
  }
  if (self.hasNx) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nx", [NSNumber numberWithInteger:self.nx]];
  }
  if (self.hasSsrgl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ssrgl", [NSNumber numberWithInteger:self.ssrgl]];
  }
  if (self.hasJ) {
    [output appendFormat:@"%@%@: %@\n", indent, @"j", [NSNumber numberWithInteger:self.j]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasTime) {
    [dictionary setObject: [NSNumber numberWithInteger:self.time] forKey: @"time"];
  }
  if (self.hasMx) {
    [dictionary setObject: [NSNumber numberWithInteger:self.mx] forKey: @"mx"];
  }
  if (self.hasNx) {
    [dictionary setObject: [NSNumber numberWithInteger:self.nx] forKey: @"nx"];
  }
  if (self.hasSsrgl) {
    [dictionary setObject: [NSNumber numberWithInteger:self.ssrgl] forKey: @"ssrgl"];
  }
  if (self.hasJ) {
    [dictionary setObject: [NSNumber numberWithInteger:self.j] forKey: @"j"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[hyxd class]]) {
    return NO;
  }
  hyxd *otherMessage = other;
  return
      self.hasTime == otherMessage.hasTime &&
      (!self.hasTime || self.time == otherMessage.time) &&
      self.hasMx == otherMessage.hasMx &&
      (!self.hasMx || self.mx == otherMessage.mx) &&
      self.hasNx == otherMessage.hasNx &&
      (!self.hasNx || self.nx == otherMessage.nx) &&
      self.hasSsrgl == otherMessage.hasSsrgl &&
      (!self.hasSsrgl || self.ssrgl == otherMessage.ssrgl) &&
      self.hasJ == otherMessage.hasJ &&
      (!self.hasJ || self.j == otherMessage.j) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.time] hash];
  }
  if (self.hasMx) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.mx] hash];
  }
  if (self.hasNx) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.nx] hash];
  }
  if (self.hasSsrgl) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.ssrgl] hash];
  }
  if (self.hasJ) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.j] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface hyxdBuilder()
@property (strong) hyxd* resultHyxd;
@end

@implementation hyxdBuilder
@synthesize resultHyxd;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultHyxd = [[hyxd alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultHyxd;
}
- (hyxdBuilder*) clear {
  self.resultHyxd = [[hyxd alloc] init];
  return self;
}
- (hyxdBuilder*) clone {
  return [hyxd builderWithPrototype:resultHyxd];
}
- (hyxd*) defaultInstance {
  return [hyxd defaultInstance];
}
- (hyxd*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (hyxd*) buildPartial {
  hyxd* returnMe = resultHyxd;
  self.resultHyxd = nil;
  return returnMe;
}
- (hyxdBuilder*) mergeFrom:(hyxd*) other {
  if (other == [hyxd defaultInstance]) {
    return self;
  }
  if (other.hasTime) {
    [self setTime:other.time];
  }
  if (other.hasMx) {
    [self setMx:other.mx];
  }
  if (other.hasNx) {
    [self setNx:other.nx];
  }
  if (other.hasSsrgl) {
    [self setSsrgl:other.ssrgl];
  }
  if (other.hasJ) {
    [self setJ:other.j];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (hyxdBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (hyxdBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setTime:[input readUInt32]];
        break;
      }
      case 16: {
        [self setMx:[input readUInt32]];
        break;
      }
      case 24: {
        [self setNx:[input readUInt32]];
        break;
      }
      case 32: {
        [self setSsrgl:[input readUInt32]];
        break;
      }
      case 40: {
        [self setJ:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasTime {
  return resultHyxd.hasTime;
}
- (UInt32) time {
  return resultHyxd.time;
}
- (hyxdBuilder*) setTime:(UInt32) value {
  resultHyxd.hasTime = YES;
  resultHyxd.time = value;
  return self;
}
- (hyxdBuilder*) clearTime {
  resultHyxd.hasTime = NO;
  resultHyxd.time = 0;
  return self;
}
- (BOOL) hasMx {
  return resultHyxd.hasMx;
}
- (UInt32) mx {
  return resultHyxd.mx;
}
- (hyxdBuilder*) setMx:(UInt32) value {
  resultHyxd.hasMx = YES;
  resultHyxd.mx = value;
  return self;
}
- (hyxdBuilder*) clearMx {
  resultHyxd.hasMx = NO;
  resultHyxd.mx = 0;
  return self;
}
- (BOOL) hasNx {
  return resultHyxd.hasNx;
}
- (UInt32) nx {
  return resultHyxd.nx;
}
- (hyxdBuilder*) setNx:(UInt32) value {
  resultHyxd.hasNx = YES;
  resultHyxd.nx = value;
  return self;
}
- (hyxdBuilder*) clearNx {
  resultHyxd.hasNx = NO;
  resultHyxd.nx = 0;
  return self;
}
- (BOOL) hasSsrgl {
  return resultHyxd.hasSsrgl;
}
- (UInt32) ssrgl {
  return resultHyxd.ssrgl;
}
- (hyxdBuilder*) setSsrgl:(UInt32) value {
  resultHyxd.hasSsrgl = YES;
  resultHyxd.ssrgl = value;
  return self;
}
- (hyxdBuilder*) clearSsrgl {
  resultHyxd.hasSsrgl = NO;
  resultHyxd.ssrgl = 0;
  return self;
}
- (BOOL) hasJ {
  return resultHyxd.hasJ;
}
- (UInt32) j {
  return resultHyxd.j;
}
- (hyxdBuilder*) setJ:(UInt32) value {
  resultHyxd.hasJ = YES;
  resultHyxd.j = value;
  return self;
}
- (hyxdBuilder*) clearJ {
  resultHyxd.hasJ = NO;
  resultHyxd.j = 0;
  return self;
}
@end

@interface hyxd_array ()
@property (strong) NSMutableArray * indexDataArray;
@end

@implementation hyxd_array

@synthesize indexDataArray;
@dynamic indexData;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static hyxd_array* defaulthyxd_arrayInstance = nil;
+ (void) initialize {
  if (self == [hyxd_array class]) {
    defaulthyxd_arrayInstance = [[hyxd_array alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaulthyxd_arrayInstance;
}
- (instancetype) defaultInstance {
  return defaulthyxd_arrayInstance;
}
- (NSArray *)indexData {
  return indexDataArray;
}
- (hyxd*)indexDataAtIndex:(NSUInteger)index {
  return [indexDataArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  __block BOOL isInitindexData = YES;
   [self.indexData enumerateObjectsUsingBlock:^(hyxd *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitindexData = NO;
      *stop = YES;
    }
  }];
  if (!isInitindexData) return isInitindexData;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.indexDataArray enumerateObjectsUsingBlock:^(hyxd *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.indexDataArray enumerateObjectsUsingBlock:^(hyxd *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (hyxd_array*) parseFromData:(NSData*) data {
  return (hyxd_array*)[[[hyxd_array builder] mergeFromData:data] build];
}
+ (hyxd_array*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (hyxd_array*)[[[hyxd_array builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (hyxd_array*) parseFromInputStream:(NSInputStream*) input {
  return (hyxd_array*)[[[hyxd_array builder] mergeFromInputStream:input] build];
}
+ (hyxd_array*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (hyxd_array*)[[[hyxd_array builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (hyxd_array*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (hyxd_array*)[[[hyxd_array builder] mergeFromCodedInputStream:input] build];
}
+ (hyxd_array*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (hyxd_array*)[[[hyxd_array builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (hyxd_arrayBuilder*) builder {
  return [[hyxd_arrayBuilder alloc] init];
}
+ (hyxd_arrayBuilder*) builderWithPrototype:(hyxd_array*) prototype {
  return [[hyxd_array builder] mergeFrom:prototype];
}
- (hyxd_arrayBuilder*) builder {
  return [hyxd_array builder];
}
- (hyxd_arrayBuilder*) toBuilder {
  return [hyxd_array builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.indexDataArray enumerateObjectsUsingBlock:^(hyxd *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"indexData"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  for (hyxd* element in self.indexDataArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"indexData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[hyxd_array class]]) {
    return NO;
  }
  hyxd_array *otherMessage = other;
  return
      [self.indexDataArray isEqualToArray:otherMessage.indexDataArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.indexDataArray enumerateObjectsUsingBlock:^(hyxd *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface hyxd_arrayBuilder()
@property (strong) hyxd_array* resultHyxdArray;
@end

@implementation hyxd_arrayBuilder
@synthesize resultHyxdArray;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultHyxdArray = [[hyxd_array alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultHyxdArray;
}
- (hyxd_arrayBuilder*) clear {
  self.resultHyxdArray = [[hyxd_array alloc] init];
  return self;
}
- (hyxd_arrayBuilder*) clone {
  return [hyxd_array builderWithPrototype:resultHyxdArray];
}
- (hyxd_array*) defaultInstance {
  return [hyxd_array defaultInstance];
}
- (hyxd_array*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (hyxd_array*) buildPartial {
  hyxd_array* returnMe = resultHyxdArray;
  self.resultHyxdArray = nil;
  return returnMe;
}
- (hyxd_arrayBuilder*) mergeFrom:(hyxd_array*) other {
  if (other == [hyxd_array defaultInstance]) {
    return self;
  }
  if (other.indexDataArray.count > 0) {
    if (resultHyxdArray.indexDataArray == nil) {
      resultHyxdArray.indexDataArray = [[NSMutableArray alloc] initWithArray:other.indexDataArray];
    } else {
      [resultHyxdArray.indexDataArray addObjectsFromArray:other.indexDataArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (hyxd_arrayBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (hyxd_arrayBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        hyxdBuilder* subBuilder = [hyxd builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addIndexData:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)indexData {
  return resultHyxdArray.indexDataArray;
}
- (hyxd*)indexDataAtIndex:(NSUInteger)index {
  return [resultHyxdArray indexDataAtIndex:index];
}
- (hyxd_arrayBuilder *)addIndexData:(hyxd*)value {
  if (resultHyxdArray.indexDataArray == nil) {
    resultHyxdArray.indexDataArray = [[NSMutableArray alloc]init];
  }
  [resultHyxdArray.indexDataArray addObject:value];
  return self;
}
- (hyxd_arrayBuilder *)setIndexDataArray:(NSArray *)array {
  resultHyxdArray.indexDataArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (hyxd_arrayBuilder *)clearIndexData {
  resultHyxdArray.indexDataArray = nil;
  return self;
}
@end

@interface ma_param ()
@property (strong) PBAppendableArray * countArray;
@end

@implementation ma_param

@synthesize countArray;
@dynamic count;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static ma_param* defaultma_paramInstance = nil;
+ (void) initialize {
  if (self == [ma_param class]) {
    defaultma_paramInstance = [[ma_param alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultma_paramInstance;
}
- (instancetype) defaultInstance {
  return defaultma_paramInstance;
}
- (PBArray *)count {
  return countArray;
}
- (UInt32)countAtIndex:(NSUInteger)index {
  return [countArray uint32AtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  const NSUInteger countArrayCount = self.countArray.count;
  if (countArrayCount > 0) {
    const UInt32 *values = (const UInt32 *)self.countArray.data;
    for (NSUInteger i = 0; i < countArrayCount; ++i) {
      [output writeUInt32:1 value:values[i]];
    }
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.countArray.count;
    const UInt32 *values = (const UInt32 *)self.countArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ma_param*) parseFromData:(NSData*) data {
  return (ma_param*)[[[ma_param builder] mergeFromData:data] build];
}
+ (ma_param*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ma_param*)[[[ma_param builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ma_param*) parseFromInputStream:(NSInputStream*) input {
  return (ma_param*)[[[ma_param builder] mergeFromInputStream:input] build];
}
+ (ma_param*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ma_param*)[[[ma_param builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ma_param*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ma_param*)[[[ma_param builder] mergeFromCodedInputStream:input] build];
}
+ (ma_param*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ma_param*)[[[ma_param builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ma_paramBuilder*) builder {
  return [[ma_paramBuilder alloc] init];
}
+ (ma_paramBuilder*) builderWithPrototype:(ma_param*) prototype {
  return [[ma_param builder] mergeFrom:prototype];
}
- (ma_paramBuilder*) builder {
  return [ma_param builder];
}
- (ma_paramBuilder*) toBuilder {
  return [ma_param builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.countArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"count", obj];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  NSMutableArray * countArrayArray = [NSMutableArray new];
  NSUInteger countArrayCount=self.countArray.count;
  for(int i=0;i<countArrayCount;i++){
    [countArrayArray addObject: @([self.countArray uint32AtIndex:i])];
  }
  [dictionary setObject: countArrayArray forKey: @"count"];
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ma_param class]]) {
    return NO;
  }
  ma_param *otherMessage = other;
  return
      [self.countArray isEqualToArray:otherMessage.countArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.countArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ma_paramBuilder()
@property (strong) ma_param* resultMaParam;
@end

@implementation ma_paramBuilder
@synthesize resultMaParam;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultMaParam = [[ma_param alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultMaParam;
}
- (ma_paramBuilder*) clear {
  self.resultMaParam = [[ma_param alloc] init];
  return self;
}
- (ma_paramBuilder*) clone {
  return [ma_param builderWithPrototype:resultMaParam];
}
- (ma_param*) defaultInstance {
  return [ma_param defaultInstance];
}
- (ma_param*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ma_param*) buildPartial {
  ma_param* returnMe = resultMaParam;
  self.resultMaParam = nil;
  return returnMe;
}
- (ma_paramBuilder*) mergeFrom:(ma_param*) other {
  if (other == [ma_param defaultInstance]) {
    return self;
  }
  if (other.countArray.count > 0) {
    if (resultMaParam.countArray == nil) {
      resultMaParam.countArray = [other.countArray copy];
    } else {
      [resultMaParam.countArray appendArray:other.countArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ma_paramBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ma_paramBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self addCount:[input readUInt32]];
        break;
      }
    }
  }
}
- (PBAppendableArray *)count {
  return resultMaParam.countArray;
}
- (UInt32)countAtIndex:(NSUInteger)index {
  return [resultMaParam countAtIndex:index];
}
- (ma_paramBuilder *)addCount:(UInt32)value {
  if (resultMaParam.countArray == nil) {
    resultMaParam.countArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [resultMaParam.countArray addUint32:value];
  return self;
}
- (ma_paramBuilder *)setCountArray:(NSArray *)array {
  resultMaParam.countArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (ma_paramBuilder *)setCountValues:(const UInt32 *)values count:(NSUInteger)count {
  resultMaParam.countArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (ma_paramBuilder *)clearCount {
  resultMaParam.countArray = nil;
  return self;
}
@end

@interface ma ()
@property UInt32 time;
@property (strong) PBAppendableArray * maValueArray;
@end

@implementation ma

- (BOOL) hasTime {
  return !!hasTime_;
}
- (void) setHasTime:(BOOL) _value_ {
  hasTime_ = !!_value_;
}
@synthesize time;
@synthesize maValueArray;
@dynamic maValue;
- (instancetype) init {
  if ((self = [super init])) {
    self.time = 0;
  }
  return self;
}
static ma* defaultmaInstance = nil;
+ (void) initialize {
  if (self == [ma class]) {
    defaultmaInstance = [[ma alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultmaInstance;
}
- (instancetype) defaultInstance {
  return defaultmaInstance;
}
- (PBArray *)maValue {
  return maValueArray;
}
- (Float64)maValueAtIndex:(NSUInteger)index {
  return [maValueArray doubleAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasTime) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTime) {
    [output writeUInt32:1 value:self.time];
  }
  const NSUInteger maValueArrayCount = self.maValueArray.count;
  if (maValueArrayCount > 0) {
    const Float64 *values = (const Float64 *)self.maValueArray.data;
    for (NSUInteger i = 0; i < maValueArrayCount; ++i) {
      [output writeDouble:2 value:values[i]];
    }
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasTime) {
    size_ += computeUInt32Size(1, self.time);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.maValueArray.count;
    dataSize = (SInt32)(8 * count);
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ma*) parseFromData:(NSData*) data {
  return (ma*)[[[ma builder] mergeFromData:data] build];
}
+ (ma*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ma*)[[[ma builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ma*) parseFromInputStream:(NSInputStream*) input {
  return (ma*)[[[ma builder] mergeFromInputStream:input] build];
}
+ (ma*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ma*)[[[ma builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ma*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ma*)[[[ma builder] mergeFromCodedInputStream:input] build];
}
+ (ma*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ma*)[[[ma builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (maBuilder*) builder {
  return [[maBuilder alloc] init];
}
+ (maBuilder*) builderWithPrototype:(ma*) prototype {
  return [[ma builder] mergeFrom:prototype];
}
- (maBuilder*) builder {
  return [ma builder];
}
- (maBuilder*) toBuilder {
  return [ma builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"time", [NSNumber numberWithInteger:self.time]];
  }
  [self.maValueArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"maValue", obj];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasTime) {
    [dictionary setObject: [NSNumber numberWithInteger:self.time] forKey: @"time"];
  }
  NSMutableArray * maValueArrayArray = [NSMutableArray new];
  NSUInteger maValueArrayCount=self.maValueArray.count;
  for(int i=0;i<maValueArrayCount;i++){
    [maValueArrayArray addObject: @([self.maValueArray doubleAtIndex:i])];
  }
  [dictionary setObject: maValueArrayArray forKey: @"maValue"];
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ma class]]) {
    return NO;
  }
  ma *otherMessage = other;
  return
      self.hasTime == otherMessage.hasTime &&
      (!self.hasTime || self.time == otherMessage.time) &&
      [self.maValueArray isEqualToArray:otherMessage.maValueArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.time] hash];
  }
  [self.maValueArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface maBuilder()
@property (strong) ma* resultMa;
@end

@implementation maBuilder
@synthesize resultMa;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultMa = [[ma alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultMa;
}
- (maBuilder*) clear {
  self.resultMa = [[ma alloc] init];
  return self;
}
- (maBuilder*) clone {
  return [ma builderWithPrototype:resultMa];
}
- (ma*) defaultInstance {
  return [ma defaultInstance];
}
- (ma*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ma*) buildPartial {
  ma* returnMe = resultMa;
  self.resultMa = nil;
  return returnMe;
}
- (maBuilder*) mergeFrom:(ma*) other {
  if (other == [ma defaultInstance]) {
    return self;
  }
  if (other.hasTime) {
    [self setTime:other.time];
  }
  if (other.maValueArray.count > 0) {
    if (resultMa.maValueArray == nil) {
      resultMa.maValueArray = [other.maValueArray copy];
    } else {
      [resultMa.maValueArray appendArray:other.maValueArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (maBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (maBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setTime:[input readUInt32]];
        break;
      }
      case 17: {
        [self addMaValue:[input readDouble]];
        break;
      }
    }
  }
}
- (BOOL) hasTime {
  return resultMa.hasTime;
}
- (UInt32) time {
  return resultMa.time;
}
- (maBuilder*) setTime:(UInt32) value {
  resultMa.hasTime = YES;
  resultMa.time = value;
  return self;
}
- (maBuilder*) clearTime {
  resultMa.hasTime = NO;
  resultMa.time = 0;
  return self;
}
- (PBAppendableArray *)maValue {
  return resultMa.maValueArray;
}
- (Float64)maValueAtIndex:(NSUInteger)index {
  return [resultMa maValueAtIndex:index];
}
- (maBuilder *)addMaValue:(Float64)value {
  if (resultMa.maValueArray == nil) {
    resultMa.maValueArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeDouble];
  }
  [resultMa.maValueArray addDouble:value];
  return self;
}
- (maBuilder *)setMaValueArray:(NSArray *)array {
  resultMa.maValueArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeDouble];
  return self;
}
- (maBuilder *)setMaValueValues:(const Float64 *)values count:(NSUInteger)count {
  resultMa.maValueArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeDouble];
  return self;
}
- (maBuilder *)clearMaValue {
  resultMa.maValueArray = nil;
  return self;
}
@end

@interface ma_array ()
@property (strong) NSMutableArray * maDataArray;
@end

@implementation ma_array

@synthesize maDataArray;
@dynamic maData;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static ma_array* defaultma_arrayInstance = nil;
+ (void) initialize {
  if (self == [ma_array class]) {
    defaultma_arrayInstance = [[ma_array alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultma_arrayInstance;
}
- (instancetype) defaultInstance {
  return defaultma_arrayInstance;
}
- (NSArray *)maData {
  return maDataArray;
}
- (ma*)maDataAtIndex:(NSUInteger)index {
  return [maDataArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  __block BOOL isInitmaData = YES;
   [self.maData enumerateObjectsUsingBlock:^(ma *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitmaData = NO;
      *stop = YES;
    }
  }];
  if (!isInitmaData) return isInitmaData;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.maDataArray enumerateObjectsUsingBlock:^(ma *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.maDataArray enumerateObjectsUsingBlock:^(ma *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ma_array*) parseFromData:(NSData*) data {
  return (ma_array*)[[[ma_array builder] mergeFromData:data] build];
}
+ (ma_array*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ma_array*)[[[ma_array builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ma_array*) parseFromInputStream:(NSInputStream*) input {
  return (ma_array*)[[[ma_array builder] mergeFromInputStream:input] build];
}
+ (ma_array*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ma_array*)[[[ma_array builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ma_array*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ma_array*)[[[ma_array builder] mergeFromCodedInputStream:input] build];
}
+ (ma_array*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ma_array*)[[[ma_array builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ma_arrayBuilder*) builder {
  return [[ma_arrayBuilder alloc] init];
}
+ (ma_arrayBuilder*) builderWithPrototype:(ma_array*) prototype {
  return [[ma_array builder] mergeFrom:prototype];
}
- (ma_arrayBuilder*) builder {
  return [ma_array builder];
}
- (ma_arrayBuilder*) toBuilder {
  return [ma_array builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.maDataArray enumerateObjectsUsingBlock:^(ma *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"maData"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  for (ma* element in self.maDataArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"maData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ma_array class]]) {
    return NO;
  }
  ma_array *otherMessage = other;
  return
      [self.maDataArray isEqualToArray:otherMessage.maDataArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.maDataArray enumerateObjectsUsingBlock:^(ma *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ma_arrayBuilder()
@property (strong) ma_array* resultMaArray;
@end

@implementation ma_arrayBuilder
@synthesize resultMaArray;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultMaArray = [[ma_array alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultMaArray;
}
- (ma_arrayBuilder*) clear {
  self.resultMaArray = [[ma_array alloc] init];
  return self;
}
- (ma_arrayBuilder*) clone {
  return [ma_array builderWithPrototype:resultMaArray];
}
- (ma_array*) defaultInstance {
  return [ma_array defaultInstance];
}
- (ma_array*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ma_array*) buildPartial {
  ma_array* returnMe = resultMaArray;
  self.resultMaArray = nil;
  return returnMe;
}
- (ma_arrayBuilder*) mergeFrom:(ma_array*) other {
  if (other == [ma_array defaultInstance]) {
    return self;
  }
  if (other.maDataArray.count > 0) {
    if (resultMaArray.maDataArray == nil) {
      resultMaArray.maDataArray = [[NSMutableArray alloc] initWithArray:other.maDataArray];
    } else {
      [resultMaArray.maDataArray addObjectsFromArray:other.maDataArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ma_arrayBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ma_arrayBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        maBuilder* subBuilder = [ma builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addMaData:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)maData {
  return resultMaArray.maDataArray;
}
- (ma*)maDataAtIndex:(NSUInteger)index {
  return [resultMaArray maDataAtIndex:index];
}
- (ma_arrayBuilder *)addMaData:(ma*)value {
  if (resultMaArray.maDataArray == nil) {
    resultMaArray.maDataArray = [[NSMutableArray alloc]init];
  }
  [resultMaArray.maDataArray addObject:value];
  return self;
}
- (ma_arrayBuilder *)setMaDataArray:(NSArray *)array {
  resultMaArray.maDataArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (ma_arrayBuilder *)clearMaData {
  resultMaArray.maDataArray = nil;
  return self;
}
@end

@interface index_data_result_msg ()
@property enum_index name;
@property (strong) NSString* stockCode;
@property index_data_type cycleType;
@property (strong) NSData* body;
@end

@implementation index_data_result_msg

- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) _value_ {
  hasName_ = !!_value_;
}
@synthesize name;
- (BOOL) hasStockCode {
  return !!hasStockCode_;
}
- (void) setHasStockCode:(BOOL) _value_ {
  hasStockCode_ = !!_value_;
}
@synthesize stockCode;
- (BOOL) hasCycleType {
  return !!hasCycleType_;
}
- (void) setHasCycleType:(BOOL) _value_ {
  hasCycleType_ = !!_value_;
}
@synthesize cycleType;
- (BOOL) hasBody {
  return !!hasBody_;
}
- (void) setHasBody:(BOOL) _value_ {
  hasBody_ = !!_value_;
}
@synthesize body;
- (instancetype) init {
  if ((self = [super init])) {
    self.name = enum_indexBeginIndexEnum;
    self.stockCode = @"";
    self.cycleType = index_data_typeCycleBegin;
    self.body = [NSData data];
  }
  return self;
}
static index_data_result_msg* defaultindex_data_result_msgInstance = nil;
+ (void) initialize {
  if (self == [index_data_result_msg class]) {
    defaultindex_data_result_msgInstance = [[index_data_result_msg alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultindex_data_result_msgInstance;
}
- (instancetype) defaultInstance {
  return defaultindex_data_result_msgInstance;
}
- (BOOL) isInitialized {
  if (!self.hasName) {
    return NO;
  }
  if (!self.hasStockCode) {
    return NO;
  }
  if (!self.hasCycleType) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasName) {
    [output writeEnum:1 value:self.name];
  }
  if (self.hasStockCode) {
    [output writeString:2 value:self.stockCode];
  }
  if (self.hasCycleType) {
    [output writeEnum:3 value:self.cycleType];
  }
  if (self.hasBody) {
    [output writeData:4 value:self.body];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasName) {
    size_ += computeEnumSize(1, self.name);
  }
  if (self.hasStockCode) {
    size_ += computeStringSize(2, self.stockCode);
  }
  if (self.hasCycleType) {
    size_ += computeEnumSize(3, self.cycleType);
  }
  if (self.hasBody) {
    size_ += computeDataSize(4, self.body);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (index_data_result_msg*) parseFromData:(NSData*) data {
  return (index_data_result_msg*)[[[index_data_result_msg builder] mergeFromData:data] build];
}
+ (index_data_result_msg*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (index_data_result_msg*)[[[index_data_result_msg builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (index_data_result_msg*) parseFromInputStream:(NSInputStream*) input {
  return (index_data_result_msg*)[[[index_data_result_msg builder] mergeFromInputStream:input] build];
}
+ (index_data_result_msg*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (index_data_result_msg*)[[[index_data_result_msg builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (index_data_result_msg*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (index_data_result_msg*)[[[index_data_result_msg builder] mergeFromCodedInputStream:input] build];
}
+ (index_data_result_msg*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (index_data_result_msg*)[[[index_data_result_msg builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (index_data_result_msgBuilder*) builder {
  return [[index_data_result_msgBuilder alloc] init];
}
+ (index_data_result_msgBuilder*) builderWithPrototype:(index_data_result_msg*) prototype {
  return [[index_data_result_msg builder] mergeFrom:prototype];
}
- (index_data_result_msgBuilder*) builder {
  return [index_data_result_msg builder];
}
- (index_data_result_msgBuilder*) toBuilder {
  return [index_data_result_msg builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", NSStringFromenum_index(self.name)];
  }
  if (self.hasStockCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"stockCode", self.stockCode];
  }
  if (self.hasCycleType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cycleType", NSStringFromindex_data_type(self.cycleType)];
  }
  if (self.hasBody) {
    [output appendFormat:@"%@%@: %@\n", indent, @"body", self.body];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasName) {
    [dictionary setObject: @(self.name) forKey: @"name"];
  }
  if (self.hasStockCode) {
    [dictionary setObject: self.stockCode forKey: @"stockCode"];
  }
  if (self.hasCycleType) {
    [dictionary setObject: @(self.cycleType) forKey: @"cycleType"];
  }
  if (self.hasBody) {
    [dictionary setObject: self.body forKey: @"body"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[index_data_result_msg class]]) {
    return NO;
  }
  index_data_result_msg *otherMessage = other;
  return
      self.hasName == otherMessage.hasName &&
      (!self.hasName || self.name == otherMessage.name) &&
      self.hasStockCode == otherMessage.hasStockCode &&
      (!self.hasStockCode || [self.stockCode isEqual:otherMessage.stockCode]) &&
      self.hasCycleType == otherMessage.hasCycleType &&
      (!self.hasCycleType || self.cycleType == otherMessage.cycleType) &&
      self.hasBody == otherMessage.hasBody &&
      (!self.hasBody || [self.body isEqual:otherMessage.body]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasName) {
    hashCode = hashCode * 31 + self.name;
  }
  if (self.hasStockCode) {
    hashCode = hashCode * 31 + [self.stockCode hash];
  }
  if (self.hasCycleType) {
    hashCode = hashCode * 31 + self.cycleType;
  }
  if (self.hasBody) {
    hashCode = hashCode * 31 + [self.body hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface index_data_result_msgBuilder()
@property (strong) index_data_result_msg* resultIndexDataResultMsg;
@end

@implementation index_data_result_msgBuilder
@synthesize resultIndexDataResultMsg;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultIndexDataResultMsg = [[index_data_result_msg alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultIndexDataResultMsg;
}
- (index_data_result_msgBuilder*) clear {
  self.resultIndexDataResultMsg = [[index_data_result_msg alloc] init];
  return self;
}
- (index_data_result_msgBuilder*) clone {
  return [index_data_result_msg builderWithPrototype:resultIndexDataResultMsg];
}
- (index_data_result_msg*) defaultInstance {
  return [index_data_result_msg defaultInstance];
}
- (index_data_result_msg*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (index_data_result_msg*) buildPartial {
  index_data_result_msg* returnMe = resultIndexDataResultMsg;
  self.resultIndexDataResultMsg = nil;
  return returnMe;
}
- (index_data_result_msgBuilder*) mergeFrom:(index_data_result_msg*) other {
  if (other == [index_data_result_msg defaultInstance]) {
    return self;
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasStockCode) {
    [self setStockCode:other.stockCode];
  }
  if (other.hasCycleType) {
    [self setCycleType:other.cycleType];
  }
  if (other.hasBody) {
    [self setBody:other.body];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (index_data_result_msgBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (index_data_result_msgBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        enum_index value = (enum_index)[input readEnum];
        if (enum_indexIsValidValue(value)) {
          [self setName:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 18: {
        [self setStockCode:[input readString]];
        break;
      }
      case 24: {
        index_data_type value = (index_data_type)[input readEnum];
        if (index_data_typeIsValidValue(value)) {
          [self setCycleType:value];
        } else {
          [unknownFields mergeVarintField:3 value:value];
        }
        break;
      }
      case 34: {
        [self setBody:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasName {
  return resultIndexDataResultMsg.hasName;
}
- (enum_index) name {
  return resultIndexDataResultMsg.name;
}
- (index_data_result_msgBuilder*) setName:(enum_index) value {
  resultIndexDataResultMsg.hasName = YES;
  resultIndexDataResultMsg.name = value;
  return self;
}
- (index_data_result_msgBuilder*) clearName {
  resultIndexDataResultMsg.hasName = NO;
  resultIndexDataResultMsg.name = enum_indexBeginIndexEnum;
  return self;
}
- (BOOL) hasStockCode {
  return resultIndexDataResultMsg.hasStockCode;
}
- (NSString*) stockCode {
  return resultIndexDataResultMsg.stockCode;
}
- (index_data_result_msgBuilder*) setStockCode:(NSString*) value {
  resultIndexDataResultMsg.hasStockCode = YES;
  resultIndexDataResultMsg.stockCode = value;
  return self;
}
- (index_data_result_msgBuilder*) clearStockCode {
  resultIndexDataResultMsg.hasStockCode = NO;
  resultIndexDataResultMsg.stockCode = @"";
  return self;
}
- (BOOL) hasCycleType {
  return resultIndexDataResultMsg.hasCycleType;
}
- (index_data_type) cycleType {
  return resultIndexDataResultMsg.cycleType;
}
- (index_data_result_msgBuilder*) setCycleType:(index_data_type) value {
  resultIndexDataResultMsg.hasCycleType = YES;
  resultIndexDataResultMsg.cycleType = value;
  return self;
}
- (index_data_result_msgBuilder*) clearCycleType {
  resultIndexDataResultMsg.hasCycleType = NO;
  resultIndexDataResultMsg.cycleType = index_data_typeCycleBegin;
  return self;
}
- (BOOL) hasBody {
  return resultIndexDataResultMsg.hasBody;
}
- (NSData*) body {
  return resultIndexDataResultMsg.body;
}
- (index_data_result_msgBuilder*) setBody:(NSData*) value {
  resultIndexDataResultMsg.hasBody = YES;
  resultIndexDataResultMsg.body = value;
  return self;
}
- (index_data_result_msgBuilder*) clearBody {
  resultIndexDataResultMsg.hasBody = NO;
  resultIndexDataResultMsg.body = [NSData data];
  return self;
}
@end

@interface client_request_rise_drop_msg ()
@property UInt32 begin;
@property UInt32 end;
@property (strong) data_selector* selector;
@end

@implementation client_request_rise_drop_msg

- (BOOL) hasBegin {
  return !!hasBegin_;
}
- (void) setHasBegin:(BOOL) _value_ {
  hasBegin_ = !!_value_;
}
@synthesize begin;
- (BOOL) hasEnd {
  return !!hasEnd_;
}
- (void) setHasEnd:(BOOL) _value_ {
  hasEnd_ = !!_value_;
}
@synthesize end;
- (BOOL) hasSelector {
  return !!hasSelector_;
}
- (void) setHasSelector:(BOOL) _value_ {
  hasSelector_ = !!_value_;
}
@synthesize selector;
- (instancetype) init {
  if ((self = [super init])) {
    self.begin = 0;
    self.end = 0;
    self.selector = [data_selector defaultInstance];
  }
  return self;
}
static client_request_rise_drop_msg* defaultclient_request_rise_drop_msgInstance = nil;
+ (void) initialize {
  if (self == [client_request_rise_drop_msg class]) {
    defaultclient_request_rise_drop_msgInstance = [[client_request_rise_drop_msg alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultclient_request_rise_drop_msgInstance;
}
- (instancetype) defaultInstance {
  return defaultclient_request_rise_drop_msgInstance;
}
- (BOOL) isInitialized {
  if (!self.hasBegin) {
    return NO;
  }
  if (!self.hasEnd) {
    return NO;
  }
  if (self.hasSelector) {
    if (!self.selector.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasBegin) {
    [output writeUInt32:1 value:self.begin];
  }
  if (self.hasEnd) {
    [output writeUInt32:2 value:self.end];
  }
  if (self.hasSelector) {
    [output writeMessage:4 value:self.selector];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasBegin) {
    size_ += computeUInt32Size(1, self.begin);
  }
  if (self.hasEnd) {
    size_ += computeUInt32Size(2, self.end);
  }
  if (self.hasSelector) {
    size_ += computeMessageSize(4, self.selector);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (client_request_rise_drop_msg*) parseFromData:(NSData*) data {
  return (client_request_rise_drop_msg*)[[[client_request_rise_drop_msg builder] mergeFromData:data] build];
}
+ (client_request_rise_drop_msg*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (client_request_rise_drop_msg*)[[[client_request_rise_drop_msg builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (client_request_rise_drop_msg*) parseFromInputStream:(NSInputStream*) input {
  return (client_request_rise_drop_msg*)[[[client_request_rise_drop_msg builder] mergeFromInputStream:input] build];
}
+ (client_request_rise_drop_msg*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (client_request_rise_drop_msg*)[[[client_request_rise_drop_msg builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (client_request_rise_drop_msg*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (client_request_rise_drop_msg*)[[[client_request_rise_drop_msg builder] mergeFromCodedInputStream:input] build];
}
+ (client_request_rise_drop_msg*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (client_request_rise_drop_msg*)[[[client_request_rise_drop_msg builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (client_request_rise_drop_msgBuilder*) builder {
  return [[client_request_rise_drop_msgBuilder alloc] init];
}
+ (client_request_rise_drop_msgBuilder*) builderWithPrototype:(client_request_rise_drop_msg*) prototype {
  return [[client_request_rise_drop_msg builder] mergeFrom:prototype];
}
- (client_request_rise_drop_msgBuilder*) builder {
  return [client_request_rise_drop_msg builder];
}
- (client_request_rise_drop_msgBuilder*) toBuilder {
  return [client_request_rise_drop_msg builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasBegin) {
    [output appendFormat:@"%@%@: %@\n", indent, @"begin", [NSNumber numberWithInteger:self.begin]];
  }
  if (self.hasEnd) {
    [output appendFormat:@"%@%@: %@\n", indent, @"end", [NSNumber numberWithInteger:self.end]];
  }
  if (self.hasSelector) {
    [output appendFormat:@"%@%@ {\n", indent, @"selector"];
    [self.selector writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasBegin) {
    [dictionary setObject: [NSNumber numberWithInteger:self.begin] forKey: @"begin"];
  }
  if (self.hasEnd) {
    [dictionary setObject: [NSNumber numberWithInteger:self.end] forKey: @"end"];
  }
  if (self.hasSelector) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.selector storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"selector"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[client_request_rise_drop_msg class]]) {
    return NO;
  }
  client_request_rise_drop_msg *otherMessage = other;
  return
      self.hasBegin == otherMessage.hasBegin &&
      (!self.hasBegin || self.begin == otherMessage.begin) &&
      self.hasEnd == otherMessage.hasEnd &&
      (!self.hasEnd || self.end == otherMessage.end) &&
      self.hasSelector == otherMessage.hasSelector &&
      (!self.hasSelector || [self.selector isEqual:otherMessage.selector]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasBegin) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.begin] hash];
  }
  if (self.hasEnd) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.end] hash];
  }
  if (self.hasSelector) {
    hashCode = hashCode * 31 + [self.selector hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface client_request_rise_drop_msgBuilder()
@property (strong) client_request_rise_drop_msg* resultClientRequestRiseDropMsg;
@end

@implementation client_request_rise_drop_msgBuilder
@synthesize resultClientRequestRiseDropMsg;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultClientRequestRiseDropMsg = [[client_request_rise_drop_msg alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultClientRequestRiseDropMsg;
}
- (client_request_rise_drop_msgBuilder*) clear {
  self.resultClientRequestRiseDropMsg = [[client_request_rise_drop_msg alloc] init];
  return self;
}
- (client_request_rise_drop_msgBuilder*) clone {
  return [client_request_rise_drop_msg builderWithPrototype:resultClientRequestRiseDropMsg];
}
- (client_request_rise_drop_msg*) defaultInstance {
  return [client_request_rise_drop_msg defaultInstance];
}
- (client_request_rise_drop_msg*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (client_request_rise_drop_msg*) buildPartial {
  client_request_rise_drop_msg* returnMe = resultClientRequestRiseDropMsg;
  self.resultClientRequestRiseDropMsg = nil;
  return returnMe;
}
- (client_request_rise_drop_msgBuilder*) mergeFrom:(client_request_rise_drop_msg*) other {
  if (other == [client_request_rise_drop_msg defaultInstance]) {
    return self;
  }
  if (other.hasBegin) {
    [self setBegin:other.begin];
  }
  if (other.hasEnd) {
    [self setEnd:other.end];
  }
  if (other.hasSelector) {
    [self mergeSelector:other.selector];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (client_request_rise_drop_msgBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (client_request_rise_drop_msgBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setBegin:[input readUInt32]];
        break;
      }
      case 16: {
        [self setEnd:[input readUInt32]];
        break;
      }
      case 34: {
        data_selectorBuilder* subBuilder = [data_selector builder];
        if (self.hasSelector) {
          [subBuilder mergeFrom:self.selector];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setSelector:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasBegin {
  return resultClientRequestRiseDropMsg.hasBegin;
}
- (UInt32) begin {
  return resultClientRequestRiseDropMsg.begin;
}
- (client_request_rise_drop_msgBuilder*) setBegin:(UInt32) value {
  resultClientRequestRiseDropMsg.hasBegin = YES;
  resultClientRequestRiseDropMsg.begin = value;
  return self;
}
- (client_request_rise_drop_msgBuilder*) clearBegin {
  resultClientRequestRiseDropMsg.hasBegin = NO;
  resultClientRequestRiseDropMsg.begin = 0;
  return self;
}
- (BOOL) hasEnd {
  return resultClientRequestRiseDropMsg.hasEnd;
}
- (UInt32) end {
  return resultClientRequestRiseDropMsg.end;
}
- (client_request_rise_drop_msgBuilder*) setEnd:(UInt32) value {
  resultClientRequestRiseDropMsg.hasEnd = YES;
  resultClientRequestRiseDropMsg.end = value;
  return self;
}
- (client_request_rise_drop_msgBuilder*) clearEnd {
  resultClientRequestRiseDropMsg.hasEnd = NO;
  resultClientRequestRiseDropMsg.end = 0;
  return self;
}
- (BOOL) hasSelector {
  return resultClientRequestRiseDropMsg.hasSelector;
}
- (data_selector*) selector {
  return resultClientRequestRiseDropMsg.selector;
}
- (client_request_rise_drop_msgBuilder*) setSelector:(data_selector*) value {
  resultClientRequestRiseDropMsg.hasSelector = YES;
  resultClientRequestRiseDropMsg.selector = value;
  return self;
}
- (client_request_rise_drop_msgBuilder*) setSelectorBuilder:(data_selectorBuilder*) builderForValue {
  return [self setSelector:[builderForValue build]];
}
- (client_request_rise_drop_msgBuilder*) mergeSelector:(data_selector*) value {
  if (resultClientRequestRiseDropMsg.hasSelector &&
      resultClientRequestRiseDropMsg.selector != [data_selector defaultInstance]) {
    resultClientRequestRiseDropMsg.selector =
      [[[data_selector builderWithPrototype:resultClientRequestRiseDropMsg.selector] mergeFrom:value] buildPartial];
  } else {
    resultClientRequestRiseDropMsg.selector = value;
  }
  resultClientRequestRiseDropMsg.hasSelector = YES;
  return self;
}
- (client_request_rise_drop_msgBuilder*) clearSelector {
  resultClientRequestRiseDropMsg.hasSelector = NO;
  resultClientRequestRiseDropMsg.selector = [data_selector defaultInstance];
  return self;
}
@end

@interface rise_drop_data ()
@property UInt32 time;
@property UInt32 szaRiseCount;
@property UInt32 szaDropCount;
@property UInt32 szaUnchangeCount;
@property UInt32 shaRiseCount;
@property UInt32 shaDropCount;
@property UInt32 shaUnchangeCount;
@property UInt32 gemRiseCount;
@property UInt32 gemDropCount;
@property UInt32 gemUnchangeCount;
@end

@implementation rise_drop_data

- (BOOL) hasTime {
  return !!hasTime_;
}
- (void) setHasTime:(BOOL) _value_ {
  hasTime_ = !!_value_;
}
@synthesize time;
- (BOOL) hasSzaRiseCount {
  return !!hasSzaRiseCount_;
}
- (void) setHasSzaRiseCount:(BOOL) _value_ {
  hasSzaRiseCount_ = !!_value_;
}
@synthesize szaRiseCount;
- (BOOL) hasSzaDropCount {
  return !!hasSzaDropCount_;
}
- (void) setHasSzaDropCount:(BOOL) _value_ {
  hasSzaDropCount_ = !!_value_;
}
@synthesize szaDropCount;
- (BOOL) hasSzaUnchangeCount {
  return !!hasSzaUnchangeCount_;
}
- (void) setHasSzaUnchangeCount:(BOOL) _value_ {
  hasSzaUnchangeCount_ = !!_value_;
}
@synthesize szaUnchangeCount;
- (BOOL) hasShaRiseCount {
  return !!hasShaRiseCount_;
}
- (void) setHasShaRiseCount:(BOOL) _value_ {
  hasShaRiseCount_ = !!_value_;
}
@synthesize shaRiseCount;
- (BOOL) hasShaDropCount {
  return !!hasShaDropCount_;
}
- (void) setHasShaDropCount:(BOOL) _value_ {
  hasShaDropCount_ = !!_value_;
}
@synthesize shaDropCount;
- (BOOL) hasShaUnchangeCount {
  return !!hasShaUnchangeCount_;
}
- (void) setHasShaUnchangeCount:(BOOL) _value_ {
  hasShaUnchangeCount_ = !!_value_;
}
@synthesize shaUnchangeCount;
- (BOOL) hasGemRiseCount {
  return !!hasGemRiseCount_;
}
- (void) setHasGemRiseCount:(BOOL) _value_ {
  hasGemRiseCount_ = !!_value_;
}
@synthesize gemRiseCount;
- (BOOL) hasGemDropCount {
  return !!hasGemDropCount_;
}
- (void) setHasGemDropCount:(BOOL) _value_ {
  hasGemDropCount_ = !!_value_;
}
@synthesize gemDropCount;
- (BOOL) hasGemUnchangeCount {
  return !!hasGemUnchangeCount_;
}
- (void) setHasGemUnchangeCount:(BOOL) _value_ {
  hasGemUnchangeCount_ = !!_value_;
}
@synthesize gemUnchangeCount;
- (instancetype) init {
  if ((self = [super init])) {
    self.time = 0;
    self.szaRiseCount = 0;
    self.szaDropCount = 0;
    self.szaUnchangeCount = 0;
    self.shaRiseCount = 0;
    self.shaDropCount = 0;
    self.shaUnchangeCount = 0;
    self.gemRiseCount = 0;
    self.gemDropCount = 0;
    self.gemUnchangeCount = 0;
  }
  return self;
}
static rise_drop_data* defaultrise_drop_dataInstance = nil;
+ (void) initialize {
  if (self == [rise_drop_data class]) {
    defaultrise_drop_dataInstance = [[rise_drop_data alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultrise_drop_dataInstance;
}
- (instancetype) defaultInstance {
  return defaultrise_drop_dataInstance;
}
- (BOOL) isInitialized {
  if (!self.hasTime) {
    return NO;
  }
  if (!self.hasSzaRiseCount) {
    return NO;
  }
  if (!self.hasSzaDropCount) {
    return NO;
  }
  if (!self.hasSzaUnchangeCount) {
    return NO;
  }
  if (!self.hasShaRiseCount) {
    return NO;
  }
  if (!self.hasShaDropCount) {
    return NO;
  }
  if (!self.hasShaUnchangeCount) {
    return NO;
  }
  if (!self.hasGemRiseCount) {
    return NO;
  }
  if (!self.hasGemDropCount) {
    return NO;
  }
  if (!self.hasGemUnchangeCount) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTime) {
    [output writeUInt32:1 value:self.time];
  }
  if (self.hasSzaRiseCount) {
    [output writeUInt32:2 value:self.szaRiseCount];
  }
  if (self.hasSzaDropCount) {
    [output writeUInt32:3 value:self.szaDropCount];
  }
  if (self.hasSzaUnchangeCount) {
    [output writeUInt32:4 value:self.szaUnchangeCount];
  }
  if (self.hasShaRiseCount) {
    [output writeUInt32:5 value:self.shaRiseCount];
  }
  if (self.hasShaDropCount) {
    [output writeUInt32:6 value:self.shaDropCount];
  }
  if (self.hasShaUnchangeCount) {
    [output writeUInt32:7 value:self.shaUnchangeCount];
  }
  if (self.hasGemRiseCount) {
    [output writeUInt32:8 value:self.gemRiseCount];
  }
  if (self.hasGemDropCount) {
    [output writeUInt32:9 value:self.gemDropCount];
  }
  if (self.hasGemUnchangeCount) {
    [output writeUInt32:10 value:self.gemUnchangeCount];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasTime) {
    size_ += computeUInt32Size(1, self.time);
  }
  if (self.hasSzaRiseCount) {
    size_ += computeUInt32Size(2, self.szaRiseCount);
  }
  if (self.hasSzaDropCount) {
    size_ += computeUInt32Size(3, self.szaDropCount);
  }
  if (self.hasSzaUnchangeCount) {
    size_ += computeUInt32Size(4, self.szaUnchangeCount);
  }
  if (self.hasShaRiseCount) {
    size_ += computeUInt32Size(5, self.shaRiseCount);
  }
  if (self.hasShaDropCount) {
    size_ += computeUInt32Size(6, self.shaDropCount);
  }
  if (self.hasShaUnchangeCount) {
    size_ += computeUInt32Size(7, self.shaUnchangeCount);
  }
  if (self.hasGemRiseCount) {
    size_ += computeUInt32Size(8, self.gemRiseCount);
  }
  if (self.hasGemDropCount) {
    size_ += computeUInt32Size(9, self.gemDropCount);
  }
  if (self.hasGemUnchangeCount) {
    size_ += computeUInt32Size(10, self.gemUnchangeCount);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (rise_drop_data*) parseFromData:(NSData*) data {
  return (rise_drop_data*)[[[rise_drop_data builder] mergeFromData:data] build];
}
+ (rise_drop_data*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (rise_drop_data*)[[[rise_drop_data builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (rise_drop_data*) parseFromInputStream:(NSInputStream*) input {
  return (rise_drop_data*)[[[rise_drop_data builder] mergeFromInputStream:input] build];
}
+ (rise_drop_data*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (rise_drop_data*)[[[rise_drop_data builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (rise_drop_data*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (rise_drop_data*)[[[rise_drop_data builder] mergeFromCodedInputStream:input] build];
}
+ (rise_drop_data*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (rise_drop_data*)[[[rise_drop_data builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (rise_drop_dataBuilder*) builder {
  return [[rise_drop_dataBuilder alloc] init];
}
+ (rise_drop_dataBuilder*) builderWithPrototype:(rise_drop_data*) prototype {
  return [[rise_drop_data builder] mergeFrom:prototype];
}
- (rise_drop_dataBuilder*) builder {
  return [rise_drop_data builder];
}
- (rise_drop_dataBuilder*) toBuilder {
  return [rise_drop_data builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"time", [NSNumber numberWithInteger:self.time]];
  }
  if (self.hasSzaRiseCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"szaRiseCount", [NSNumber numberWithInteger:self.szaRiseCount]];
  }
  if (self.hasSzaDropCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"szaDropCount", [NSNumber numberWithInteger:self.szaDropCount]];
  }
  if (self.hasSzaUnchangeCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"szaUnchangeCount", [NSNumber numberWithInteger:self.szaUnchangeCount]];
  }
  if (self.hasShaRiseCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"shaRiseCount", [NSNumber numberWithInteger:self.shaRiseCount]];
  }
  if (self.hasShaDropCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"shaDropCount", [NSNumber numberWithInteger:self.shaDropCount]];
  }
  if (self.hasShaUnchangeCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"shaUnchangeCount", [NSNumber numberWithInteger:self.shaUnchangeCount]];
  }
  if (self.hasGemRiseCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"gemRiseCount", [NSNumber numberWithInteger:self.gemRiseCount]];
  }
  if (self.hasGemDropCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"gemDropCount", [NSNumber numberWithInteger:self.gemDropCount]];
  }
  if (self.hasGemUnchangeCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"gemUnchangeCount", [NSNumber numberWithInteger:self.gemUnchangeCount]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasTime) {
    [dictionary setObject: [NSNumber numberWithInteger:self.time] forKey: @"time"];
  }
  if (self.hasSzaRiseCount) {
    [dictionary setObject: [NSNumber numberWithInteger:self.szaRiseCount] forKey: @"szaRiseCount"];
  }
  if (self.hasSzaDropCount) {
    [dictionary setObject: [NSNumber numberWithInteger:self.szaDropCount] forKey: @"szaDropCount"];
  }
  if (self.hasSzaUnchangeCount) {
    [dictionary setObject: [NSNumber numberWithInteger:self.szaUnchangeCount] forKey: @"szaUnchangeCount"];
  }
  if (self.hasShaRiseCount) {
    [dictionary setObject: [NSNumber numberWithInteger:self.shaRiseCount] forKey: @"shaRiseCount"];
  }
  if (self.hasShaDropCount) {
    [dictionary setObject: [NSNumber numberWithInteger:self.shaDropCount] forKey: @"shaDropCount"];
  }
  if (self.hasShaUnchangeCount) {
    [dictionary setObject: [NSNumber numberWithInteger:self.shaUnchangeCount] forKey: @"shaUnchangeCount"];
  }
  if (self.hasGemRiseCount) {
    [dictionary setObject: [NSNumber numberWithInteger:self.gemRiseCount] forKey: @"gemRiseCount"];
  }
  if (self.hasGemDropCount) {
    [dictionary setObject: [NSNumber numberWithInteger:self.gemDropCount] forKey: @"gemDropCount"];
  }
  if (self.hasGemUnchangeCount) {
    [dictionary setObject: [NSNumber numberWithInteger:self.gemUnchangeCount] forKey: @"gemUnchangeCount"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[rise_drop_data class]]) {
    return NO;
  }
  rise_drop_data *otherMessage = other;
  return
      self.hasTime == otherMessage.hasTime &&
      (!self.hasTime || self.time == otherMessage.time) &&
      self.hasSzaRiseCount == otherMessage.hasSzaRiseCount &&
      (!self.hasSzaRiseCount || self.szaRiseCount == otherMessage.szaRiseCount) &&
      self.hasSzaDropCount == otherMessage.hasSzaDropCount &&
      (!self.hasSzaDropCount || self.szaDropCount == otherMessage.szaDropCount) &&
      self.hasSzaUnchangeCount == otherMessage.hasSzaUnchangeCount &&
      (!self.hasSzaUnchangeCount || self.szaUnchangeCount == otherMessage.szaUnchangeCount) &&
      self.hasShaRiseCount == otherMessage.hasShaRiseCount &&
      (!self.hasShaRiseCount || self.shaRiseCount == otherMessage.shaRiseCount) &&
      self.hasShaDropCount == otherMessage.hasShaDropCount &&
      (!self.hasShaDropCount || self.shaDropCount == otherMessage.shaDropCount) &&
      self.hasShaUnchangeCount == otherMessage.hasShaUnchangeCount &&
      (!self.hasShaUnchangeCount || self.shaUnchangeCount == otherMessage.shaUnchangeCount) &&
      self.hasGemRiseCount == otherMessage.hasGemRiseCount &&
      (!self.hasGemRiseCount || self.gemRiseCount == otherMessage.gemRiseCount) &&
      self.hasGemDropCount == otherMessage.hasGemDropCount &&
      (!self.hasGemDropCount || self.gemDropCount == otherMessage.gemDropCount) &&
      self.hasGemUnchangeCount == otherMessage.hasGemUnchangeCount &&
      (!self.hasGemUnchangeCount || self.gemUnchangeCount == otherMessage.gemUnchangeCount) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.time] hash];
  }
  if (self.hasSzaRiseCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.szaRiseCount] hash];
  }
  if (self.hasSzaDropCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.szaDropCount] hash];
  }
  if (self.hasSzaUnchangeCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.szaUnchangeCount] hash];
  }
  if (self.hasShaRiseCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.shaRiseCount] hash];
  }
  if (self.hasShaDropCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.shaDropCount] hash];
  }
  if (self.hasShaUnchangeCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.shaUnchangeCount] hash];
  }
  if (self.hasGemRiseCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.gemRiseCount] hash];
  }
  if (self.hasGemDropCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.gemDropCount] hash];
  }
  if (self.hasGemUnchangeCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.gemUnchangeCount] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface rise_drop_dataBuilder()
@property (strong) rise_drop_data* resultRiseDropData;
@end

@implementation rise_drop_dataBuilder
@synthesize resultRiseDropData;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultRiseDropData = [[rise_drop_data alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultRiseDropData;
}
- (rise_drop_dataBuilder*) clear {
  self.resultRiseDropData = [[rise_drop_data alloc] init];
  return self;
}
- (rise_drop_dataBuilder*) clone {
  return [rise_drop_data builderWithPrototype:resultRiseDropData];
}
- (rise_drop_data*) defaultInstance {
  return [rise_drop_data defaultInstance];
}
- (rise_drop_data*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (rise_drop_data*) buildPartial {
  rise_drop_data* returnMe = resultRiseDropData;
  self.resultRiseDropData = nil;
  return returnMe;
}
- (rise_drop_dataBuilder*) mergeFrom:(rise_drop_data*) other {
  if (other == [rise_drop_data defaultInstance]) {
    return self;
  }
  if (other.hasTime) {
    [self setTime:other.time];
  }
  if (other.hasSzaRiseCount) {
    [self setSzaRiseCount:other.szaRiseCount];
  }
  if (other.hasSzaDropCount) {
    [self setSzaDropCount:other.szaDropCount];
  }
  if (other.hasSzaUnchangeCount) {
    [self setSzaUnchangeCount:other.szaUnchangeCount];
  }
  if (other.hasShaRiseCount) {
    [self setShaRiseCount:other.shaRiseCount];
  }
  if (other.hasShaDropCount) {
    [self setShaDropCount:other.shaDropCount];
  }
  if (other.hasShaUnchangeCount) {
    [self setShaUnchangeCount:other.shaUnchangeCount];
  }
  if (other.hasGemRiseCount) {
    [self setGemRiseCount:other.gemRiseCount];
  }
  if (other.hasGemDropCount) {
    [self setGemDropCount:other.gemDropCount];
  }
  if (other.hasGemUnchangeCount) {
    [self setGemUnchangeCount:other.gemUnchangeCount];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (rise_drop_dataBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (rise_drop_dataBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setTime:[input readUInt32]];
        break;
      }
      case 16: {
        [self setSzaRiseCount:[input readUInt32]];
        break;
      }
      case 24: {
        [self setSzaDropCount:[input readUInt32]];
        break;
      }
      case 32: {
        [self setSzaUnchangeCount:[input readUInt32]];
        break;
      }
      case 40: {
        [self setShaRiseCount:[input readUInt32]];
        break;
      }
      case 48: {
        [self setShaDropCount:[input readUInt32]];
        break;
      }
      case 56: {
        [self setShaUnchangeCount:[input readUInt32]];
        break;
      }
      case 64: {
        [self setGemRiseCount:[input readUInt32]];
        break;
      }
      case 72: {
        [self setGemDropCount:[input readUInt32]];
        break;
      }
      case 80: {
        [self setGemUnchangeCount:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasTime {
  return resultRiseDropData.hasTime;
}
- (UInt32) time {
  return resultRiseDropData.time;
}
- (rise_drop_dataBuilder*) setTime:(UInt32) value {
  resultRiseDropData.hasTime = YES;
  resultRiseDropData.time = value;
  return self;
}
- (rise_drop_dataBuilder*) clearTime {
  resultRiseDropData.hasTime = NO;
  resultRiseDropData.time = 0;
  return self;
}
- (BOOL) hasSzaRiseCount {
  return resultRiseDropData.hasSzaRiseCount;
}
- (UInt32) szaRiseCount {
  return resultRiseDropData.szaRiseCount;
}
- (rise_drop_dataBuilder*) setSzaRiseCount:(UInt32) value {
  resultRiseDropData.hasSzaRiseCount = YES;
  resultRiseDropData.szaRiseCount = value;
  return self;
}
- (rise_drop_dataBuilder*) clearSzaRiseCount {
  resultRiseDropData.hasSzaRiseCount = NO;
  resultRiseDropData.szaRiseCount = 0;
  return self;
}
- (BOOL) hasSzaDropCount {
  return resultRiseDropData.hasSzaDropCount;
}
- (UInt32) szaDropCount {
  return resultRiseDropData.szaDropCount;
}
- (rise_drop_dataBuilder*) setSzaDropCount:(UInt32) value {
  resultRiseDropData.hasSzaDropCount = YES;
  resultRiseDropData.szaDropCount = value;
  return self;
}
- (rise_drop_dataBuilder*) clearSzaDropCount {
  resultRiseDropData.hasSzaDropCount = NO;
  resultRiseDropData.szaDropCount = 0;
  return self;
}
- (BOOL) hasSzaUnchangeCount {
  return resultRiseDropData.hasSzaUnchangeCount;
}
- (UInt32) szaUnchangeCount {
  return resultRiseDropData.szaUnchangeCount;
}
- (rise_drop_dataBuilder*) setSzaUnchangeCount:(UInt32) value {
  resultRiseDropData.hasSzaUnchangeCount = YES;
  resultRiseDropData.szaUnchangeCount = value;
  return self;
}
- (rise_drop_dataBuilder*) clearSzaUnchangeCount {
  resultRiseDropData.hasSzaUnchangeCount = NO;
  resultRiseDropData.szaUnchangeCount = 0;
  return self;
}
- (BOOL) hasShaRiseCount {
  return resultRiseDropData.hasShaRiseCount;
}
- (UInt32) shaRiseCount {
  return resultRiseDropData.shaRiseCount;
}
- (rise_drop_dataBuilder*) setShaRiseCount:(UInt32) value {
  resultRiseDropData.hasShaRiseCount = YES;
  resultRiseDropData.shaRiseCount = value;
  return self;
}
- (rise_drop_dataBuilder*) clearShaRiseCount {
  resultRiseDropData.hasShaRiseCount = NO;
  resultRiseDropData.shaRiseCount = 0;
  return self;
}
- (BOOL) hasShaDropCount {
  return resultRiseDropData.hasShaDropCount;
}
- (UInt32) shaDropCount {
  return resultRiseDropData.shaDropCount;
}
- (rise_drop_dataBuilder*) setShaDropCount:(UInt32) value {
  resultRiseDropData.hasShaDropCount = YES;
  resultRiseDropData.shaDropCount = value;
  return self;
}
- (rise_drop_dataBuilder*) clearShaDropCount {
  resultRiseDropData.hasShaDropCount = NO;
  resultRiseDropData.shaDropCount = 0;
  return self;
}
- (BOOL) hasShaUnchangeCount {
  return resultRiseDropData.hasShaUnchangeCount;
}
- (UInt32) shaUnchangeCount {
  return resultRiseDropData.shaUnchangeCount;
}
- (rise_drop_dataBuilder*) setShaUnchangeCount:(UInt32) value {
  resultRiseDropData.hasShaUnchangeCount = YES;
  resultRiseDropData.shaUnchangeCount = value;
  return self;
}
- (rise_drop_dataBuilder*) clearShaUnchangeCount {
  resultRiseDropData.hasShaUnchangeCount = NO;
  resultRiseDropData.shaUnchangeCount = 0;
  return self;
}
- (BOOL) hasGemRiseCount {
  return resultRiseDropData.hasGemRiseCount;
}
- (UInt32) gemRiseCount {
  return resultRiseDropData.gemRiseCount;
}
- (rise_drop_dataBuilder*) setGemRiseCount:(UInt32) value {
  resultRiseDropData.hasGemRiseCount = YES;
  resultRiseDropData.gemRiseCount = value;
  return self;
}
- (rise_drop_dataBuilder*) clearGemRiseCount {
  resultRiseDropData.hasGemRiseCount = NO;
  resultRiseDropData.gemRiseCount = 0;
  return self;
}
- (BOOL) hasGemDropCount {
  return resultRiseDropData.hasGemDropCount;
}
- (UInt32) gemDropCount {
  return resultRiseDropData.gemDropCount;
}
- (rise_drop_dataBuilder*) setGemDropCount:(UInt32) value {
  resultRiseDropData.hasGemDropCount = YES;
  resultRiseDropData.gemDropCount = value;
  return self;
}
- (rise_drop_dataBuilder*) clearGemDropCount {
  resultRiseDropData.hasGemDropCount = NO;
  resultRiseDropData.gemDropCount = 0;
  return self;
}
- (BOOL) hasGemUnchangeCount {
  return resultRiseDropData.hasGemUnchangeCount;
}
- (UInt32) gemUnchangeCount {
  return resultRiseDropData.gemUnchangeCount;
}
- (rise_drop_dataBuilder*) setGemUnchangeCount:(UInt32) value {
  resultRiseDropData.hasGemUnchangeCount = YES;
  resultRiseDropData.gemUnchangeCount = value;
  return self;
}
- (rise_drop_dataBuilder*) clearGemUnchangeCount {
  resultRiseDropData.hasGemUnchangeCount = NO;
  resultRiseDropData.gemUnchangeCount = 0;
  return self;
}
@end

@interface rise_drop_result_msg ()
@property (strong) NSMutableArray * indexDataArray;
@end

@implementation rise_drop_result_msg

@synthesize indexDataArray;
@dynamic indexData;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static rise_drop_result_msg* defaultrise_drop_result_msgInstance = nil;
+ (void) initialize {
  if (self == [rise_drop_result_msg class]) {
    defaultrise_drop_result_msgInstance = [[rise_drop_result_msg alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultrise_drop_result_msgInstance;
}
- (instancetype) defaultInstance {
  return defaultrise_drop_result_msgInstance;
}
- (NSArray *)indexData {
  return indexDataArray;
}
- (rise_drop_data*)indexDataAtIndex:(NSUInteger)index {
  return [indexDataArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  __block BOOL isInitindexData = YES;
   [self.indexData enumerateObjectsUsingBlock:^(rise_drop_data *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitindexData = NO;
      *stop = YES;
    }
  }];
  if (!isInitindexData) return isInitindexData;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.indexDataArray enumerateObjectsUsingBlock:^(rise_drop_data *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.indexDataArray enumerateObjectsUsingBlock:^(rise_drop_data *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (rise_drop_result_msg*) parseFromData:(NSData*) data {
  return (rise_drop_result_msg*)[[[rise_drop_result_msg builder] mergeFromData:data] build];
}
+ (rise_drop_result_msg*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (rise_drop_result_msg*)[[[rise_drop_result_msg builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (rise_drop_result_msg*) parseFromInputStream:(NSInputStream*) input {
  return (rise_drop_result_msg*)[[[rise_drop_result_msg builder] mergeFromInputStream:input] build];
}
+ (rise_drop_result_msg*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (rise_drop_result_msg*)[[[rise_drop_result_msg builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (rise_drop_result_msg*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (rise_drop_result_msg*)[[[rise_drop_result_msg builder] mergeFromCodedInputStream:input] build];
}
+ (rise_drop_result_msg*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (rise_drop_result_msg*)[[[rise_drop_result_msg builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (rise_drop_result_msgBuilder*) builder {
  return [[rise_drop_result_msgBuilder alloc] init];
}
+ (rise_drop_result_msgBuilder*) builderWithPrototype:(rise_drop_result_msg*) prototype {
  return [[rise_drop_result_msg builder] mergeFrom:prototype];
}
- (rise_drop_result_msgBuilder*) builder {
  return [rise_drop_result_msg builder];
}
- (rise_drop_result_msgBuilder*) toBuilder {
  return [rise_drop_result_msg builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.indexDataArray enumerateObjectsUsingBlock:^(rise_drop_data *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"indexData"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  for (rise_drop_data* element in self.indexDataArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"indexData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[rise_drop_result_msg class]]) {
    return NO;
  }
  rise_drop_result_msg *otherMessage = other;
  return
      [self.indexDataArray isEqualToArray:otherMessage.indexDataArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.indexDataArray enumerateObjectsUsingBlock:^(rise_drop_data *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface rise_drop_result_msgBuilder()
@property (strong) rise_drop_result_msg* resultRiseDropResultMsg;
@end

@implementation rise_drop_result_msgBuilder
@synthesize resultRiseDropResultMsg;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultRiseDropResultMsg = [[rise_drop_result_msg alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultRiseDropResultMsg;
}
- (rise_drop_result_msgBuilder*) clear {
  self.resultRiseDropResultMsg = [[rise_drop_result_msg alloc] init];
  return self;
}
- (rise_drop_result_msgBuilder*) clone {
  return [rise_drop_result_msg builderWithPrototype:resultRiseDropResultMsg];
}
- (rise_drop_result_msg*) defaultInstance {
  return [rise_drop_result_msg defaultInstance];
}
- (rise_drop_result_msg*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (rise_drop_result_msg*) buildPartial {
  rise_drop_result_msg* returnMe = resultRiseDropResultMsg;
  self.resultRiseDropResultMsg = nil;
  return returnMe;
}
- (rise_drop_result_msgBuilder*) mergeFrom:(rise_drop_result_msg*) other {
  if (other == [rise_drop_result_msg defaultInstance]) {
    return self;
  }
  if (other.indexDataArray.count > 0) {
    if (resultRiseDropResultMsg.indexDataArray == nil) {
      resultRiseDropResultMsg.indexDataArray = [[NSMutableArray alloc] initWithArray:other.indexDataArray];
    } else {
      [resultRiseDropResultMsg.indexDataArray addObjectsFromArray:other.indexDataArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (rise_drop_result_msgBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (rise_drop_result_msgBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        rise_drop_dataBuilder* subBuilder = [rise_drop_data builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addIndexData:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)indexData {
  return resultRiseDropResultMsg.indexDataArray;
}
- (rise_drop_data*)indexDataAtIndex:(NSUInteger)index {
  return [resultRiseDropResultMsg indexDataAtIndex:index];
}
- (rise_drop_result_msgBuilder *)addIndexData:(rise_drop_data*)value {
  if (resultRiseDropResultMsg.indexDataArray == nil) {
    resultRiseDropResultMsg.indexDataArray = [[NSMutableArray alloc]init];
  }
  [resultRiseDropResultMsg.indexDataArray addObject:value];
  return self;
}
- (rise_drop_result_msgBuilder *)setIndexDataArray:(NSArray *)array {
  resultRiseDropResultMsg.indexDataArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (rise_drop_result_msgBuilder *)clearIndexData {
  resultRiseDropResultMsg.indexDataArray = nil;
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
